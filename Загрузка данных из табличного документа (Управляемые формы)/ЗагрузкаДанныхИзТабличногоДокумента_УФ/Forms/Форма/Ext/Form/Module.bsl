
Перем ПрошлыйМетаданныеСсылкиИсточника;
Перем ДвиженияРегистра;

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура ДобавитьЗаписьВЛогЗагрузки(ТекстСообщения, Отказ = Ложь, Заголовок = "")

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	Если ОкончаниеСлужебногоСообщения > 0 И НачалоСлужебногоСообщения > 0 Тогда
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		СписокЛогЗагрузки.Добавить(Заголовок);
		Заголовок = "";
	КонецЕсли;
	
	СписокЛогЗагрузки.Добавить(ТекстСообщения);
	
КонецПроцедуры // ОбщегоНазначения.СообщитьОбОшибке()

&НаКлиентеНаСервереБезКонтекста
// Функция "расщепляет" строку на подстроки, используя заданный
//		разделитель. Разделитель может иметь любую длину.
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например,
//		ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов,
//		три из которых - пустые строки, а
//		ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры:
//		Стр - 			строка, которую необходимо разложить на подстроки.
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция мРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				Попытка		
					МассивСтрок.Добавить(Стр);	
				Исключение
					МассивСтрок.Добавить(0);
				КонецПопытки; 
				Возврат МассивСтрок;
			КонецЕсли;
			
			Попытка
				
				МассивСтрок.Добавить(Лев(Стр,Поз-1));
				
			Исключение
				МассивСтрок.Добавить(0);
			КонецПопытки; 
			
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Функция приводит строковое представление даты к его значению
//
// Параметры:
//  Представление - Представление числа
//  ОписаниеТипов - Допустимое описание типов значения типа дата
//
// Возвращаемое значение:
//  Значение типа дата
//
Функция мПривестиКДате(Представление, ТипРеквизита = Неопределено, Примечание = "")
	
	Если ТипРеквизита = Неопределено Тогда
		ТипРеквизита = Новый ОписаниеТипов("Дата");
	КонецЕсли;
	
	Результат = ТипРеквизита.ПривестиЗначение(Представление);
	Если Результат = '00010101' Тогда
		
		МассивЧастей = ПолучитьЧастиПредставленияДаты(Представление);
		Если ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
			
			Попытка
				
				Если МассивЧастей.Количество() = 3 Тогда
					Результат = Дата(1,1,1, МассивЧастей[0],МассивЧастей[1],МассивЧастей[2])
				ИначеЕсли МассивЧастей.Количество() = 6 Тогда
					Результат = Дата(1,1,1, МассивЧастей[3],МассивЧастей[4],МассивЧастей[5])
				КонецЕсли
				
			Исключение
				Примечание = "Неправильный формат даты"
			КонецПопытки
			
		ИначеЕсли МассивЧастей.Количество() = 3 или МассивЧастей.Количество() = 6 Тогда
			
			Если МассивЧастей[0] >= 1000 Тогда
				Временно = МассивЧастей[0];
				МассивЧастей[0] = МассивЧастей[2];
				МассивЧастей[2] = Временно
			КонецЕсли;
			
			Если МассивЧастей[2] < 100 Тогда
				МассивЧастей[2] = МассивЧастей[2] + ?(МассивЧастей[2] < 30, 2000,1900)
			КонецЕсли;
			
			Попытка
				Если МассивЧастей.Количество() = 3 или ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0])
				Иначе
					Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0],МассивЧастей[3],МассивЧастей[4],МассивЧастей[5])
				КонецЕсли
			Исключение
				Примечание = "Неправильный формат даты"
			КонецПопытки
			
		КонецЕсли
		
	КонецЕсли;
	
	Возврат Новый Структура("Дата, Примечание", Результат, Примечание)
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает части представления даты
//
// Параметры:
//  Представление - Представление даты
//
// Возвращаемое значение:
//  массив частей даты
//
Функция ПолучитьЧастиПредставленияДаты(ЗНАЧ Представление)
	
	МассивЧастей = Новый Массив;
	НачалоЦифры = 0;
	Для к = 1 По СтрДлина(Представление) Цикл
		
		Символ = Сред(Представление, к ,1);
		ЭтоЦифра = Символ >= "0" и Символ <= "9";
		
		Если ЭтоЦифра Тогда
			
			Если НачалоЦифры = 0 Тогда
				НачалоЦифры = к;
			КонецЕсли;
			
		Иначе
			
			Если Не НачалоЦифры = 0 Тогда
				МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры, к - НачалоЦифры)));
			КонецЕсли;
			
			НачалоЦифры = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НачалоЦифры = 0 Тогда
		МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры)));
	КонецЕсли;
	
	Возврат МассивЧастей;
КонецФункции // ()

&НаСервереБезКонтекста
// Функция возвращает менеджер по типу значения
//
// Параметры:
//  ТипЗначения - Тип значения, по которому нужна вернуть менеджер
//
// Возвращаемое значение:
//  менеджер
Функция ПолучитьМенеджераПоТипу(ТипЗначения)
	
	Если Не ТипЗначения = Неопределено Тогда
		МенеджерыОбъектовМетаданных = Новый Структура("Справочники, Перечисления, Документы, ПланыВидовХарактеристик, ПланыСчетов, ПланыВидовРасчета, БизнесПроцессы, Задачи",
				Справочники,
				Перечисления,
				Документы,
				ПланыВидовХарактеристик,
				ПланыСчетов,
				ПланыВидовРасчета,
				БизнесПроцессы,
				Задачи);
		
			Для Каждого МенеджерОбъектаМетаданных Из МенеджерыОбъектовМетаданных Цикл Если МенеджерОбъектаМетаданных.Значение.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда Возврат МенеджерОбъектаМетаданных.Значение[Метаданные.НайтиПоТипу(ТипЗначения).Имя] КонецЕсли КонецЦикла
	Иначе
		Возврат Неопределено
	КонецЕсли
	
КонецФункции

&НаСервереБезКонтекста
// Функция проверяет на принадлежность объекта к типу ДокументыСсылка
//
// Параметры:
//	ПроверяемыйОбъект - Объект который требуется проверить
//
Функция мЭтоДокумент(ПроверяемыйОбъект)
	
	Возврат Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемыйОбъект))
	
КонецФункции

&НаКлиенте
// Функция определяет текущую строку страницы настроек на которой вызвано событие
//
// Параметры:
//	СтандартнаяОбработка - Функция использования стандартной обработки события элемента формы
//
// Возвращаемые данные:
//	Текущая строка таблицы настройки загрузки
//
Функция мПолучитьТекущиеДанныеСтраницыНастройки(СтандартнаяОбработка = Истина)
	
	СтруктураДанных = Новый Структура("СтрокаНастроек, ТекущиеДанные", Неопределено, Неопределено);
	
	МассивСтрокНастроек = ТаблицыНастроек.НайтиСтроки(Новый Структура("Ключ", Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница.Имя));	
	Если МассивСтрокНастроек.Количество() > 0 Тогда
		СтруктураДанных.СтрокаНастроек = МассивСтрокНастроек[0];
		СтруктураДанных.ТекущиеДанные = Элементы[СтруктураДанных.СтрокаНастроек.Значение].ТекущиеДанные
	Иначе
		ТекДанные = Неопределено;
		СтандартнаяОбработка = Ложь
	КонецЕсли;
	
	Возврат СтруктураДанных
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ/ВОССТАНОВЛЕНИЯ НАСТРОЕК

&НаКлиенте
// Процедура выбора файла в который требуется сохранить настройки
//
// Парметры:
// 	Таблица - Строка с наименование реквизита (или список значений с наименованиями) которые требуется сохранить
//
Процедура СохранитьТаблицуВФайл(Таблица)
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ЗаголовокДиалога = "Сохранить статус выполнения в файл";	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "Настройка универсальной загрузки (*.qxlz)|*.qxlz";
	ДиалогОткрытияФайла.Заголовок = ЗаголовокДиалога;
	ДиалогОткрытияФайла.Фильтр = Фильтр;	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СохранитьТаблицу(Таблица));
		ДвоичныеДанные.Записать(ДиалогОткрытияФайла.ПолноеИмяФайла)
	КонецЕсли
	
КонецПроцедуры

&НаСервере
// Функция сохраяет список значений в структуру и сохраняет его в хранилище значений
// 
// Парметры:
// 	Таблица - Строка с наименование реквизита (или список значений с наименованиями) которые требуется сохранить
//
Функция СохранитьТаблицу(Таблица)
	
	СостояниеВыполнения = Новый Структура;
	
	Если ТипЗнч(Таблица) = Тип("СписокЗначений") Тогда
		Для каждого Стр Из Таблица Цикл СостояниеВыполнения = ВыгрузитьТаблицыВСтруктуру(Стр.Значение, СостояниеВыполнения)	КонецЦикла	
	Иначе
		СостояниеВыполнения = ВыгрузитьТаблицыВСтруктуру(Таблица, СостояниеВыполнения)
	КонецЕсли;
	
	временныйФайл = КаталогВременныхФайлов() + "\temp.txt";
    
	Если ЗначениеЗаполнено(временныйФайл) Тогда
		ЗначениеВФайл(временныйФайл, СостояниеВыполнения)
	КонецЕсли;
	
	СостояниеВыполнения.Очистить();
		
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(временныйФайл), Новый УникальныйИдентификатор)
		
КонецФункции

&НаСервере
// Функция выгружает значение сохраняемых реквизитов в структуру
//
// Параметры:
//	Таблица - Реквизит который требуется выгрузить в структуру
//	СостояниеВыполнения - Структура в которую выгружаются значения реквизитов
//
Функция ВыгрузитьТаблицыВСтруктуру(Таблица, СостояниеВыполнения)
	
	Если (ТипЗнч(ЭтаФорма[Таблица]) = Тип("ДанныеФормыКоллекция")) ИЛИ (ТипЗнч(ЭтаФорма[Таблица]) = Тип("ДанныеФормыДерево")) Тогда
		СостояниеВыполнения.Вставить(Таблица, РеквизитФормыВЗначение(Таблица))
	Иначе
		СостояниеВыполнения.Вставить(Таблица, ЭтаФорма[Таблица])	
	КонецЕсли;
	
	Возврат(СостояниеВыполнения)
	
КонецФункции

&НаСервере
// Процедура получает сохраненную в хранилище структуру с настройками
//
// Параметры:
// 	АдресХранилища - адрес в хранилище значений
//
Процедура ВосстановитьТаблицу(АдресХранилища)
	
	файл = ПолучитьИзВременногоХранилища(АдресХранилища);
 
    временныйФайл = КаталогВременныхФайлов() + "\" + СтрЗаменить(СокрЛП(АдресХранилища),"/", "-") + ".txt";
    файл.Записать(временныйФайл);
	
	Попытка
		СостояниеВыполнения = ЗначениеИзФайла(временныйФайл)
	Исключение
		Сообщить("Не удалось прочитать файл")	
	КонецПопытки;
	
	ВосстановитьНастройкиИзСостоянияВыполнения(СостояниеВыполнения)
	
КонецПроцедуры

&НаСервере
// Процедура восстанавливает настройки из структуры
//
// Параметры:
// 	СостояниеВыполнения - Структура из которой требуется восстановить настройки
//
Процедура ВосстановитьНастройкиИзСостоянияВыполнения(СостояниеВыполнения)
	
	ВосстановленнаяТекущаяВерсия = Неопределено;
	СостояниеВыполнения.Свойство("ТекущаяВерсия", ВосстановленнаяТекущаяВерсия);
	
	ВостановитьТаблицуИзСоответствия("ЗамещатьСуществующиеЗаписи", СостояниеВыполнения);	
	ВостановитьТаблицуИзСоответствия("НеСоздаватьНовыхЭлементов", СостояниеВыполнения);
	ВостановитьТаблицуИзСоответствия("РучнаяНумерацияКолонокТабличногоДокумента", СостояниеВыполнения);
	ВостановитьТаблицуИзСоответствия("ПерваяСтрокаДанныхТабличногоДокумента", СостояниеВыполнения);
	ВостановитьТаблицуИзСоответствия("ПередЗаписьюОбъекта", СостояниеВыполнения);
	ВостановитьТаблицуИзСоответствия("ПослеДобавленияСтроки", СостояниеВыполнения);
	ВостановитьТаблицуИзСоответствия("ПриЗаписиОбъекта", СостояниеВыполнения);	
	ВостановитьТаблицуИзСоответствия("ПослеЗаписиОбъекта", СостояниеВыполнения);
	
	Если НЕ ВыполняетсяЗаполнениеТЧОбъекта Тогда
		ТипОбъектаСправочника	= Неопределено;		
		ИмяВидаРегистра			= Неопределено;
		ТабличнаяЧастьИсточника	= Неопределено;
		СсылкаДокумента 		= Неопределено;
		РегистрДокумента		= Неопределено;
		
		ВосстановленныйРежимЗагрузки = Неопределено;
		СостояниеВыполнения.Свойство("РежимЗагрузки", ВосстановленныйРежимЗагрузки);
		
		Если РежимЗагрузки = 1 И ВосстановленныйРежимЗагрузки = 1 Тогда
			
			ВосстановленнаяСсылкаИсточника = Неопределено;
			СостояниеВыполнения.Свойство("СсылкаИсточника", ВосстановленнаяСсылкаИсточника);
			Если ТипЗнч(СсылкаИсточника) <> ТипЗнч(ВосстановленнаяСсылкаИсточника) Тогда
				Сообщить("Данная настройка не предназначена для загрузки в этот тип документа!");
				Возврат;
			КонецЕсли;	
		Иначе
			
			СсылкаИсточника			= Неопределено;		
			ВостановитьТаблицуИзСоответствия("РежимЗагрузки", СостояниеВыполнения);	
			УстановитьИсточник();	
			ВостановитьТаблицуИзСоответствия("СсылкаДокумента", СостояниеВыполнения);
			ВостановитьТаблицуИзСоответствия("СсылкаИсточника", СостояниеВыполнения);
			ВостановитьТаблицуИзСоответствия("ИмяВидаРегистра", СостояниеВыполнения);
			ВостановитьТаблицуИзСоответствия("РегистрДокумента", СостояниеВыполнения);
			ВостановитьТаблицуИзСоответствия("ТипОбъектаСправочника", СостояниеВыполнения);
			
		КонецЕсли;
		
	КонецЕсли;
				
	УстановитьСписокТабличныхЧастей();
	УстановитьСписокРегистров();
	Если РежимЗагрузки = 3 Тогда
		ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента()
	КонецЕсли;
	
	ВостановитьТаблицуИзСоответствия("ТабличнаяЧастьИсточника", СостояниеВыполнения);
	
	ОчиститьСозданныеСтраницы(Истина);		
	
	ТаблицыНастроек.Очистить();
	КоличествоСозданныхПодчиненныхНастроек = 0;
	
	ВосстановленнаяТаблицаНастроек = Новый ТаблицаЗначений;
	СостояниеВыполнения.Свойство("ТаблицыНастроек", ВосстановленнаяТаблицаНастроек);
	ВосстановленнаяТаблицаНастроек.Колонки.Добавить("КлючСтраницыНастроек");
	
	Элементы.ГруппаДополнительнаяНастройка.Видимость = Ложь;
	
	Для каждого СтрокаНастроек Из ВосстановленнаяТаблицаНастроек Цикл
		Если ВыполнитьСравнениеВерсий(ВосстановленнаяТекущаяВерсия, "3.0.0.3") Тогда
			СтрокаНастроек.КлючСтраницыНастроек = ДобавитьСтраницуНастроек(СтрокаНастроек.ИмяОбъектаЗагрузки, СтрокаНастроек.Представление, СтрокаНастроек.ДопНастройки, СтрокаНастроек.ЭтоРегистр, СтрокаНастроек.ЗагружаетсяДоОбъекта, СтрокаНастроек.РежимЗагрузки);
			Если СтрокаНастроек.ДопНастройки ИЛИ СтрокаНастроек.ЗагружаетсяДоОбъекта Тогда
				ЗаполнитьНастройкамиСозданнуюСтраницу(СтрокаНастроек.КлючСтраницыНастроек, СтрокаНастроек.ИмяОбъектаЗагрузки, СтрокаНастроек.ЭтоРегистр, СтрокаНастроек.ЗагружаетсяДоОбъекта, Ложь)
			КонецЕсли	
		ИначеЕсли ВыполнитьСравнениеВерсий(ВосстановленнаяТекущаяВерсия, "2.5") Тогда
			СтрокаНастроек.КлючСтраницыНастроек = ДобавитьСтраницуНастроек(СтрокаНастроек.Справочник, СтрокаНастроек.Представление, СтрокаНастроек.ДопНастройки, СтрокаНастроек.ЭтоРегистр, СтрокаНастроек.ЗагружаетсяДоОбъекта, ?(СтрокаНастроек.ДопНастройки, ?(СтрокаНастроек.ЗагружаетсяДоОбъекта, 0, 5), Неопределено));
			Если СтрокаНастроек.ДопНастройки ИЛИ СтрокаНастроек.ЗагружаетсяДоОбъекта Тогда
				ЗаполнитьНастройкамиСозданнуюСтраницу(СтрокаНастроек.КлючСтраницыНастроек, СтрокаНастроек.Справочник, СтрокаНастроек.ЭтоРегистр, СтрокаНастроек.ЗагружаетсяДоОбъекта, Ложь)
			КонецЕсли;
			Элементы.ГруппаДополнительнаяНастройка.Видимость = Истина;
			Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница = Элементы.ГруппаДополнительнаяНастройка;
		ИначеЕсли ВыполнитьСравнениеВерсий(ВосстановленнаяТекущаяВерсия, "2.4") Тогда
			СтрокаНастроек.КлючСтраницыНастроек = ДобавитьСтраницуНастроек(СтрокаНастроек.Справочник, СтрокаНастроек.Представление, СтрокаНастроек.ДопНастройки, СтрокаНастроек.ЭтоРегистр);
			Если СтрокаНастроек.ДопНастройки Тогда
				ЗаполнитьНастройкамиСозданнуюСтраницу(СтрокаНастроек.КлючСтраницыНастроек, СтрокаНастроек.Справочник, СтрокаНастроек.ЭтоРегистр, , Ложь)
			КонецЕсли
		Иначе	
			СтрокаНастроек.КлючСтраницыНастроек = ДобавитьСтраницуНастроек(СтрокаНастроек.Справочник, СтрокаНастроек.Представление, СтрокаНастроек.ДопНастройки);
			Если СтрокаНастроек.ДопНастройки Тогда
				ЗаполнитьНастройкамиСозданнуюСтраницу(СтрокаНастроек.КлючСтраницыНастроек, СтрокаНастроек.Справочник, , , Ложь)
			КонецЕсли
		КонецЕсли
		
	КонецЦикла;
	
	ЗаполнитьНастройкиКолонок();
	
	Для каждого СтрокаНастроек Из ВосстановленнаяТаблицаНастроек Цикл
		
		ВосстановленнаяТаблицаЗагружаемыхРеквизитов = Новый ТаблицаЗначений;
		СостояниеВыполнения.Свойство(СтрокаНастроек.Значение, ВосстановленнаяТаблицаЗагружаемыхРеквизитов);		
		ТЗ = РеквизитФормыВЗначение(СтрокаНастроек.КлючСтраницыНастроек);
		ВосстановитьЗначенияНастроекИзТаблицыРеквизитов(ТЗ, ВосстановленнаяТаблицаЗагружаемыхРеквизитов);
		ЗначениеВРеквизитФормы(ТЗ, СтрокаНастроек.КлючСтраницыНастроек)
		
	КонецЦикла;
	
	СостояниеВыполнения.Очистить()	
	
КонецПроцедуры

&НаСервере
// Процедура восстанавливает реквизит, таблицу значений или дерево значений из структуры
//
// Параметры:
//	Таблица - Наименование восстанавливаемого реквизита, таблицы значений или дерева значений (Строка)
//	СостояниеВыполнения - Структура, из которого требуется восстановить значение
//
Процедура ВостановитьТаблицуИзСоответствия(Таблица, СостояниеВыполнения)
	
	Если ТипЗнч(ЭтаФорма[Таблица]) = Тип("ДанныеФормыКоллекция") Тогда
		ТаблицаОб = Новый ТаблицаЗначений;
		Если НЕ СостояниеВыполнения.Свойство(Таблица, ТаблицаОб) Тогда
			Возврат
		КонецЕсли;	
		ЗначениеВРеквизитФормы(ТаблицаОб, Таблица)
	ИначеЕсли ТипЗнч(ЭтаФорма[Таблица]) = Тип("ДанныеФормыДерево") Тогда
		ДеревоОб = Новый ДеревоЗначений;
		Если НЕ СостояниеВыполнения.Свойство(Таблица, ДеревоОб) Тогда
			Возврат
		КонецЕсли;
		ЗначениеВРеквизитФормы(ДеревоОб, Таблица)	
	Иначе
		Если НЕ СостояниеВыполнения.Свойство(Таблица, ЭтаФорма[Таблица]) Тогда
			Возврат
		КонецЕсли	
	КонецЕсли

КонецПроцедуры

&НаСервере
// Процедура сохраняет настройки в базе данных
//
// Параметры:
//	Пометка - Определяет, что данная настройка должна восстанавливаться при открытии (Булево)
//	Представление - Наименование выбранной настройки под которым она будет сохранена в Хранилище настроек данных формы
//
Процедура СохранитьНастройкуВбазе(Пометка, Представление)
	
	Если Пометка Тогда
		Строка = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Пометка", Истина))
	КонецЕсли;
	Если ЗначениеЗаполнено(Строка) Тогда
		Строка[0].Пометка = Ложь	
	КонецЕсли;
	
	Строка = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Представление", Представление));
		
	Если НЕ ЗначениеЗаполнено(Строка) Тогда
		нСтрока = СписокСохраненныхНастроек.Добавить();
		нСтрока.Представление = Представление;
		нСтрока.Пометка = Пометка
	Иначе
		Строка[0].Пометка = Пометка
	КонецЕсли;
	
	Таблицы = Новый СписокЗначений;	
	Таблицы.Добавить("ТекущаяВерсия");
	Таблицы.Добавить("ЗамещатьСуществующиеЗаписи");
	Таблицы.Добавить("ИмяВидаРегистра");
	Таблицы.Добавить("НеСоздаватьНовыхЭлементов");
	Таблицы.Добавить("ПерваяСтрокаДанныхТабличногоДокумента");
	Таблицы.Добавить("ПередЗаписьюОбъекта");
	Таблицы.Добавить("ПослеДобавленияСтроки");
	Таблицы.Добавить("ПриЗаписиОбъекта");
	Таблицы.Добавить("ПослеЗаписиОбъекта");
	Таблицы.Добавить("РежимЗагрузки");
	Таблицы.Добавить("РучнаяНумерацияКолонокТабличногоДокумента");
	Таблицы.Добавить("СсылкаДокумента");
	Таблицы.Добавить("СсылкаИсточника");
	Таблицы.Добавить("ТабличнаяЧастьИсточника");
	Таблицы.Добавить("ТипОбъектаСправочника");
	Таблицы.Добавить("РегистрДокумента");
	Таблицы.Добавить("ТаблицыНастроек");
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл Таблицы.Добавить(КлючИЗначение.Значение) КонецЦикла;
	
	СостояниеВыполнения = Новый Структура;	
	
	Для каждого Стр Из Таблицы Цикл СостояниеВыполнения = ВыгрузитьТаблицыВСтруктуру(Стр.Значение, СостояниеВыполнения)	КонецЦикла;	
	
	мСохранитьЗначение("Настройки:"+ Представление, СостояниеВыполнения, ИдентификаторОбработки)
	
КонецПроцедуры

&НаСервере
// Процедура восстанавливает настройки в базе данных
//
// Параметры:
//	Представление - Наименование выбранной настройки под которым она сохранена в Хранилище настроек данных формы
//
Процедура ВосстановитьНастройкиВБазе(Представление)
	
	МассивСтрок = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Представление", Представление));
	Если МассивСтрок.Количество() Тогда
		ВосстановленнаяНастройка = мВосстановитьЗначение("Настройки:"+ Представление, ИдентификаторОбработки);
		Если ВосстановленнаяНастройка <> Неопределено Тогда
			ВосстановитьНастройкиИзСостоянияВыполнения(ВосстановленнаяНастройка)
		Иначе
			ВосстановитьНастройкуИзМакета(МассивСтрок[0].ИмяПредопределенногоМакета)	
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
// Процедура получает сохраненную в хранилище структуру с настройками
//
// Параметры:
// 	АдресХранилища - адрес в хранилище значений
//
Процедура ВосстановитьНастройкуИзМакета(ИмяПредопределенногоМакета)
	
	ИмяВременногоФайл = КаталогВременныхФайлов() + "\" + Новый УникальныйИдентификатор + ".txt";
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Текст = ОбработкаОбъект.ПолучитьМакет(ИмяПредопределенногоМакета).ПолучитьТекст();
	ТекстовыйДокумент.УстановитьТекст(Текст);
	ТекстовыйДокумент.Записать(ИмяВременногоФайл);
	
	Попытка
		СостояниеВыполнения = ЗначениеИзФайла(ИмяВременногоФайл)
	Исключение
			
	КонецПопытки;
	
	ВосстановитьНастройкиИзСостоянияВыполнения(СостояниеВыполнения)
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПредопределенныеМакетыНастроек()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для каждого Макет Из ОбработкаОбъект.Метаданные().Макеты Цикл
		Если Лев(Макет.Имя, 10) = "Настройка_" Тогда			
			МассивСтрокНастроек = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("ИмяПредопределенногоМакета", Макет.Имя));
			Если НЕ МассивСтрокНастроек.Количество() Тогда
				Строка = СписокСохраненныхНастроек.Добавить();
				Строка.ИмяПредопределенногоМакета = Макет.Имя;
				Строка.Представление = Макет.Синоним;
				Строка.КартинкаСтроки = 1;
			КонецЕсли;		
		КонецЕсли;		                         
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура восстанавливает значение из Хранилища настроек данных формы
//
// Параметы:
//	Имя - Наименование под которым объект был сохранен в хранилище настроек дынных формы
//
Функция мВосстановитьЗначение(Имя, ИдентификаторОбработки)
	Возврат ХранилищеНастроекДанныхФорм.Загрузить(ИдентификаторОбработки, Имя)
КонецФункции

&НаСервереБезКонтекста
// Процедура сохраняет значение в Хранилище настроек данных формы
//
// Параметры:
//	Имя - Наименование под которым будет сохранено значение
//	Значение - Объект который требуется сохранить
//
Процедура мСохранитьЗначение(Имя, Знач Значение, ИдентификаторОбработки)
	
	Если ТипЗнч(Значение) = Тип("ДанныеФормыКоллекция") Тогда
	
		Значение = ДанныеФормыВЗначение(Значение, Тип("ТаблицаЗначений"))
	
	КонецЕсли; 

	ХранилищеНастроекДанныхФорм.Сохранить(ИдентификаторОбработки, Имя, Значение)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СВЯЗАННЫЕ С ПОДГОТОВКОЙ ДАННЫХ ПРИ НАСТРОЙКЕ ЗАГРУЗКИ

&НаСервере
// Процедура заполняет список выбора элемента управления "ТабличнаяЧастьИсточника"
//
Процедура УстановитьСписокТабличныхЧастей()
	
	СписокВыбора = Элементы.ТабличнаяЧастьИсточника.СписокВыбора;	
	
	СписокВыбора.Очистить();
	Если СсылкаИсточника = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СписокДобавляемыхСтраниц.Очистить();
	Для каждого ТабличнаяЧасть Из СсылкаИсточника.Метаданные().ТабличныеЧасти Цикл
		СписокВыбора.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
		СписокДобавляемыхСтраниц.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление())
	КонецЦикла;
	Если НЕ ПустаяСтрока(ТабличнаяЧастьИсточника) И СписокВыбора.НайтиПоЗначению(ТабличнаяЧастьИсточника) = Неопределено Тогда
		ТабличнаяЧастьИсточника = ""
	КонецЕсли;
	
КонецПроцедуры // ()

&НаСервере
// Процедура заполняет список выбора элемента управления "РегистрДокумента"
//
Процедура УстановитьСписокРегистров()
	
	Если РежимЗагрузки = 3 Тогда
		ИмяОбъекта = "СсылкаДокумента"
	ИначеЕсли РежимЗагрузки = 5 Тогда
		ИмяОбъекта = "СсылкаИсточника"
	Иначе
		Возврат
	КонецЕсли;
	
	СписокВыбора = Элементы.РегистрДокумента.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если РежимЗагрузки = 3 и СсылкаДокумента = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СписокДобавляемыхСтраницРегистры.Очистить();
	Если мЭтоДокумент(ЭтаФорма[ИмяОбъекта]) Тогда
		Для каждого Движение Из ЭтаФорма[ИмяОбъекта].Метаданные().Движения Цикл
			СписокВыбора.Добавить(Движение.Имя, Движение.Представление());
			СписокДобавляемыхСтраницРегистры.Добавить(Движение.Имя, Движение.Представление())
		КонецЦикла
	КонецЕсли
	
КонецПроцедуры // ()

&НаСервере
// Процедура формирует структуру колонок "Таблицы данных" из всех таблиц настроек загрузки
//
Процедура СформироватьСтруктуруКолонок()
	
	НомерКолонки = 1;
	Колонки = Новый Структура;
	
	Для каждого Таблица Из ТаблицыНастроек Цикл СформироватьСтруктуруКолонокТаблицы(Колонки, Таблица.Значение, НомерКолонки, ТаблицыНастроек.Индекс(Таблица), Таблица.Заголовок, Таблица.ТипСтрокой) КонецЦикла;
   
	ДополнительныеСвойства.Вставить("Колонки", Колонки)	
	
КонецПроцедуры // ()

&НаСервере
// Процедура формирует структуру колонок загружаемых реквизитов из табличной части настройки загрузки
//
// Параметры:
//  Колонки - структура колонок таблицы данных
// 	ПолучаемаяТаблица - таблица настройки загрузки
//	НомерКолонки - номер колонки в таблице данных с которой начнется нумерация
//
Процедура СформироватьСтруктуруКолонокТаблицы(Колонки, ПолучаемаяТаблица, НомерКолонки, ИндексТаблицыНастройки, ЗаголовокНастройки, ТипОбъектаСтрокой)
	
	Если ЗначениеЗаполнено(ТипОбъектаСтрокой) Тогда
		
		Колонка = Новый Структура("ЗаголовокНастройки, КолонкаОбработана, ИндексТаблицыНастройки, ЭтоОбъектЗагрузки, ПредставлениеРеквизита, ИмяРеквизита, Пометка, ОписаниеТипов, НомерКолонки, МожетБытьПолемПоиска, ПолеПоиска, РежимЗагрузки, ЗначениеПоУмолчанию, ИскатьПо, СвязьПоТипу, ЭлементСвязиПоТипу, СвязьПоВладельцу, ШиринаКолонки, Выражение, ПредставлениеДопУсловий, ДоступныеТипы, НеУбиратьПометку, ПредставлениеЗначенияПоУмолчанию, НастройкаЗагрузки",
						ЗаголовокНастройки, Ложь, ИндексТаблицыНастройки, Истина, "Загружаемый объект", "ОбъектЗагрузки", Истина, Новый ОписаниеТипов(ТипОбъектаСтрокой), 0);		
		Колонки.Вставить(?(ПолучаемаяТаблица = "ТаблицаЗагружаемыхРеквизитов", "", ПолучаемаяТаблица) + Колонка.ИмяРеквизита, Колонка);
			
		Колонка = Новый Структура("ЗаголовокНастройки, КолонкаОбработана, ИндексТаблицыНастройки, ЭтоОбъектЗагрузки, ПредставлениеРеквизита, ИмяРеквизита, Пометка, ОписаниеТипов, НомерКолонки, МожетБытьПолемПоиска, ПолеПоиска, РежимЗагрузки, ЗначениеПоУмолчанию, ИскатьПо, СвязьПоТипу, ЭлементСвязиПоТипу, СвязьПоВладельцу, ШиринаКолонки, Выражение, ПредставлениеДопУсловий, ДоступныеТипы, НеУбиратьПометку, ПредставлениеЗначенияПоУмолчанию, НастройкаЗагрузки",
						ЗаголовокНастройки, Истина, ИндексТаблицыНастройки, Ложь, "Загружаемый объект найден при поиске", "ОбъектЗагрузкиНайден", Истина, Новый ОписаниеТипов("Булево"), 0);
		Колонки.Вставить(?(ПолучаемаяТаблица = "ТаблицаЗагружаемыхРеквизитов", "", ПолучаемаяТаблица) + Колонка.ИмяРеквизита, Колонка);
		
	КонецЕсли;
	
	Для каждого ЗагружаемыйРеквизит Из ЭтаФорма[ПолучаемаяТаблица] Цикл
		
		Колонка = Новый Структура("ЗаголовокНастройки, КолонкаОбработана, ИндексТаблицыНастройки, ПредставлениеРеквизита, ИмяРеквизита, МожетБытьПолемПоиска, ПолеПоиска, ОписаниеТипов, РежимЗагрузки, НомерКолонки, ЗначениеПоУмолчанию, ИскатьПо, СвязьПоТипу, ЭлементСвязиПоТипу, СвязьПоВладельцу, ШиринаКолонки, Пометка, Выражение, ПредставлениеДопУсловий, ДоступныеТипы, НеУбиратьПометку, ПредставлениеЗначенияПоУмолчанию, НастройкаЗагрузки, ЭтоОбъектЗагрузки", ЗаголовокНастройки, Ложь, ИндексТаблицыНастройки);		
		ЗаполнитьЗначенияСвойств(Колонка, ЗагружаемыйРеквизит);
		
		Если НЕ РучнаяНумерацияКолонокТабличногоДокумента И ЗагружаемыйРеквизит.Пометка Тогда
			Колонка["НомерКолонки"] = НомерКолонки;
			НомерКолонки = НомерКолонки + 1
		ИначеЕсли НЕ ЗагружаемыйРеквизит.Пометка Тогда
			Колонка["НомерКолонки"] = 0	
		КонецЕсли;
		
		Колонки.Вставить(?(ПолучаемаяТаблица = "ТаблицаЗагружаемыхРеквизитов", "", ПолучаемаяТаблица) + Колонка.ИмяРеквизита, Колонка)
		
	КонецЦикла
		
КонецПроцедуры

&НаСервере
// Процедура создает колонки Таблицы подготовленных даннных и добавляет их на форму
//
Процедура СформироватьКолонкиТаблицыПодготовленныхДанных()
	
	ОчиститьТаблицуПодготовленныхДанных();	
	
	Для каждого Таблица Из ТаблицыНастроек Цикл
		
		МассивДобавляемыхРеквизитов = Новый Массив;
		
		Если ЗначениеЗаполнено(Таблица.ТипСтрокой) Тогда
			
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузки", Таблица.Значение + "ОбъектЗагрузки"), Новый ОписаниеТипов(Таблица.ТипСтрокой), "ТаблицаПодготовленныхДанных", "Объект"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузкиНайден", Таблица.Значение + "ОбъектЗагрузкиНайден"), Новый ОписаниеТипов("Булево"), "ТаблицаПодготовленныхДанных", "ОбъектЗагрузкиНайден"));				
			
			ОформлениеНовый = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
			Отбор = ОформлениеНовый.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПодготовленныхДанных." + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузкиНайден", Таблица.Значение + "ОбъектЗагрузкиНайден"));
			Отбор.ПравоеЗначение = Ложь;	
			ЗначениеУОТекст = ОформлениеНовый.Оформление.Элементы.Найти("Текст");
			ЗначениеУОТекст.Значение = "<Новый>";
			ЗначениеУОТекст.Использование = Истина;
			ПолеУО = ОформлениеНовый.Поля.Элементы.Добавить();
			ПолеУО.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПодготовленныхДанных" + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузки", Таблица.Значение + "ОбъектЗагрузки"));
			ПолеУО.Использование = Истина;
			
			ОформлениеНеНайден = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
			Отбор = ОформлениеНеНайден.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПодготовленныхДанных." + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузкиНайден", Таблица.Значение + "ОбъектЗагрузкиНайден"));
			Отбор.ПравоеЗначение = Ложь;	
			ЗначениеУО = ОформлениеНеНайден.Оформление.Элементы.Найти("ЦветФона");
			ЗначениеУО.Значение = ЦветФонаНеНайденныеОбъекты;
			ЗначениеУО.Использование = Истина;
			ПолеУО = ОформлениеНеНайден.Поля.Элементы.Добавить();
			ПолеУО.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПодготовленныхДанных" + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузки", Таблица.Значение + "ОбъектЗагрузки"));
			ПолеУО.Использование = Истина;
			
			ОформлениеНайден = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
			Отбор = ОформлениеНайден.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПодготовленныхДанных." + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузкиНайден", Таблица.Значение + "ОбъектЗагрузкиНайден"));
			Отбор.ПравоеЗначение = Истина;	
			ЗначениеУО = ОформлениеНайден.Оформление.Элементы.Найти("ЦветФона");
			ЗначениеУО.Значение = ЦветФонаНайденныеОбъекты;
			ЗначениеУО.Использование = Истина;	
			ПолеУО = ОформлениеНайден.Поля.Элементы.Добавить();
			ПолеУО.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПодготовленныхДанных" + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузки", Таблица.Значение + "ОбъектЗагрузки"));
			ПолеУО.Использование = Истина;

		КонецЕсли;
		
		Для каждого ЗагружаемыйРеквизит Из ЭтаФорма[Таблица.Значение].НайтиСтроки(Новый Структура("Пометка", Истина)) Цикл 
			Если ЗначениеЗаполнено(Таблица.ТипСтрокой) Тогда
				ПолеУО = ОформлениеНайден.Поля.Элементы.Добавить();
				ПолеУО.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПодготовленныхДанных" + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", ЗагружаемыйРеквизит.ИмяРеквизита, Таблица.Значение + ЗагружаемыйРеквизит.ИмяРеквизита));
				ПолеУО.Использование = Истина;
				ПолеУО = ОформлениеНеНайден.Поля.Элементы.Добавить();
				ПолеУО.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПодготовленныхДанных" + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", ЗагружаемыйРеквизит.ИмяРеквизита, Таблица.Значение + ЗагружаемыйРеквизит.ИмяРеквизита));
				ПолеУО.Использование = Истина;
			КонецЕсли;
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", ЗагружаемыйРеквизит.ИмяРеквизита, Таблица.Значение + ЗагружаемыйРеквизит.ИмяРеквизита), ЗагружаемыйРеквизит.ОписаниеТипов, "ТаблицаПодготовленныхДанных",ЗагружаемыйРеквизит.ПредставлениеРеквизита)) 
		КонецЦикла;
			
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		Группа = Элементы.Добавить("ПД_Группа" + Таблица.Значение, Тип("ГруппаФормы"), Элементы.ТаблицаПодготовленныхДанных);
		Группа.Вид = ВидГруппыФормы.ГруппаКолонок;	
		Группа.Заголовок = Таблица.Заголовок;
		Группа.Группировка = ГруппировкаКолонок.Горизонтальная;
		Группа.ОтображатьВШапке = Истина;
		
		Для каждого Реквизит Из МассивДобавляемыхРеквизитов Цикл ЗаполнитьЗначенияСвойств(Элементы.Добавить("ТаблицаПодготовленныхДанных" + Реквизит.Имя, Тип("ПолеФормы"), Группа), Новый Структура("Вид, ПутьКДанным", ВидПоляФормы.ПолеВвода, "ТаблицаПодготовленныхДанных." + Реквизит.Имя)) КонецЦикла;
		
		Если ЗначениеЗаполнено(Таблица.ТипСтрокой) Тогда
			Элементы["ТаблицаПодготовленныхДанных" + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузкиНайден", Таблица.Значение + "ОбъектЗагрузкиНайден")].Видимость = Ложь;	                              
			Элементы["ТаблицаПодготовленныхДанных" + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузки", Таблица.Значение + "ОбъектЗагрузки")].УстановитьДействие("ОбработкаВыбора","ТаблицаПодготовленныхДанныхОбъектЗагрузкиОбработкаВыбора");
			Элементы["ТаблицаПодготовленныхДанных" + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузки", Таблица.Значение + "ОбъектЗагрузки")].УстановитьДействие("Очистка","ТаблицаПодготовленныхДанныхОбъектЗагрузкиОчистка");	
			Элементы["ТаблицаПодготовленныхДанных" + ?(Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузки", Таблица.Значение + "ОбъектЗагрузки")].УстановитьДействие("ПриИзменении","ТаблицаПодготовленныхДанныхОбъектЗагрузкиПриИзменении");              
		КонецЕсли
	КонецЦикла	
	
КонецПроцедуры // ()

&НаСервере
// Процедура очищает таблицу подготовленных данных
//
Процедура ОчиститьТаблицуПодготовленныхДанных()
	
	МассивРеквизитовУдалить = Новый Массив;
	
	Реквизиты = ПолучитьРеквизиты("ТаблицаПодготовленныхДанных");
		
	Если Реквизиты.Количество() = 1 Тогда Возврат КонецЕсли;
	
	Для каждого Реквизит Из Реквизиты  Цикл Если Реквизит.Имя <> "Идентификатор" Тогда МассивРеквизитовУдалить.Добавить("ТаблицаПодготовленныхДанных." + Реквизит.Имя) КонецЕсли КонецЦикла;
	Для каждого Реквизит Из Реквизиты  Цикл	Если Реквизит.Имя <> "Идентификатор" Тогда Элементы.Удалить(Элементы["ТаблицаПодготовленныхДанных" + Реквизит.Имя]) КонецЕсли КонецЦикла;
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл Элементы.Удалить(Элементы["ПД_Группа" + КлючИЗначение.Значение]) КонецЦикла;
	
	ИзменитьРеквизиты(, МассивРеквизитовУдалить);
	
	Элементы.Загрузить.Видимость = Ложь;
	Элементы.КонтрольЗаполнения.КнопкаПоУмолчанию = Истина
	
КонецПроцедуры

&НаСервере
// Процедура формирует шапку табличного документа, в соответствии с таблицей загружаемых реквизитов
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку
//
Процедура СформироватьШапкуТабличногоДокумента(ТабличныйДокумент)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	
	Таблица = ТЗ.Скопировать();
	Таблица.Сортировать("НомерКолонки");
	
	Колонки = ДополнительныеСвойства.Колонки;
	
	Для каждого КлючИЗначение Из Колонки Цикл
		ЗагружаемыйРеквизит = КлючИЗначение.Значение;
		НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
		Если Не ЗагружаемыйРеквизит.Пометка Или НомерКолонки = 0 Тогда
			Продолжить
		КонецЕсли;
		
		Если ЗагружаемыйРеквизит.ШиринаКолонки = 0 Тогда	
			ШиринаКолонки = 40;
			Если ЗагружаемыйРеквизит.ОписаниеТипов.Типы().Количество() = 1 Тогда
				ПервыйТип = ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[0];
				Если ПервыйТип = Тип("Строка") Тогда
					Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина = 0 Тогда
						ШиринаКолонки = 80
					Иначе
						ШиринаКолонки = Мин(Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина,10),80)
					КонецЕсли
				ИначеЕсли ПервыйТип = Тип("Число") Тогда
					ШиринаКолонки = Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.Разрядность,10)
				ИначеЕсли ПервыйТип = Тип("Булево") Тогда
					ШиринаКолонки = 10
				КонецЕсли
			КонецЕсли
		Иначе
			ШиринаКолонки = ЗагружаемыйРеквизит.ШиринаКолонки
		КонецЕсли;
		
		
		Область = ТабличныйДокумент.Область("R1C"+НомерКолонки);
		БылТекст = Не ПустаяСтрока(Область.Текст);
		Область.Текст       = ?(БылТекст,Область.Текст + Символы.ПС,"") + ЗагружаемыйРеквизит.ПредставлениеРеквизита;
		Область.Расшифровка = ЗагружаемыйРеквизит.ИмяРеквизита;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Область.Обвести(Линия, Линия, Линия, Линия);
		
		ОбластьКолонки = ТабличныйДокумент.Область("C"+НомерКолонки);
		ОбластьКолонки.ШиринаКолонки = ?(БылТекст,Макс(ОбластьКолонки.ШиринаКолонки,ШиринаКолонки),ШиринаКолонки)
		
	КонецЦикла
	
КонецПроцедуры // СформироватьШапкуТабличногоДокумента()

&НаСервере
// Функция возвращает метаданные источника данных
//
// Параметры:
//  ТребуютсяМетаданныеШапки - если требуется получить метаданные не табличной части, а шапки документа
//  ИмяОбъектаЗагрузки - Справочник, метаданные которого нужно получить, при загрузки подчиненных справочников
//
// Возвращаемое значение:
//  Объект метаданных
//
Функция ПолучитьМетаданныеИсточника(ОбъектЗагрузки = Неопределено, ЭтоРегистр = Ложь, ТекРежимЗагрузки = Неопределено)
	
	Если ТекРежимЗагрузки = Неопределено Тогда
		ТекРежимЗагрузки = РежимЗагрузки	
	КонецЕсли;
	
	Если ТекРежимЗагрузки = 0 Тогда
		Если ЗначениеЗаполнено(ОбъектЗагрузки) Тогда
			Возврат Метаданные.Справочники[ОбъектЗагрузки]
		ИначеЕсли НЕ ПустаяСтрока(ТипОбъектаСправочника) Тогда
			Возврат Метаданные.Справочники[ТипОбъектаСправочника]
		КонецЕсли 
	ИначеЕсли ТекРежимЗагрузки = 1 Тогда
		Если ЗначениеЗаполнено(СсылкаИсточника) Тогда
			Если ЗначениеЗаполнено(ОбъектЗагрузки) Тогда 
				Возврат СсылкаИсточника.Метаданные().ТабличныеЧасти.Найти(ОбъектЗагрузки)	
			ИначеЕсли ЗначениеЗаполнено(ТабличнаяЧастьИсточника) Тогда
				Возврат СсылкаИсточника.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧастьИсточника)
			КонецЕсли
		КонецЕсли 
	ИначеЕсли ТекРежимЗагрузки = 2 Тогда
		Если Не ПустаяСтрока(ИмяВидаРегистра) Тогда
			Возврат Метаданные.РегистрыСведений[ИмяВидаРегистра]
		КонецЕсли 
	ИначеЕсли ТекРежимЗагрузки = 3 ИЛИ ТекРежимЗагрузки = 4 Тогда
		
		Если ЗначениеЗаполнено(СсылкаДокумента) Тогда
			Если ЗначениеЗаполнено(ОбъектЗагрузки) Тогда
				ИмяВозвращаемогоРегистра = ОбъектЗагрузки	
			Иначе
				ИмяВозвращаемогоРегистра = РегистрДокумента	
			КонецЕсли;		
			
			Для каждого Движение Из СсылкаДокумента.Метаданные().Движения Цикл Если Движение.Имя = ИмяВозвращаемогоРегистра Тогда Возврат Движение КонецЕсли КонецЦикла
			
		КонецЕсли
		
	ИначеЕсли ТекРежимЗагрузки = 5 Тогда
		
		Если СсылкаИсточника <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбъектЗагрузки) И ЭтоРегистр Тогда
				Для каждого Движение Из СсылкаИсточника.Метаданные().Движения Цикл Если Движение.Имя = ОбъектЗагрузки Тогда Возврат Движение КонецЕсли КонецЦикла;	
			ИначеЕсли ЗначениеЗаполнено(ОбъектЗагрузки) Тогда 
				Возврат СсылкаИсточника.Метаданные().ТабличныеЧасти.Найти(ОбъектЗагрузки)
			Иначе
				Возврат СсылкаИсточника.Метаданные()
			КонецЕсли		
		КонецЕсли
		
	КонецЕсли; 
	
	Возврат Неопределено
	
КонецФункции // ()

&НаСервере
// Проверяет наличие выбранных метаданных
//
Функция ЕстьВыбранныеМетаданные()

	Возврат Не ПолучитьМетаданныеИсточника() = Неопределено

КонецФункции // ЕстьВыбранныеМетаданные()

&НаСервере
// Функция возвращает текст вопроса при загрузки данных
//
Функция ПолучитьТекстВопросаИсточника(ИмяОбъекта = Неопределено, ТекРежимЗагрузки = Неопределено)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ИмяОбъекта, ,ТекРежимЗагрузки);
	
	Ошибка = "";
	ТекстВопросаИсточника = "";
	
	Если РежимЗагрузки = 0 Тогда
		
		ТекстВопросаИсточника = " элементов в справочник: """ + МетаданныеИсточника.Представление() + """"
		
	ИначеЕсли РежимЗагрузки = 1 Тогда
		
		Если СсылкаИсточника.Пустая() Тогда
			Ошибка = "Не выбрана ссылка"
		Иначе
			ОбъектИсточника = СсылкаИсточника.ПолучитьОбъект();
			ТекстВопросаИсточника = " строк в табличную часть: """ + МетаданныеИсточника.Представление() + """"
		КонецЕсли
		
	ИначеЕсли РежимЗагрузки = 2 Тогда
		
		ТекстВопросаИсточника = " записей в регистр сведений: """ + МетаданныеИсточника.Представление() + """"
		
	ИначеЕсли РежимЗагрузки = 5 Тогда
		
		ТекстВопросаИсточника = " объекта: """ + МетаданныеИсточника.Представление() + """: "
		
	КонецЕсли;
	
	Возврат Новый Структура("Ошибка, ТекстВопроса", Ошибка, ТекстВопросаИсточника)
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ДАННЫХ

&НаСервере
Процедура ВыполнитьЗагрузкуДанных(ТекРежимЗагрузки = Неопределено, ОбъектЗагрузки = Неопределено)
	
	Если ТекРежимЗагрузки = Неопределено Тогда ТекРежимЗагрузки = РежимЗагрузки КонецЕсли;
	
	ТаблицаДанных = РеквизитФормыВЗначение("ТаблицаПодготовленныхДанных");
	ТаблицаРеквизитов = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ОбъектЗагрузки, , ТекРежимЗагрузки);
	
	// Получаем таблицу объектов загружаемых до основного объекта
	нСтруктура = Новый Структура("ЗагружаетсяДоОбъекта", Истина);
	ТребуетсяЗагрузкаДоОбъекта = ТаблицыНастроек.Выгрузить(нСтруктура);
	
	КоличествоЭлементов = ТаблицаДанных.Количество();			
	Загружено = 0;
	
	ТекстСообщения = ПолучитьТекстВопросаИсточника(ОбъектЗагрузки, ТекРежимЗагрузки).ТекстВопроса;
	
	Если ТекРежимЗагрузки = 5 Тогда

		ТаблицаДляСветрки = ТаблицаДанных.Скопировать(, "ОбъектЗагрузки");
		ТаблицаДляСветрки.Свернуть("ОбъектЗагрузки");
		
		Для каждого Строка Из ТаблицаДляСветрки Цикл
			
			МассивСтрока = ТаблицаДанных.НайтиСтроки(Новый Структура("ОбъектЗагрузки", Строка.ОбъектЗагрузки));
			ВыполнитьПоследовательнуюЗагрузкуЭлементов(ТекРежимЗагрузки, МетаданныеИсточника, МассивСтрока, ТаблицаРеквизитов, ТребуетсяЗагрузкаДоОбъекта, ТекстСообщения, КоличествоЭлементов, Загружено, ТаблицаДанных)
			
		КонецЦикла;
		
	Иначе
		ВыполнитьПоследовательнуюЗагрузкуЭлементов(ТекРежимЗагрузки, МетаданныеИсточника, ТаблицаДанных, ТаблицаРеквизитов, ТребуетсяЗагрузкаДоОбъекта, ТекстСообщения, КоличествоЭлементов, Загружено, ТаблицаДанных)
	КонецЕсли;
	
	ДобавитьЗаписьВЛогЗагрузки("---------------------------------------------");
	ДобавитьЗаписьВЛогЗагрузки("Загрузка завершена");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоследовательнуюЗагрузкуЭлементов(ТекРежимЗагрузки, МетаданныеИсточника, МассивЗагружаемыхСтрок, ТаблицаРеквизитов, ТребуетсяЗагрузкаДоОбъекта, ТекстСообщения, КоличествоЭлементов, Загружено, ТаблицаДанных)
	
	Если ТекРежимЗагрузки = 1 Тогда
		ОбъектИсточника = СсылкаИсточника.ПолучитьОбъект();
		Источник = ОбъектИсточника[ТабличнаяЧастьИсточника]
	ИначеЕсли ТекРежимЗагрузки = 3 Тогда		
		Если СсылкаДокумента.Пустая() Тогда
			Сообщить("Не выбран документ");
			Возврат
		КонецЕсли; 
		ОбъектИсточника = СсылкаДокумента.ПолучитьОбъект(); 
		Источник = ПолучитьИзВременногоХранилища(АдресХранилищаДвиженияРегистра)
	ИначеЕсли ТекРежимЗагрузки = 5 И МассивЗагружаемыхСтрок.Количество() Тогда
		
		ОбъектНайден = МассивЗагружаемыхСтрок[0]["ОбъектЗагрузкиНайден"];
		Если ОбъектНайден Тогда
			ЗагружаемыйОбъект = МассивЗагружаемыхСтрок[0]["ОбъектЗагрузки"].ПолучитьОбъект();
		Иначе				
			Если Метаданные.Документы.Содержит(МетаданныеИсточника) Тогда
				ЗагружаемыйОбъект = Документы[МетаданныеИсточника.Имя].СоздатьДокумент()
			Иначе
				ЗагружаемыйОбъект = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();
			КонецЕсли;
			ЗагружаемыйОбъект.УстановитьСсылкуНового(МассивЗагружаемыхСтрок[0]["ОбъектЗагрузки"]);
		КонецЕсли;
		
	КонецЕсли;
	
	нСтруктура = Новый Структура("ДопНастройки, ЗагружаетсяДоОбъекта", Истина, Ложь);
	ТЗ_ДопНастроек = ТаблицыНастроек.Выгрузить(нСтруктура);
	
	// Выполняем очистку источников
	Если ТекРежимЗагрузки = 1 ИЛИ ТекРежимЗагрузки = 3 Тогда
		
		Источник.Очистить();	
		
		// Очищаем источники у дополнительный табличный частей и движений	
		Для каждого Строка Из ТЗ_ДопНастроек Цикл
			Если ТекРежимЗагрузки = 1 Тогда
				ДопИсточник = ОбъектИсточника[Строка.ИмяОбъектаЗагрузки];
				ДопИсточник.Очистить()
			ИначеЕсли ТекРежимЗагрузки = 3 Тогда		
				ДопИсточник = ОбъектИсточника.Движения[Строка.ИмяОбъектаЗагрузки];
				ДопИсточник.Очистить();
				ДопИсточник.Записывать = Истина
			КонецЕсли				
		КонецЦикла;
		
	ИначеЕсли ТекРежимЗагрузки = 2 Тогда			
		
		ИзмеренияРегистра = Новый Структура;
		Для каждого Реквизит Из ТаблицаРеквизитов Цикл
			Если Реквизит.МожетБытьПолемПоиска Тогда
				ИзмеренияРегистра.Вставить(Реквизит.ИмяРеквизита, Реквизит.ОписаниеТипов)
			КонецЕсли
		КонецЦикла
		
	КонецЕсли;
	
	ТаблицаТекстовЯчеек = ПолучитьИзВременногоХранилища(АдресХранилищаТекстовЯчеек);
	
	Для каждого ЗагружаемаяСтрока Из МассивЗагружаемыхСтрок Цикл
		
		ОбъектНайден = Ложь;
		ЗаписыватьОбъект = Истина;
		 
		НомерТекущейСтроки = ТаблицаДанных.Индекс(ЗагружаемаяСтрока) + 1;
		
		ТекстыЯчеек = ТаблицаТекстовЯчеек[НомерТекущейСтроки - 1];
		Отказ = Ложь;
		
		Для Каждого сСтрока из ТребуетсяЗагрузкаДоОбъекта Цикл
			
			сСтрока.ОбъектСсылка = ЗагрузитьВСправочник(ЗагружаемаяСтрока, сСтрока.ИмяОбъектаЗагрузки, , сСтрока.Значение, ТребуетсяЗагрузкаДоОбъекта, ТаблицаДанных)			
			
		КонецЦикла;
		
		ТекущаяСтрока = Новый Структура;
		ЗаполнитьСтруктуруТекущейСтроки(ТекущаяСтрока, "ТаблицаЗагружаемыхРеквизитов", ЗагружаемаяСтрока, ТребуетсяЗагрузкаДоОбъекта);
				
		Если ТекРежимЗагрузки = 0 Тогда
			
			ОбъектНайден = ЗагружаемаяСтрока["ОбъектЗагрузкиНайден"];
			Если ОбъектНайден Тогда
				ЗагружаемыйОбъект = ЗагружаемаяСтрока["ОбъектЗагрузки"].ПолучитьОбъект();
			Иначе				
				ЗагружаемыйОбъект = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();
				ЗагружаемыйОбъект.УстановитьСсылкуНового(ЗагружаемаяСтрока["ОбъектЗагрузки"]);
			КонецЕсли;
			
		ИначеЕсли ТекРежимЗагрузки = 1 ИЛИ ТекРежимЗагрузки = 3 Тогда
			
			ЗагружаемыйОбъект = Источник.Добавить();
			ОбъектНайден = Ложь
			
		ИначеЕсли ТекРежимЗагрузки = 2 Тогда
			
			ЗагружаемыйОбъект = РегистрыСведений[МетаданныеИсточника.Имя].СоздатьМенеджерЗаписи();
			Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
				
				Если ИзмеренияРегистра.Свойство(КлючИЗначение.Ключ) Тогда
					ЗагружаемыйОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение
				КонецЕсли
				
			КонецЦикла;
			
			Если Не ЗамещатьСуществующиеЗаписи Тогда
				ЗагружаемыйОбъект.Прочитать();
				ОбъектНайден = ЗагружаемыйОбъект.Выбран()
			Иначе
				ОбъектНайден = Ложь
			КонецЕсли;
						
		КонецЕсли;
		
		// Заполняем данными объект из строки загрузки
		Если Не ОбъектНайден ИЛИ ЗамещатьСуществующиеЗаписи Тогда
			
			Попытка
				ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ТекущаяСтрока)
			Исключение
				ДобавитьЗаписьВЛогЗагрузки("Ошибка при установки значений реквизитов " + ОписаниеОшибки());
			    Отказ = Истина
			КонецПопытки;
			
 		КонецЕсли;
		
		// Загружаем данные по дополнительным таблицам настроек
		СписокПодчиненныхСправочников = Новый СписокЗначений;		
		Для каждого Строка Из ТЗ_ДопНастроек Цикл
			
			Если ТекРежимЗагрузки = 0 Тогда
				
				РезультатЗагрузкиСправочника = ЗагрузитьВСправочник(ЗагружаемаяСтрока, Строка.ИмяОбъектаЗагрузки, ЗагружаемыйОбъект.Ссылка, Строка.Значение, ТребуетсяЗагрузкаДоОбъекта, ТаблицаДанных);	
				СписокПодчиненныхСправочников.Добавить(РезультатЗагрузкиСправочника)
			
			ИначеЕсли (ТекРежимЗагрузки = 1 ИЛИ ТекРежимЗагрузки = 3 ИЛИ ТекРежимЗагрузки = 5) И НЕ Строка.ЗагружаетсяДоОбъекта Тогда
				
				ЗагрузитьДанныеВДполнительнуюТЧИлиРегистр(ЗагружаемыйОбъект, ЗагружаемаяСтрока, Строка.ИмяОбъектаЗагрузки, Строка.Значение, Строка.ЭтоРегистр, ТребуетсяЗагрузкаДоОбъекта)					
				
			КонецЕсли
			
		КонецЦикла;
		
		Если ТекРежимЗагрузки = 0 Тогда
			Если Не Отказ и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, ПередЗаписьюОбъекта, ПриЗаписиОбъекта) Тогда
				ДобавитьЗаписьВЛогЗагрузки(?(ОбъектНайден,"Изменен","Загружен") + " элемент справочника: " + ЗагружаемыйОбъект.Ссылка);
				Загружено = Загружено + 1
			Иначе
				ДобавитьЗаписьВЛогЗагрузки("Объект не " + ?(ОбъектНайден,"изменен","загружен") + ". Элемент справочника: " + ЗагружаемыйОбъект + ".")
			КонецЕсли;
			
			ОбработатьСобытиеПослеЗаписиОбъекта(ЗагружаемыйОбъект, СписокПодчиненныхСправочников, ПослеЗаписиОбъекта)
		ИначеЕсли ТекРежимЗагрузки = 1 Тогда
			
			Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, ПослеДобавленияСтроки, Источник) Тогда
				Отказ = Истина
			КонецЕсли;
			
			Если Не Отказ Тогда
				ДобавитьЗаписьВЛогЗагрузки("Добавлена строка: " + НомерТекущейСтроки)
			Иначе
				ДобавитьЗаписьВЛогЗагрузки("При добавлении строки " + НомерТекущейСтроки + " возникли ошибки. ");
				ЗаписыватьОбъект = Ложь
			КонецЕсли;
			
			Загружено = Загружено + 1
			
		ИначеЕсли ТекРежимЗагрузки = 2 Тогда
			Если Не Отказ и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, ПередЗаписьюОбъекта, ПриЗаписиОбъекта) Тогда
				ДобавитьЗаписьВЛогЗагрузки(?(ОбъектНайден,"Изменена","Добавлена") + " запись № " + НомерТекущейСтроки + ".");
				Загружено = Загружено + 1
			Иначе
				ДобавитьЗаписьВЛогЗагрузки("Запись не " + ?(ОбъектНайден,"изменена","загружена") + ". № записи: " + НомерТекущейСтроки + ".")
			КонецЕсли
		ИначеЕсли ТекРежимЗагрузки = 3 Тогда
			
			Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, ПослеДобавленияСтроки) Тогда
				Отказ = Истина
			КонецЕсли;
			
			Если Не Отказ Тогда
				ДобавитьЗаписьВЛогЗагрузки("Добавлена проводка: " + НомерТекущейСтроки);
				
				ЗагружаемыйОбъект.Активность  = Истина;
				ЗагружаемыйОбъект.Регистратор = ОбъектИсточника;
				ЗагружаемыйОбъект.Период 	   = ОбъектИсточника.Дата;
				ЗагружаемыйОбъект.НомерСтроки = Загружено+1;
				ЗагружаемыйОбъект.МоментВремени = ОбъектИсточника.МоментВремени()
			Иначе
				ДобавитьЗаписьВЛогЗагрузки("При добавлении проводки " + НомерТекущейСтроки + " возникли ошибки. ");
				ЗаписыватьОбъект = Ложь
			КонецЕсли;
			
			Загружено = Загружено + 1
			
		ИначеЕсли ТекРежимЗагрузки = 5 Тогда
			
			Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, ПослеДобавленияСтроки) Тогда
				Отказ = Истина
			КонецЕсли
			
		КонецЕсли
		
	КонецЦикла;
	
	Если ТекРежимЗагрузки = 1  Тогда
		Если ЗаписыватьОбъект и ЗаписатьОбъект(ОбъектИсточника, "", ПередЗаписьюОбъекта, ПриЗаписиОбъекта) Тогда
			
			ДобавитьЗаписьВЛогЗагрузки("Выполнена загрузка"+ 	ТекстСообщения);
			ДобавитьЗаписьВЛогЗагрузки("" +Загружено +" из "+ КоличествоЭлементов + " элементов.");
			Возврат 
		Иначе
			ДобавитьЗаписьВЛогЗагрузки("Объект не записан: " + ЗагружаемыйОбъект + ".");
			Возврат 
		КонецЕсли
	ИначеЕсли ТекРежимЗагрузки = 0 Тогда
		ДобавитьЗаписьВЛогЗагрузки("Выполнена загрузка"+ 	ТекстСообщения);
		ДобавитьЗаписьВЛогЗагрузки("" +Загружено +" из "+ КоличествоЭлементов + " элементов.");
		Возврат 
	ИначеЕсли ТекРежимЗагрузки = 2 Тогда
		ДобавитьЗаписьВЛогЗагрузки("Выполнена загрузка"+ 	ТекстСообщения);
		ДобавитьЗаписьВЛогЗагрузки("" +Загружено +" из "+ КоличествоЭлементов + " записей.");
		Возврат 
	ИначеЕсли ТекРежимЗагрузки = 3 Тогда
		
		ОбъектИсточника.Движения[РегистрДокумента].Записывать = Истина;
		ОбъектИсточника.Движения[РегистрДокумента].Загрузить(Источник);
		
		Если ЗаписыватьОбъект и ЗаписатьОбъект(ОбъектИсточника, "", ПередЗаписьюОбъекта, ПриЗаписиОбъекта) Тогда
			
			ДобавитьЗаписьВЛогЗагрузки("Выполнена загрузка"+ 	ТекстСообщения);
			ДобавитьЗаписьВЛогЗагрузки("" +Загружено +" из "+ КоличествоЭлементов + " проводок.");
			Возврат 
		Иначе
			ДобавитьЗаписьВЛогЗагрузки("Объект не записан: " + Объект + ".");
			Возврат 
		КонецЕсли
	ИначеЕсли ТекРежимЗагрузки = 5 Тогда 
		Загружено = Загружено + 1;                            
		Если ЗаписыватьОбъект и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, ПередЗаписьюОбъекта, ПриЗаписиОбъекта, Метаданные.Документы.Содержит(МетаданныеИсточника)) Тогда
			ДобавитьЗаписьВЛогЗагрузки("Выполнена загрузка " + ТекстСообщения + " " + ОбъектИсточника);
			ДобавитьЗаписьВЛогЗагрузки("" +Загружено +" из "+ КоличествоЭлементов + " элементов.")
		Иначе
			ДобавитьЗаписьВЛогЗагрузки("Объект не записан: " + Объект + ".");
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция получает структуру текущей строки из загружаемой строки
//
Функция ЗаполнитьСтруктуруТекущейСтроки(ТекущаяСтрока, ИмяТЗ, ЗагружаемаяСтрока, ТребуетсяЗагрузкаДоОбъекта)
	
	Для Каждого сСтрока из ЭтаФорма[ИмяТЗ] Цикл
		
		Если ЗначениеЗаполнено(сСтрока.НастройкаЗагрузки) Тогда
			
			Если сСтрока.НастройкаЗагрузки = "ТаблицаЗагружаемыхРеквизитов" Тогда
				
				ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, ЗагружаемаяСтрока["ОбъектЗагрузки"])
				
			Иначе
				стр = Новый Структура("Значение", сСтрока.НастройкаЗагрузки);
				СтрокаНастроек = ТребуетсяЗагрузкаДоОбъекта.НайтиСтроки(стр);
				Если СтрокаНастроек.Количество() Тогда
					
					ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, ЗагружаемаяСтрока[СтрокаНастроек[0].Значение + "ОбъектЗагрузки"])
					
				КонецЕсли
			КонецЕсли;
			
		ИначеЕсли сСтрока.Пометка Тогда
			
			ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, ЗагружаемаяСтрока[?(ИмяТЗ = "ТаблицаЗагружаемыхРеквизитов", "", ИмяТЗ) + сСтрока.ИмяРеквизита])
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекущаяСтрока
	
КонецФункции

&НаСервере
// Функция загрузки подчиненных справочников
//
// 	ЗагружаемаяСтрока - строка таблицы подготовленных данных
// 	ТекстыЯчеек - Строка табличного документа
//	ИмяОбъектаЗагрузки - наименование метаданных загружаемого подчиненного справочника
//	Владелец - Владелец загружаемого подчиненного справочника
//	ТаблицаНастроек - Наименование таблицы значений с настройками загрузки
//
Функция ЗагрузитьВСправочник(ЗагружаемаяСтрока, ИмяОбъектаЗагрузки, Владелец = Неопределено, ТаблицаНастроек, ТребуетсяЗагрузкаДоОбъекта, ТаблицаДанных)

	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ИмяОбъектаЗагрузки, , 0);
	
	ТекущаяСтрока = Новый Структура();
	ЗаполнитьСтруктуруТекущейСтроки(ТекущаяСтрока, ТаблицаНастроек, ЗагружаемаяСтрока, ТребуетсяЗагрузкаДоОбъекта);
			
	ОбъектНайден = ЗагружаемаяСтрока[ТаблицаНастроек + "ОбъектЗагрузкиНайден"];
	Если ОбъектНайден Тогда
		ЗагружаемыйОбъект = ЗагружаемаяСтрока[ТаблицаНастроек + "ОбъектЗагрузки"].ПолучитьОбъект();
	Иначе
		ЗагружаемыйОбъект = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();
		ЗагружаемыйОбъект.УстановитьСсылкуНового(ЗагружаемаяСтрока[ТаблицаНастроек + "ОбъектЗагрузки"]);
		// Установим для всех остальных элементов, что элемент уже найден
		МассивИдентичныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура(ТаблицаНастроек + "ОбъектЗагрузки", ЗагружаемаяСтрока[ТаблицаНастроек + "ОбъектЗагрузки"]));
	    Для каждого СтрокаИндентичныхЭлементов Из МассивИдентичныхСтрок Цикл
			СтрокаИндентичныхЭлементов[ТаблицаНастроек + "ОбъектЗагрузкиНайден"] = Истина	
		КонецЦикла;
	КонецЕсли;
	
	Если МетаданныеИсточника.Владельцы.Количество() И НЕ ТекущаяСтрока.Свойство("Владелец") Тогда
		ТекущаяСтрока.Вставить("Владелец", Владелец)
	КонецЕсли;
	
	Если НЕ ОбъектНайден ИЛИ ЗамещатьСуществующиеЗаписи Тогда
		Попытка
			ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ТекущаяСтрока)
		Исключение
			ДобавитьЗаписьВЛогЗагрузки("Ошибка при установки значений реквизитов " + ОписаниеОшибки());
			Отказ = Истина
		КонецПопытки
	КонецЕсли;

	ЗагружаемыйОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		ЗагружаемыйОбъект.Записать();
		Возврат ЗагружаемыйОбъект.Ссылка
	Исключение
	    ДобавитьЗаписьВЛогЗагрузки("Не удалось записать: " + ЗагружаемыйОбъект + ", " + ОписаниеОшибки())
	КонецПопытки	
	
КонецФункции

&НаСервере
// Функция загрузки в дополнительные табличные части и движения документа
// 	ОбъектИсточника - Основной объект загрузки (Объект) 
//	ЗагружаемаяСтрока - Строка загружаемых данных (Строка таблицы значений)
//	ТекстыЯчеек - Строка табличного документа
//	ОбъектЗагрузки - Наименование табличной части или регистра в который загружаются данные (Строка)
//	ТаблицаНастроек - Таблица настроек соответствующая данному объекту загрузки (Таблица значений)
//	ЭтоРегистр - Определяет, что объект загрузки Регистр или Табличная часть (Булево)
//
Функция ЗагрузитьДанныеВДполнительнуюТЧИлиРегистр(ОбъектИсточника, ЗагружаемаяСтрока, ОбъектЗагрузки, ТаблицаНастроек, ЭтоРегистр, ТребуетсяЗагрузкаДоОбъекта)
	
	Отказ = Ложь;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ОбъектЗагрузки, ЭтоРегистр);
	
	Если РежимЗагрузки = 1 Тогда
		Источник = ОбъектИсточника[ОбъектЗагрузки]
	ИначеЕсли РежимЗагрузки = 3 ИЛИ ЭтоРегистр Тогда		
		Источник = ОбъектИсточника.Движения[ОбъектЗагрузки].Выгрузить()
	ИначеЕсли РежимЗагрузки = 5 Тогда		
		Источник = ОбъектИсточника[ОбъектЗагрузки]	
	КонецЕсли;	
	  
	ТекущаяСтрока = Новый Структура;
	ЗаполнитьСтруктуруТекущейСтроки(ТекущаяСтрока, ТаблицаНастроек, ЗагружаемаяСтрока, ТребуетсяЗагрузкаДоОбъекта);
	
	ЗагружаемыйОбъект = Источник.Добавить();
	
	Попытка
		ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ТекущаяСтрока)
	Исключение
		ДобавитьЗаписьВЛогЗагрузки("Ошибка при установки значений реквизитов " + ОписаниеОшибки());
		Отказ = Истина
	КонецПопытки;
			
	Если (РежимЗагрузки = 3 ИЛИ ЭтоРегистр) И Не Отказ Тогда		
		
		ЗагружаемыйОбъект.Активность  = Истина;
		ЗагружаемыйОбъект.Регистратор = ОбъектИсточника.Ссылка;
		ЗагружаемыйОбъект.Период 	   = ОбъектИсточника.Дата;		
		ОбъектИсточника.Движения[ОбъектЗагрузки].Загрузить(Источник);
		
		ДобавитьЗаписьВЛогЗагрузки("Добавлена запись в регистр: " + ОбъектЗагрузки)
		
	ИначеЕсли (РежимЗагрузки = 1 ИЛИ РежимЗагрузки = 5) И Не Отказ Тогда 
		
		ДобавитьЗаписьВЛогЗагрузки("Добавлена строка в табличную часть: " + ОбъектЗагрузки)
		
	КонецЕсли
			
КонецФункции

&НаСервере
// Функция вычисляет значение ячейки для режима "Вычислять"
//
// Параметры:
//  Выражение - програмный код, который необходимо выполнить
//  ТекущиеДанные  - структура загруженных значений
//  ТекстЯчейки    - текст текущей ячейки
//  ТекстыЯчеек    - массив текстов ячеек строки
//  Результат      - результат вычисления
//
// Возвращаемое значение:
//  Структура, сордержащая Результат и ОписаниеОшибки
Функция ВычислитьЗначениеЯчейки(Знач Выражение, Знач ТекущиеДанные, Знач ТекстЯчейки, Знач ТекстыЯчеек, Знач Результат)
	
	ТекстЯчейки = СокрЛП(ТекстЯчейки);
	ОписаниеОшибки = "";
	Попытка
		Выполнить(Выражение)
	Исключение
		ДобавитьЗаписьВЛогЗагрузки(ОписаниеОшибки())
	КонецПопытки;
	
	Возврат Новый Структура("Результат,ОписаниеОшибки",Результат,ОписаниеОшибки)
	
КонецФункции // ВычислитьЗначениеЯчейки(ТекущаяСтрока,Представление)()

&НаСервере
//Функция записывает объект в информационную базу данных, используя события определенные пользователем в форме редактирования событий
//
// Параметры:
//  Объект      - записываемый объект
//  ТекстыЯчеек - массив текстов ячеек, загружаемой строки
//  ПередЗаписьюОбъекта - текст события перед записью объекта
//	ПриЗаписиОбъекта - текст события при записи объекта
//
// Возвращаемое значение:
//  Истина, если объект записан, Ложь - иначе
//
Функция ЗаписатьОбъект(Объект, ТекстыЯчеек = Неопределено, ПередЗаписьюОбъекта, ПриЗаписиОбъекта, ЭтоДокумент = Ложь)
	
	Отказ = Ложь;
	НачатьТранзакцию();
	
	Если Не ПустаяСтрока(ПередЗаписьюОбъекта) Тогда
		Попытка
			Выполнить(ПередЗаписьюОбъекта);
			Если Отказ Тогда
				ОписаниеОшибки = ""
			КонецЕсли
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки()
		КонецПопытки
	КонецЕсли;
	
	Если Не Отказ  Тогда
		Попытка
			Объект.Записать()
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки()
		КонецПопытки
	КонецЕсли;
	
	Если Не Отказ и Не ПустаяСтрока(ПриЗаписиОбъекта) Тогда
		
		Попытка
			Выполнить(ПриЗаписиОбъекта);
			Если Отказ Тогда
				ОписаниеОшибки = ""
			КонецЕсли
			
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки()
		КонецПопытки;
		
		Если Не Отказ Тогда
			Если РежимЗагрузки = 5 И ЭтоДокумент И ПроводитьДокументыПриПоточнойЗагрузке Тогда
				Попытка
					Объект.Записать(РежимЗаписиДокумента.Проведение);	
				Исключение
					ДобавитьЗаписьВЛогЗагрузки(ОписаниеОшибки());
					Попытка
						Объект.Записать(РежимЗаписиДокумента.Запись)
					Исключение
						Отказ = Истина;
						ОписаниеОшибки = ОписаниеОшибки()
					КонецПопытки    
				КонецПопытки;	
			Иначе
				Попытка
					Объект.Записать()
				Исключение
					Отказ = Истина;
					ОписаниеОшибки = ОписаниеОшибки()
				КонецПопытки
			КонецЕсли;
		КонецЕсли
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию()
	Иначе
		ДобавитьЗаписьВЛогЗагрузки(ОписаниеОшибки);
		ОтменитьТранзакцию()
	КонецЕсли;
	
	Возврат Не Отказ
	
КонецФункции // ()

&НаСервере
// Функция обрабатывает событие "После добавления строки",
// определенное пользователем в форме редактирования событий
//
// Параметры:
//  Объект      - записываемый объект
//  ТекущиеДанные  - структура загруженных значений
//  ТекстыЯчеек    - массив текстов ячеек строки
//
// Возвращаемое значение:
//  Истина, если в событие "После добавления строки" не был установлен Отказ, Ложь - иначе
//
Функция ОбработатьСобытиеПослеДобавленияСтроки(Объект, ТекущиеДанные, ТекстыЯчеек, ПослеДобавленияСтроки, Источник = Неопределено)
	
	Попытка
		
		Выполнить(ПослеДобавленияСтроки)
		
	Исключение
		
		ДобавитьЗаписьВЛогЗагрузки(ОписаниеОшибки());
		Возврат Ложь
		
	КонецПопытки;
	
	Возврат Истина
	
КонецФункции // ()

&НаСервере
// Функция обрабатывает событие "После добавления строки",
// определенное пользователем в форме редактирования событий
//
// Параметры:
//  Объект      - записываемый объект
//  ТекущиеДанные  - структура загруженных значений
//  ТекстыЯчеек    - массив текстов ячеек строки
//
// Возвращаемое значение:
//  Истина, если в событие "После добавления строки" не был установлен Отказ, Ложь - иначе
//
Функция ОбработатьСобытиеПослеЗаписиОбъекта(Объект, СписокОбъектов, ПослеЗаписиОбъекта)
	
	Попытка
		
		Выполнить(ПослеЗаписиОбъекта)
		
	Исключение
		
		ДобавитьЗаписьВЛогЗагрузки(ОписаниеОшибки());
		Возврат Ложь
		
	КонецПопытки;
	
	Возврат Истина
	
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧАЮЩИЕ СПИСКИ СВЯЗЕЙ И ВЫБОРОВ ТАБЛИЦ НАСТРОЕК

&НаСервере
// Функция возвращает массив, элементами которого выступают возможные имена представления загружаемого реквизита
//
// Параметры:
//  ОписаниеТипов - Описание типов загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя представления
//
Функция ПолучитьСписокИменПредставлений(ОписаниеТипов)
	
	СписокВыбора = Новый СписокЗначений;
	
	Если ОписаниеТипов.Типы().Количество() > 0 Тогда
		
		ТаблицаТипы = Новый ТаблицаЗначений;
		ТаблицаТипы.Колонки.Добавить("СтрокаПоиска", Новый ОписаниеТипов("Строка"));
		ТаблицаТипы.Колонки.Добавить("ПредставлениеПоиска", Новый ОписаниеТипов("Строка"));
		ТаблицаТипы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		Для каждого Тип Из ОписаниеТипов.Типы() Цикл
			
			МетаданныеТипа      = Метаданные.НайтиПоТипу(Тип);
			ЭтоСправочник       = Справочники.ТипВсеСсылки().СодержитТип(Тип);
			ЭтоСчет             = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип);
			ЭтоВидХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип);
			ЭтоДокумент			= Документы.ТипВсеСсылки().СодержитТип(Тип);
			
			Если ЭтоСправочник ИЛИ ЭтоСчет Или ЭтоВидХарактеристик Тогда
				
				ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
				ЕстьИмя = МетаданныеТипа.ДлинаНаименования > 0;
				
				ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,
				?(ЭтоСчет,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики));
				
				Если МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода Тогда
					
					Если ЕстьКод Тогда
						Стр = ТаблицаТипы.Найти("Код", "СтрокаПоиска");
						Если ЗначениеЗаполнено(Стр) Тогда
							Стр.Количество = Стр.Количество + 1
						Иначе
							Стр = ТаблицаТипы.Добавить();
							Стр.СтрокаПоиска = "Код";
							Стр.ПредставлениеПоиска = "Код";
							Стр.Количество = 1
						КонецЕсли
					КонецЕсли;
					
					Если ЕстьИмя Тогда
						Стр = ТаблицаТипы.Найти("Наименование", "СтрокаПоиска");
						Если ЗначениеЗаполнено(Стр) Тогда
							Стр.Количество = Стр.Количество + 1
						Иначе
							Стр = ТаблицаТипы.Добавить();
							Стр.СтрокаПоиска = "Наименование";
							Стр.ПредставлениеПоиска = "Наименование";
							Стр.Количество = 1
						КонецЕсли
					КонецЕсли
					
				Иначе
					
					Если ЕстьИмя Тогда
						Стр = ТаблицаТипы.Найти("Наименование", "СтрокаПоиска");
						Если ЗначениеЗаполнено(Стр) Тогда
							Стр.Количество = Стр.Количество + 1
						Иначе
							Стр = ТаблицаТипы.Добавить();
							Стр.СтрокаПоиска = "Наименование";
							Стр.ПредставлениеПоиска = "Наименование";
							Стр.Количество = 1
						КонецЕсли
					КонецЕсли;
					
					Если ЕстьКод Тогда
						Стр = ТаблицаТипы.Найти("Код", "СтрокаПоиска");
						Если ЗначениеЗаполнено(Стр) Тогда
							Стр.Количество = Стр.Количество + 1
						Иначе
							Стр = ТаблицаТипы.Добавить();
							Стр.СтрокаПоиска = "Код";
							Стр.ПредставлениеПоиска = "Код";
							Стр.Количество = 1
						КонецЕсли
					КонецЕсли
					
				КонецЕсли;
				
				Для каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
					
					Если Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать
						И Реквизит.Тип.Типы().Количество() = 1 и Реквизит.Тип.Типы()[0] = Тип ("Строка") Тогда
						
						Стр = ТаблицаТипы.Найти(Реквизит.Имя, "СтрокаПоиска");
						Если ЗначениеЗаполнено(Стр) Тогда
							Стр.Количество = Стр.Количество + 1
						Иначе
							Стр = ТаблицаТипы.Добавить();
							Стр.СтрокаПоиска = Реквизит.Имя;
							Стр.ПредставлениеПоиска = Реквизит.Представление();
							Стр.Количество = 1
						КонецЕсли;
						
					КонецЕсли
					
				КонецЦикла
				
			ИначеЕсли ЭтоДокумент Тогда
				
				Стр = ТаблицаТипы.Найти("Представление", "СтрокаПоиска");
				Если ЗначениеЗаполнено(Стр) Тогда
					Стр.Количество = Стр.Количество + 1
				Иначе
					Стр = ТаблицаТипы.Добавить();
					Стр.СтрокаПоиска = "Представление";
					Стр.ПредставлениеПоиска = "Представление";
					Стр.Количество = 1
				КонецЕсли
				
			КонецЕсли
		КонецЦикла;
		
		НайденныеСтроки = ТаблицаТипы.НайтиСтроки(Новый Структура("Количество", ОписаниеТипов.Типы().Количество()));
		
		Для каждого Строка Из НайденныеСтроки Цикл СписокВыбора.Добавить(Строка.СтрокаПоиска, Строка.ПредставлениеПоиска) КонецЦикла
	КонецЕсли;
	
	Возврат СписокВыбора
	
КонецФункции // ()

&НаСервере
// Функция возвращает список, элементами которого выступают возможные связи по типу для загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//	ТЗ - Таблица настройки загрузки
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя колонки связи или ссылка на элемент связи
//
Функция ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТЗ)
	
	СписокВыбора = Новый СписокЗначений;
	
	ВозможныеПланыСчетов = Новый Структура;
	Для каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		Попытка
			Если ПланСчетов.ВидыСубконто.Тип = ЗагружаемыйРеквизит.ОписаниеТипов Тогда
				
				ВозможныеПланыСчетов.Вставить(ПланСчетов.Имя,ПланыСчетов[ПланСчетов.Имя])
				
			КонецЕсли
		Исключение
			
		КонецПопытки
	КонецЦикла;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		ТипЗНЧПланСчетов = ТипЗНЧ(ПланСчетов.Значение.ПустаяСсылка());
		Для каждого КолонкаСвязиПоТипу Из ТЗ Цикл
			Если КолонкаСвязиПоТипу.ОписаниеТипов.Типы()[0] = ТипЗНЧПланСчетов Тогда
				СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита,КолонкаСвязиПоТипу.ИмяРеквизита)
			КонецЕсли
		КонецЦикла
	КонецЦикла;
	
	Если Не ВозможныеПланыСчетов.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >")
	КонецЕсли;
	
	Возврат СписокВыбора
КонецФункции // ()

&НаСервере
// Функция возвращает список, элементами которого выступают возможные связи по владельцу для загружаемого реквизита
//
// Параметры:
//  ОписаниеТипов - Описание типов загружаемого реквизита
//	ТаблицаКолонок - Таблица колонок связей
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя колонки связи или ссылка на элемент связи
//
Функция ПолучитьСписокСвязейПоВладельцу(ОписаниеТипов, ТаблицаКолонок)
	
	ЕстьТипСамогоОбъекта = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	ТипыВладельцев = Новый Соответствие;
	Для каждого ТипКолонки Из ОписаниеТипов.Типы() Цикл
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипКолонки) Тогда
			Для каждого Владелец Из Метаданные.НайтиПоТипу(ТипКолонки).Владельцы Цикл
				ТипВладельца   = Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка."));
				Если ТипыВладельцев[ТипВладельца] = Неопределено Тогда
					 
					ТипыВладельцев.Вставить(Владелец.ПолноеИмя(), Владелец.ПолноеИмя());
					Для каждого КолонкаСвязиПоВладельцу Из ТаблицаКолонок Цикл
						Если КолонкаСвязиПоВладельцу.ОписаниеТипов.Типы()[0] = ТипВладельца И СписокВыбора.НайтиПоЗначению(КолонкаСвязиПоВладельцу.ИмяРеквизита) = Неопределено Тогда
							// Возможно надо будет по всем типам проходить
							СписокВыбора.Добавить(КолонкаСвязиПоВладельцу.ИмяРеквизита,КолонкаСвязиПоВладельцу.ИмяРеквизита)
						КонецЕсли
					КонецЦикла;
					
					Если РежимЗагрузки = 0 Тогда
						Для каждого СтрокаНастроек Из ТаблицыНастроек Цикл	
							МетаданныеИсточника = ПолучитьМетаданныеИсточника(?(СтрокаНастроек.ИмяОбъектаЗагрузки = "ТаблицаЗагружаемыхРеквизитов", "", СтрокаНастроек.ИмяОбъектаЗагрузки));
							ОписаниеТиповСправочника = Тип(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
							Если ТипВладельца = ОписаниеТиповСправочника Тогда
								Значение = ?(СтрокаНастроек.Значение = "ТаблицаЗагружаемыхРеквизитов", "ОбъектЗагрузки", СтрокаНастроек.Значение + "ОбъектЗагрузки");
								Представление = ?(СтрокаНастроек.Значение = "ТаблицаЗагружаемыхРеквизитов", "< Загружаемый объект >", СтрокаНастроек.Заголовок);
								СписокВыбора.Добавить(Значение, Представление)
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				
				КонецЕсли
			КонецЦикла
		КонецЕсли
	КонецЦикла;
	
	Если ЕстьТипСамогоОбъекта Тогда
		СписокВыбора.Добавить("ОбъектЗагрузки", "< Загружаемый объект >")	
	КонецЕсли;
	
	Если Не ТипыВладельцев.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >")
	КонецЕсли;
	
	Возврат СписокВыбора
	
КонецФункции // ()

&НаСервере
// Процедура получает таблицу данных из табличного документа
//
Процедура ПолучитьТаблицуДанныхНаСервере()
	
	СформироватьСтруктуруКолонок();
	СформироватьКолонкиТаблицыПодготовленныхДанных();
	
	ТаблицаПодготовленныхДанных.Очистить();		
	ТаблицаПолучаемыхДанных = РеквизитФормыВЗначение("ТаблицаПодготовленныхДанных");
	ИнициализироватьСхемуСКДТаблицыПодготовленныхДанных();
	
	АдресХранилищаТекстовЯчеек = ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, ЭтаФорма.УникальныйИдентификатор);
	ТаблицаПодготовленныхДанныхАдресИсходныйТЗ = ПоместитьВоВременноеХранилище(ТаблицаПолучаемыхДанных, ЭтаФорма.УникальныйИдентификатор);
	
	Если ПредварительныйПросмотрТабличногоДокументаПослеОткрытия Тогда
		
		ТаблицаПостроитель = ПрочитатьПостроителемТабличныйДокумент();
		Если НЕ ТаблицаПостроитель.Количество() Тогда
			Возврат
		КонецЕсли;
	Иначе
		
		ТаблицаПостроитель = ПолучитьИзВременногоХранилища(ПрочитанныйТабличныйДокумент);
		
	КонецЕсли;
	
	Для н = 1 По ТаблицаПостроитель.Количество() Цикл ТаблицаПолучаемыхДанных.Добавить() КонецЦикла;
	
	ТаблицаПостроитель.Колонки.Вставить(0);
	
	ПоискЗагружемыхОбъектПроизведен = Ложь;
	Для Каждого Колонка Из ДополнительныеСвойства.Колонки Цикл Если НЕ Колонка.Значение.КолонкаОбработана Тогда ПолучитьКолонкуТаблицыДанных(ДополнительныеСвойства.Колонки, Колонка, ТаблицаПолучаемыхДанных, ТаблицаПостроитель, ПоискЗагружемыхОбъектПроизведен) КонецЕсли КонецЦикла;	

	Для каждого СтрокаНастрок Из ТаблицыНастроек Цикл	
		МетаданныеИсточника = ПолучитьМетаданныеИсточника(?(СтрокаНастрок.ИмяОбъектаЗагрузки = "ТаблицаЗагружаемыхРеквизитов", "", СтрокаНастрок.ИмяОбъектаЗагрузки), , СтрокаНастрок.РежимЗагрузки);		
		Если МетаданныеИсточника <> Неопределено Тогда 
			Если Метаданные.Документы.Содержит(МетаданныеИсточника) ИЛИ Метаданные.Справочники.Содержит(МетаданныеИсточника) Тогда
				Префикс = ?(СтрокаНастрок.Значение = "ТаблицаЗагружаемыхРеквизитов", "", СтрокаНастрок.Значение);
				Колонка = ДополнительныеСвойства.Колонки[Префикс + "ОбъектЗагрузки"];		
				ПолучитьСсылкиОбъектовЗагрузкиТипаСправочник(ТаблицаПолучаемыхДанных, СтрокаНастрок.Значение, СтрокаНастрок.ИмяОбъектаЗагрузки, Префикс, СтрокаНастрок.РежимЗагрузки);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из ТаблицаПолучаемыхДанных Цикл Строка.Идентификатор = Новый УникальныйИдентификатор КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаПолучаемыхДанных, "ТаблицаПодготовленныхДанных");
	
	Если СписокОшибок.Количество() > 0 Тогда
		Сообщить("Выявлено ячеек, содержащих ошибки/неоднозначное представление: " + СписокОшибок.Количество())
	КонецЕсли;
	
	АдресХранилищаТекстовЯчеек = ПоместитьВоВременноеХранилище(ТаблицаПостроитель, ЭтаФорма.УникальныйИдентификатор);
	ТаблицаПодготовленныхДанныхАдресИсходныйТЗ = ПоместитьВоВременноеХранилище(ТаблицаПолучаемыхДанных, ЭтаФорма.УникальныйИдентификатор);
		
КонецПроцедуры

&НаСервере
Функция ПрочитатьПостроителемТабличныйДокумент()
	
	Если ПерваяСтрокаДанныхТабличногоДокумента > ТабличныйДокумент.ВысотаТаблицы Тогда Возврат Новый ТаблицаЗначений КонецЕсли;			
	
	ОбластьДанных = ТабличныйДокумент.ПолучитьОбласть("R" + Формат((ПерваяСтрокаДанныхТабличногоДокумента), "ЧГ=0") + "C1:R" + Формат(ТабличныйДокумент.ВысотаТаблицы, "ЧГ=0") + "C" + Формат(ТабличныйДокумент.ШиринаСтраницы, "ЧГ=0"));
	
	ТабДокумент = Новый ТабличныйДокумент;
	Для К = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл ТабДокумент.Область("R1C" + Формат(К, "ЧГ=0")).Текст = "Колонка" + К КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьДанных);	
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДокумент.Область("R1C1:R" + Формат(ТабДокумент.ВысотаТаблицы, "ЧГ=0") + "C" + Формат(ТабДокумент.ШиринаСтраницы, "ЧГ=0")));
	ТаблицаПостроитель = Построитель.Результат.Выгрузить();
	
	ПрочитанныйТабличныйДокумент = ПоместитьВоВременноеХранилище(ТаблицаПостроитель, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат ТаблицаПостроитель
	
КонецФункции

&НаСервере
Процедура ПолучитьКолонкуТаблицыДанных(Колонки, Колонка, Таблица, ТаблицаПостроитель, ПоискЗагружемыхОбъектПроизведен = Ложь)
	
	Если Колонка.Значение.РежимЗагрузки = "Устанавливать" И Колонка.Значение.Пометка Тогда
		
		Таблица.ЗаполнитьЗначения(Колонка.Значение.ЗначениеПоУмолчанию, Колонка.Ключ)
		
	ИначеЕсли Колонка.Значение.НомерКолонки <> 0 И Колонка.Значение.Пометка Тогда 
		
		Если Колонка.Значение.РежимЗагрузки = "Искать" Тогда
			
			СвязьПоТипу = ?(НЕ Колонка.Значение.СвязьПоТипу = "Нет", Колонка.Значение.СвязьПоТипу, "");
			СвязьПоВладельцу = ?(НЕ Колонка.Значение.СвязьПоВладельцу = "Нет", Колонка.Значение.СвязьПоВладельцу, "");
			ПрефиксНастройки = ?(ТаблицыНастроек[Колонка.Значение.ИндексТаблицыНастройки].Значение = "ТаблицаЗагружаемыхРеквизитов", "", ТаблицыНастроек[Колонка.Значение.ИндексТаблицыНастройки].Значение);
			Если ЗначениеЗаполнено(СвязьПоТипу) Тогда	
				Ключ = ПрефиксНастройки + СвязьПоТипу;				
				Если НЕ Колонки[Ключ].КолонкаОбработана Тогда									
					ПолучитьКолонкуТаблицыДанных(Колонки, Новый Структура("Ключ, Значение", Ключ, Колонки[Ключ]), Таблица, ТаблицаПостроитель)	
				КонецЕсли	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвязьПоВладельцу) Тогда
				Если Найти(СвязьПоВладельцу, "ОбъектЗагрузки") Тогда
					СвязьПоВладельцу = "ОбъектЗагрузки";
					СтрокиПоиска = ЭтаФорма[ТаблицыНастроек[Колонка.Значение.ИндексТаблицыНастройки].Значение].НайтиСтроки(Новый Структура("ПолеПоиска,Пометка",Истина,Истина));
					Если Не СтрокиПоиска.Количество() = 0 Тогда
						Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
							Ключ = ПрефиксНастройки + СтрокаПоиска.ИмяРеквизита;
							Если НЕ Колонки[Ключ].КолонкаОбработана Тогда									
								ПолучитьКолонкуТаблицыДанных(Колонки, Новый Структура("Ключ, Значение", Ключ, Колонки[Ключ]), Таблица, ТаблицаПостроитель)	
							КонецЕсли
						КонецЦикла;
					КонецЕсли;
					ПолучитьСсылкиОбъектовЗагрузкиТипаСправочник(Таблица, ТаблицыНастроек[Колонка.Значение.ИндексТаблицыНастройки].Значение, ТаблицыНастроек[Колонка.Значение.ИндексТаблицыНастройки].ИмяОбъектаЗагрузки, ПрефиксНастройки);	
				Иначе
					Ключ = ПрефиксНастройки + СвязьПоВладельцу;				
					Если НЕ Колонки[Ключ].КолонкаОбработана Тогда									
						ПолучитьКолонкуТаблицыДанных(Колонки, Новый Структура("Ключ, Значение", Ключ, Колонки[Ключ]), Таблица, ТаблицаПостроитель)	
					КонецЕсли
				КонецЕсли;
			 КонецЕсли;
			Таблица.ЗагрузитьКолонку(ВыполнитьПоискПоЭлементамМассива(ТаблицаПостроитель, Таблица, Колонка.Значение.ОписаниеТипов, Колонка.Значение, ПрефиксНастройки, СвязьПоТипу, СвязьПоВладельцу), Колонка.Ключ)					
		ИначеЕсли Колонка.Значение.РежимЗагрузки = "Вычислять" Тогда
			
			ВыполнитьВычислениеЯчеекПоЭлементамТаблицы(ТаблицаПостроитель, Таблица, Колонка.Значение.Выражение, Колонка.Ключ, Колонка.Значение.НомерКолонки)
			
		КонецЕсли;
			 
		Если ЗначениеЗаполнено(Колонка.Значение.ЗначениеПоУмолчанию) Тогда
			ПустыеСтроки = Таблица.НайтиСтроки(Новый Структура(Колонка.Ключ, Таблица.Колонки[Колонка.Ключ].ТипЗначения.ПривестиЗначение()));
			Для каждого ТекСтрока Из ПустыеСтроки Цикл Если НЕ ЗначениеЗаполнено(ТекСтрока[Колонка.Ключ]) Тогда ТекСтрока[Колонка.Ключ] = Колонка.Значение.ЗначениеПоУмолчанию КонецЕсли КонецЦикла
		КонецЕсли
		
	КонецЕсли;

	Колонка.Значение.КолонкаОбработана = Истина
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПоискПоЭлементамМассива(ТаблицаПостроитель, Таблица, ОписаниеТипов, Колонка, ПрефиксНастройки, СвязьПоТипу="", СвязьПоВладельцу="")
	
	МассивРезультат = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(СвязьПоТипу) И ОписаниеТипов.Типы()[0] = Тип("Строка") ИЛИ ОписаниеТипов.Типы()[0] = Тип("Число") Тогда
		
		МассивРезультат =  ПолучитьМассивЭлементовПоТипу(ТаблицаПостроитель, Таблица, ОписаниеТипов.Типы()[0], Колонка)
			
	ИначеЕсли ЗначениеЗаполнено(СвязьПоТипу) Тогда
		
		КлючСвязьПоТипу = ПрефиксНастройки + СвязьПоТипу;
		ТаблицаТипов = Таблица.Скопировать(, КлючСвязьПоТипу);
		ТаблицаТипов.Свернуть(ТаблицаТипов.Колонки[0].Имя);
		ТаблицаТипов.Колонки.Добавить("Тип");
		Для каждого ТекСтрока Из ТаблицаТипов Цикл Если ТекСтрока[0].ВидыСубконто.Количество() >= (Колонка.ЭлементСвязиПоТипу) Тогда ТекСтрока.Тип = ТекСтрока[0].ВидыСубконто[Колонка.ЭлементСвязиПоТипу-1].ВидСубконто.ТипЗначения.Типы()[0] КонецЕсли КонецЦикла;
		ТаблицаТипов.Свернуть(КлючСвязьПоТипу + ",Тип");
		
		Для каждого Строка Из ТаблицаТипов.НайтиСтроки(Новый Структура("Тип", Неопределено)) Цикл ТаблицаТипов.Удалить(Строка) КонецЦикла;
		
		Если ТаблицаТипов.Количество() = 0 Тогда
			Возврат МассивРезультат	
		ИначеЕсли ТаблицаТипов.Количество() = 1 Тогда
			Если ТаблицаТипов[0].Тип = Неопределено Тогда
				Возврат МассивРезультат
			Иначе
				МассивСтрутур = ПолучитьМассивЭлементовПоТипу(ТаблицаПостроитель, Таблица, ТаблицаТипов[0].Тип, Колонка);
				ЗаполнитьМассивРезультатИзМассиваСтруктур(МассивРезультат, МассивСтрутур, ТаблицаПостроитель, Таблица, Колонка, КлючСвязьПоТипу);
			КонецЕсли
		Иначе
			МассивСоответствий = Новый Массив;
			Для н = 1 По Таблица.Количество() Цикл МассивСоответствий.Добавить(Новый Соответствие)	КонецЦикла;
			Для каждого Строка Из ТаблицаТипов Цикл
				МассивТипа = ПолучитьМассивЭлементовПоТипу(ТаблицаПостроитель, Таблица, Строка.Тип, Колонка);
				Для н = 0 По МассивТипа.Количество() - 1 Цикл МассивСоответствий[н].Вставить(Строка[КлючСвязьПоТипу], МассивТипа[н]) КонецЦикла 
			КонецЦикла;	
                    
			ЗаполнитьМассивРезультатИзМассиваСтруктур(МассивРезультат, МассивСоответствий, ТаблицаПостроитель, Таблица, Колонка, КлючСвязьПоТипу);

		КонецЕсли
		
	ИначеЕсли ЗначениеЗаполнено(СвязьПоВладельцу) И Справочники.ТипВсеСсылки().СодержитТип(ОписаниеТипов.Типы()[0]) Тогда
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ОписаниеТипов.Типы()[0]);
		
		Если МетаданныеТипа.Владельцы.Количество() Тогда
			
			КлючСвязьПоВладельцу = ПрефиксНастройки + СвязьПоВладельцу;
			МассивСоответствий = ПолучитьМассивЭлементовСправочникаПоВладельцу(ТаблицаПостроитель, Таблица, ОписаниеТипов.Типы()[0], Колонка, СвязьПоВладельцу, МетаданныеТипа);
			ЗаполнитьМассивРезультатИзМассиваСтруктур(МассивРезультат, МассивСоответствий, ТаблицаПостроитель, Таблица, Колонка, КлючСвязьПоВладельцу)
			
		Иначе
			
			МассивСтрутур = ПолучитьМассивЭлементовПоТипу(ТаблицаПостроитель, Таблица, ОписаниеТипов.Типы()[0], Колонка);
			ЗаполнитьМассивРезультатИзМассиваСтруктур(МассивРезультат, МассивСтрутур, ТаблицаПостроитель, Таблица, Колонка)
		
		КонецЕсли
		
	Иначе
		
		МассивСтрутур = ПолучитьМассивЭлементовПоТипу(ТаблицаПостроитель, Таблица, ОписаниеТипов.Типы()[0], Колонка);
		ЗаполнитьМассивРезультатИзМассиваСтруктур(МассивРезультат, МассивСтрутур, ТаблицаПостроитель, Таблица, Колонка)
		
	КонецЕсли;
	
	Возврат МассивРезультат
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМассивРезультатИзМассиваСтруктур(МассивРезультат, МассивСтрутур, ТаблицаПостроитель, Таблица, Колонка, КлючКолонкиСоответствия = "")
	
	Для каждого ТекСтрока Из Таблица Цикл ИндексСтроки = Таблица.Индекс(ТекСтрока); Строка = ТаблицаПостроитель[ИндексСтроки]; Ячейка = "R"+Формат(ПерваяСтрокаДанныхТабличногоДокумента + ИндексСтроки,"ЧГ=")+"C"+Формат(Колонка.НомерКолонки,"ЧГ="); ТекСтруктура = МассивСтрутур[ИндексСтроки]; Примечание = ?(ТипЗнч(ТекСтруктура)=Тип("Структура"), ТекСтруктура["Примечание"], ?(ТекСтруктура.Получить(ТекСтрока[КлючКолонкиСоответствия]) = Неопределено, Неопределено, ТекСтруктура.Получить(ТекСтрока[КлючКолонкиСоответствия])["Примечание"])); Значение = ?(ТипЗнч(ТекСтруктура)=Тип("Структура"), ТекСтруктура["Значение"], ?(ТекСтруктура.Получить(ТекСтрока[КлючКолонкиСоответствия]) = Неопределено, Неопределено, ТекСтруктура.Получить(ТекСтрока[КлючКолонкиСоответствия])["Значение"])); Если ЗначениеЗаполнено(Строка[Колонка.НомерКолонки]) Тогда Если ЗначениеЗаполнено(Примечание) Тогда СписокОшибок.Добавить("Ячейка[" + Ячейка +"](" + Таблица.Колонки[Колонка.НомерКолонки-1].Имя + "): " + Примечание); Если ПредварительныйПросмотрТабличногоДокументаПослеОткрытия Тогда ТабличныйДокумент.Область(Ячейка).Примечание.Текст = Примечание; КонецЕсли; ИначеЕсли ПредварительныйПросмотрТабличногоДокументаПослеОткрытия Тогда ТабличныйДокумент.Область(Ячейка).Примечание.Текст = "" КонецЕсли; КонецЕсли; МассивРезультат.Добавить(Значение) КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивЭлементовПоТипу(ТаблицаПостроитель, Таблица, ТипРеквизита, Колонка)
	
	нМассив = Новый Массив;	
	
	Если ТипРеквизита = Тип("Строка") Тогда
		Для каждого Элемент Из ТаблицаПостроитель.ВыгрузитьКолонку(Колонка.НомерКолонки) Цикл нМассив.Добавить(СокрЛП(Элемент)) КонецЦикла
	ИначеЕсли ТипРеквизита = Тип("Число") Тогда		
		Для каждого Элемент Из ТаблицаПостроитель.ВыгрузитьКолонку(Колонка.НомерКолонки) Цикл нМассив.Добавить(?(НРег(Элемент) = "да" ИЛИ НРег(Элемент) = "истина" ИЛИ НРег(Элемент) = "включено", 1, ?(НРег(Элемент) = "нет" ИЛИ НРег(Элемент) = "ложь" ИЛИ НРег(Элемент) = "выключено", 0, СтрЗаменить(СокрЛП(Элемент), " ", "")))) КонецЦикла
	ИначеЕсли ТипРеквизита = Тип("Дата") Тогда
		Для каждого Элемент Из ТаблицаПостроитель.ВыгрузитьКолонку(Колонка.НомерКолонки) Цикл нМассив.Добавить(Новый Структура("Значение, Примечание", мПривестиКДате(Элемент, Новый ОписаниеТипов("Дата")).Дата, мПривестиКДате(Элемент, Новый ОписаниеТипов("Дата")).Примечание)) КонецЦикла
	ИначеЕсли ТипРеквизита = Тип("Булево") Тогда		
		Для каждого Элемент Из ТаблицаПостроитель.ВыгрузитьКолонку(Колонка.НомерКолонки) Цикл Если НРег(Элемент) = "да" ИЛИ НРег(Элемент) = "истина" ИЛИ НРег(Элемент) = "включено" ИЛИ НРег(Элемент) = "1" Тогда нМассив.Добавить(Новый Структура("Значение, Примечание",  Истина, "")) ИначеЕсли НРег(Элемент) = "нет" ИЛИ НРег(Элемент) = "ложь" ИЛИ НРег(Элемент) = "выключено" ИЛИ НРег(Элемент) = "0" Тогда нМассив.Добавить(Новый Структура("Значение, Примечание",  Ложь, "")) Иначе нМассив.Добавить(Новый Структура("Значение, Примечание",  Элемент, "Неправильный формат")) КонецЕсли КонецЦикла
	ИначеЕсли ТипРеквизита = Тип("ВидДвиженияНакопления") Тогда
		Для каждого Элемент Из ТаблицаПостроитель.ВыгрузитьКолонку(Колонка.НомерКолонки) Цикл Если ВРег(Элемент) = "ПРИХОД" ИЛИ ВРег(Элемент) = "+" Тогда нМассив.Добавить(Новый Структура("Значение, Примечание",  ВидДвиженияНакопления.Приход, "")) ИначеЕсли ВРег(Элемент) = "РАСХОД" ИЛИ ВРег(Элемент) = "-" Тогда нМассив.Добавить(Новый Структура("Значение, Примечание",  ВидДвиженияНакопления.Расход, "")) Иначе нМассив.Добавить(Новый Структура("Значение, Примечание",  Элемент, "Неправильный формат")) КонецЕсли КонецЦикла
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
		
		Соответствие = Новый Соответствие;
		Для каждого Перечисление Из ПолучитьМенеджераПоТипу(ТипРеквизита) Цикл Соответствие.Вставить(Строка(Перечисление), Перечисление) КонецЦикла;
		Для каждого Элемент Из ТаблицаПостроитель.ВыгрузитьКолонку(Колонка.НомерКолонки) Цикл Если Соответствие[Элемент] <> Неопределено Тогда нМассив.Добавить(Новый Структура("Значение, Примечание",  Соответствие[Элемент], "")) Иначе нМассив.Добавить(Новый Структура("Значение, Примечание",  Элемент, "Значение не найдено")) КонецЕсли КонецЦикла;
		
	Иначе
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);		
		Менеджер = ПолучитьМенеджераПоТипу(ТипРеквизита);
		ИщемПоПредставлению = Ложь;
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ИмяОбъектаМетаданных = "Справочник"	
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ИмяОбъектаМетаданных = "ПланСчетов"
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ИмяОбъектаМетаданных = "ПланВидовХарактеристик"
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ИмяОбъектаМетаданных = "БизнесПроцесс"
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ИмяОбъектаМетаданных = "Задача"	
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ИмяОбъектаМетаданных = "ПланВидовРасчета"
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ИщемПоПредставлению = Истина;
			ИмяОбъектаМетаданных = "Документ"	
		Иначе
			Возврат нМассив
		КонецЕсли;
		
		ИскатьПо = Колонка.ИскатьПо;
		Если ПустаяСтрока(ИскатьПо) И БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда	
			Возврат нМассив
		ИначеЕсли ПустаяСтрока(ИскатьПо) И Документы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ИскатьПо = "Номер"	
		ИначеЕсли ПустаяСтрока(ИскатьПо)Тогда			
			СтрокаОсновногоПредставления = Строка(МетаданныеТипа.ОсновноеПредставление);				
			Если СтрокаОсновногоПредставления = "ВВидеКода" Тогда
				ИскатьПо = "Код"
			ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНаименования" Тогда
				ИскатьПо = "Наименование"
			ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНомера" Тогда
				ИскатьПо = "Номер"
			КонецЕсли
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 			 
			"ВЫБРАТЬ
			|	Максимум(_Таблица.Ссылка) КАК Ссылка,
			|	Количество(_Таблица.Ссылка) КАК Количество,
			|	_Таблица." + ИскатьПо + "
			|ИЗ
			|	"+ИмяОбъектаМетаданных+"." + МетаданныеТипа.Имя + " КАК _Таблица
			|ГДЕ";
			
		Если ИскатьПо = "Представление" И ИщемПоПредставлению Тогда		
			ТекстЗапроса = ТекстЗапроса + "
			|	(_Таблица.Номер В (&Номер)
			|			ИЛИ _Таблица.Дата В (&Дата))";	
		Иначе		
			ТекстЗапроса = ТекстЗапроса + "
			|	_Таблица." + ИскатьПо + " В (&ИскатьПо)";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|
			|СГРУППИРОВАТЬ ПО
			|	_Таблица." + ИскатьПо;
			
		Запрос.Текст = ТекстЗапроса;
		
		ТЗ = ТаблицаПостроитель.Скопировать(, ТаблицаПостроитель.Колонки[Колонка.НомерКолонки].Имя);
		ТЗ.Свернуть(ТЗ.Колонки[0].Имя);
		
		Если ИскатьПо = "Представление" И ИщемПоПредставлению Тогда
			
			СтруктураПредставления = ПолучитьМассивНомеровИДатДокументов(ТЗ.ВыгрузитьКолонку(ТЗ.Колонки[0].Имя));			
			Запрос.УстановитьПараметр("Номер", СтруктураПредставления.МассивНомеров);
			Запрос.УстановитьПараметр("Дата", СтруктураПредставления.МассивДат);
			
		ИначеЕсли ТипЗнч(Менеджер.ПустаяСсылка()[ИскатьПо]) = Тип("Число") Тогда			
			МассивЧисел = Новый Массив;
			Для каждого Элемент Из ТЗ.ВыгрузитьКолонку(ТЗ.Колонки[0].Имя) Цикл Попытка МассивЧисел.Добавить(Число(Элемент)) Исключение КонецПопытки КонецЦикла;
			Запрос.УстановитьПараметр("ИскатьПо", МассивЧисел)
		Иначе
			Запрос.УстановитьПараметр("ИскатьПо", ТЗ.ВыгрузитьКолонку(ТЗ.Колонки[0].Имя));
		КонецЕсли;
		
		Результат = Запрос.Выполнить().Выгрузить();
		Для каждого Элемент Из Результат Цикл Элемент[ИскатьПо] = ВРег(Элемент[ИскатьПо]) КонецЦикла;
		Результат.Индексы.Добавить(ИскатьПо);
		
		Для каждого Строка Из ТаблицаПостроитель Цикл нМассив.Добавить(Новый Структура("Значение, Примечание", ?(Результат.Найти(ВРег(Строка[Колонка.НомерКолонки]), ИскатьПо) <> Неопределено, Результат.Найти(ВРег(Строка[Колонка.НомерКолонки]), ИскатьПо).Ссылка, Неопределено), ?(ЗначениеЗаполнено(Строка[Колонка.НомерКолонки]), ?(Результат.Найти(ВРег(Строка[Колонка.НомерКолонки]), ИскатьПо) <> Неопределено, ?(Результат.Найти(ВРег(Строка[Колонка.НомерКолонки]), ИскатьПо).Количество = 1, "", "Не однозначное представление. Вариантов: " + Результат.Найти(ВРег(Строка[Колонка.НомерКолонки]), ИскатьПо).Количество), "Элемент не найден"), ""))) КонецЦикла
		
	КонецЕсли;
		
	Возврат нМассив

КонецФункции

&НаСервере
Функция ПолучитьМассивЭлементовСправочникаПоВладельцу(ТаблицаПостроитель, Таблица, ТипРеквизита, Колонка, СвязьПоВладельцу, МетаданныеТипа)
	
	нМассив = Новый Массив;	
			
	Менеджер = ПолучитьМенеджераПоТипу(ТипРеквизита);

	ИскатьПо = Колонка.ИскатьПо;
	Если ПустаяСтрока(ИскатьПо)Тогда			
		СтрокаОсновногоПредставления = Строка(МетаданныеТипа.ОсновноеПредставление);				
		Если СтрокаОсновногоПредставления = "ВВидеКода" Тогда
			ИскатьПо = "Код"
		ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНаименования" Тогда
			ИскатьПо = "Наименование"
		ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНомера" Тогда
			ИскатьПо = "Номер"
		КонецЕсли
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 			 
		"ВЫБРАТЬ
		|	_Таблица.Владелец КАК Владелец,
		|	Максимум(_Таблица.Ссылка) КАК Ссылка,
		|	Количество(_Таблица.Ссылка) КАК Количество,
		|	_Таблица." + ИскатьПо + "
		|ИЗ
		|	Справочник." + МетаданныеТипа.Имя + " КАК _Таблица
		|ГДЕ
		|	_Таблица." + ИскатьПо + " В (&ИскатьПо)
		|
		|СГРУППИРОВАТЬ ПО
		|	_Таблица.Владелец,
		|	_Таблица." + ИскатьПо;
	
	ТЗ = ТаблицаПостроитель.Скопировать(, ТаблицаПостроитель.Колонки[Колонка.НомерКолонки].Имя);
	ТЗ.Свернуть(ТЗ.Колонки[0].Имя);
	
	Если ТипЗнч(Менеджер.ПустаяСсылка()[ИскатьПо]) = Тип("Число") Тогда			
		МассивЧисел = Новый Массив;
		Для каждого Элемент Из ТЗ.ВыгрузитьКолонку(ТЗ.Колонки[0].Имя) Цикл Попытка МассивЧисел.Добавить(Число(Элемент)) Исключение КонецПопытки КонецЦикла;
		Запрос.УстановитьПараметр("ИскатьПо", МассивЧисел)
	Иначе
		Запрос.УстановитьПараметр("ИскатьПо", ТЗ.ВыгрузитьКолонку(ТЗ.Колонки[0].Имя));
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого Элемент Из Результат Цикл Элемент[ИскатьПо] = ВРег(Элемент[ИскатьПо]) КонецЦикла;
	Результат.Индексы.Добавить(ИскатьПо);
	
	// Развернутый
	//Для каждого Строка Из ТаблицаПостроитель Цикл 
	//	КлючПоиска = ВРег(Строка[Колонка.НомерКолонки]);
	//	НайденныеСтроки = Результат.НайтиСтроки(Новый Структура(ИскатьПо, КлючПоиска));
	//	ТекСоответствие = Новый Соответствие;	
	//	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	//		ТекСоответствие.Вставить(НайденнаяСтрока.Владелец,
	//		Новый Структура("Значение, Примечание", 
	//			?(НайденнаяСтрока <> Неопределено, 
	//				НайденнаяСтрока.Ссылка, 
	//				Неопределено), 
	//			?(ЗначениеЗаполнено(КлючПоиска), 
	//				?(НайденнаяСтрока <> Неопределено, 
	//				?(НайденнаяСтрока.Количество = 1, 
	//					"", 
	//					"Не однозначное представление. Вариантов: " + НайденнаяСтрока.Количество), 
	//				"Элемент не найден"), 
	//			"")))	
	//	КонецЦикла;
	//	нМассив.Добавить(ТекСоответствие);
	//КонецЦикла;
	
	// В строку	
	Для каждого Строка Из ТаблицаПостроитель Цикл КлючПоиска = ВРег(Строка[Колонка.НомерКолонки]); НайденныеСтроки = Результат.НайтиСтроки(Новый Структура(ИскатьПо, КлючПоиска)); ТекСоответствие = Новый Соответствие; Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл ТекСоответствие.Вставить(НайденнаяСтрока.Владелец, Новый Структура("Значение, Примечание", ?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.Ссылка, Неопределено), ?(ЗначениеЗаполнено(КлючПоиска), ?(НайденнаяСтрока <> Неопределено, ?(НайденнаяСтрока.Количество = 1, "", "Не однозначное представление. Вариантов: " + НайденнаяСтрока.Количество), "Элемент не найден"), ""))) КонецЦикла; нМассив.Добавить(ТекСоответствие); КонецЦикла;

	Возврат нМассив

КонецФункции

&НаСервере
Функция ВыполнитьВычислениеЯчеекПоЭлементамТаблицы(ТаблицаПостроитель, Таблица, Выражение, Ключ, НомерКолонки)
	
	Для каждого ТекСтрока Из ТаблицаПостроитель Цикл Таблица[ТаблицаПостроитель.Индекс(ТекСтрока)][Ключ] = ВычислитьЗначениеЯчейки(Выражение, Таблица[ТаблицаПостроитель.Индекс(ТекСтрока)], ТекСтрока[НомерКолонки], ТекСтрока, Таблица[ТаблицаПостроитель.Индекс(ТекСтрока)][Ключ]).Результат КонецЦикла

КонецФункции

&НаСервере
// Возвращает список выбора, закэшированный в таблице значений для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		получить связанный список выбора
//  ТипСписка - Строка - Вид возращаемого списка
// Возвращаемое значение:
//   СписокЗначений - список значений для выбора для этого реквизита
//
Функция ПолучитьСписокВыбора(ИмяРеквизита, ТипСписка)
	
	Стр = СпискиВыбораРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита, ТипСписка", ИмяРеквизита, ТипСписка));
	
	Если Стр.Количество() > 0 Тогда
		Возврат Стр[0].СписокВыбора
	Иначе
		Возврат Новый СписокЗначений
	КонецЕсли

КонецФункции

&НаСервере
Процедура ПолучитьСсылкиОбъектовЗагрузкиТипаСправочник(Таблица, ИмяТЗ, ИмяОбъектаЗагрузки, Префикс, ТекРежимЗагрузки = Неопределено)
	
	Если ТекРежимЗагрузки = Неопределено Тогда
		ТекРежимЗагрузки = РежимЗагрузки
	КонецЕсли;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(?(ИмяОбъектаЗагрузки = "ТаблицаЗагружаемыхРеквизитов", "", ИмяОбъектаЗагрузки), , ТекРежимЗагрузки);
	
	СтрокиПоиска = ЭтаФорма[ИмяТЗ].НайтиСтроки(Новый Структура("ПолеПоиска,Пометка",Истина,Истина));
	
	Если Метаданные.Документы.Содержит(МетаданныеИсточника) Тогда
		МенеджерОбъекта = Документы[МетаданныеИсточника.Имя]	
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеИсточника) Тогда
		МенеджерОбъекта = Справочники[МетаданныеИсточника.Имя]
	Иначе
		Возврат
	КонецЕсли;

	Если Не СтрокиПоиска.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		
		ТекстЗапроса =
		"Выбрать Различные
		|Справочник.Ссылка КАК Ссылка";
		
		КолонкиПоиска = "";
		ТекстЗапросаРеквизиты = "";
		ТекстЗапросаПараметры = "";
		
		Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
			
			ТекстЗапросаРеквизиты = ТекстЗапросаРеквизиты +",
			|Справочник." + СтрокаПоиска.ИмяРеквизита + " КАК " + Префикс + СтрокаПоиска.ИмяРеквизита;
			
			ТекстЗапросаПараметры = ТекстЗапросаПараметры +"
			|Справочник."+СтрокаПоиска.ИмяРеквизита+" В (&" + СтрокаПоиска.ИмяРеквизита + ")
			|И";

			МассивЗначений = Таблица.ВыгрузитьКолонку(Префикс + СтрокаПоиска.ИмяРеквизита);
			Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита, МассивЗначений);

			КолонкиПоиска = КолонкиПоиска + "," + Префикс + СтрокаПоиска.ИмяРеквизита;
		
		КонецЦикла;
		
		ТекстЗапросаПараметры = Лев(ТекстЗапросаПараметры,СтрДлина(ТекстЗапросаПараметры) - 2);

		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРеквизиты;
		
		ТекстЗапроса = ТекстЗапроса +"
		|Из " + ?(Метаданные.Документы.Содержит(МетаданныеИсточника), "Документ", "Справочник") + "."+МетаданныеИсточника.Имя+" КАК Справочник
		|Где";
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПараметры;
				
		Запрос.Текст = ТекстЗапроса;
					
		ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
		
		КолонкиПоиска = Прав(КолонкиПоиска, СтрДлина(КолонкиПоиска)-1);
		СтруктураПоиска = Новый Структура(КолонкиПоиска);
				
		Для каждого Строка Из Таблица Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
			МассивСтрок = ТаблицаРезультатов.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() Тогда
				Строка[Префикс + "ОбъектЗагрузки"] = МассивСтрок[0].Ссылка;
				Строка[Префикс + "ОбъектЗагрузкиНайден"] = Истина;
			Иначе
				
				МассивСтрок = Таблица.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() Тогда
					
					Если ЗначениеЗаполнено(МассивСтрок[0][Префикс + "ОбъектЗагрузки"]) Тогда
						
						Строка[Префикс + "ОбъектЗагрузки"] = МассивСтрок[0][Префикс + "ОбъектЗагрузки"];
						Строка[Префикс + "ОбъектЗагрузкиНайден"] = МассивСтрок[0][Префикс + "ОбъектЗагрузкиНайден"];
						
					Иначе
						
						Строка[Префикс + "ОбъектЗагрузки"] = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор);
						
					КонецЕсли;
				Иначе
	
					Строка[Префикс + "ОбъектЗагрузки"] = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого Строка Из Таблица Цикл
			
			Строка[Префикс + "ОбъектЗагрузки"] = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивНомеровИДатДокументов(МассивЗначений)
	
	СтруктураДанных = Новый Структура("МассивНомеров, МассивДат", Новый Массив, Новый Массив);
	
	Для каждого ЭлементМассива Из МассивЗначений Цикл СтруктураПредставления = РазбитьСтрокуДокументаНаНомерИДату(ЭлементМассива); СтруктураДанных.МассивНомеров.Добавить(СтруктураПредставления.Номер); СтруктураДанных.МассивДат.Добавить(СтруктураПредставления.Дата); КонецЦикла;
	
	Возврат СтруктураДанных
	
КонецФункции

&НаСервере
Функция РазбитьСтрокуДокументаНаНомерИДату(Представление)
	
	СтруктураДанных = Новый Структура("Номер, Дата");
	
	Симв1 = Найти(Представление,":");
	Симв2 = Найти(Представление,"№");
	Симв3 = Найти(Представление,"от");

	//СтруктураДанных.Документ = СокрЛП(Сред(Представление,Симв1+1, Симв2-Симв1-1));
	СтруктураДанных.Номер = СокрЛП(Сред(Представление,Симв2+1, Симв3-Симв2-1));
	СтруктураДанных.Дата = мПривестиКДате(СокрЛП(Сред(Представление,Симв3+2, СтрДлина(Представление)-Симв3))).Дата;
	
	Возврат СтруктураДанных
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТБОРОВ СКД ТАБЛИЦЫ ПОДГОТОВЛЕННЫХ ДАННЫХ

&НаСервере
Процедура ИнициализироватьСхемуСКДТаблицыПодготовленныхДанных()
	
	//Получение самой СКД из макета
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("СКД_ТаблицаПодготовленныхДанных");
	
	// Добавляем поля набора и выбора
	Для каждого КлючИЗначение Из ДополнительныеСвойства.Колонки Цикл
		
		Если НЕ КлючИЗначение.Значение.Пометка Тогда
			Продолжить
		КонецЕсли;
		
		ПолеНабора = СхемаКомпоновкиДанных.НаборыДанных.ТаблицаПодготовленныхДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле = КлючИЗначение.Ключ;
		ПолеНабора.ПутьКДанным = КлючИЗначение.Ключ;
		ПолеНабора.Заголовок = ?(КлючИЗначение.Значение.ЗаголовокНастройки = "Настройка", КлючИЗначение.Значение.ПредставлениеРеквизита, КлючИЗначение.Значение.ЗаголовокНастройки + " - " + КлючИЗначение.Значение.ПредставлениеРеквизита);
		ПолеНабора.ТипЗначения = КлючИЗначение.Значение.ОписаниеТипов;
		
		ПолеВыбора = СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Использование = Истина;
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	ТаблицаПодготовленныхДанныхНастройки.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ТаблицаПодготовленныхДанныхАдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор); 
	ТаблицаПодготовленныхДанныхНастройки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ТаблицаПодготовленныхДанныхАдресСКД));

КонецПроцедуры

&НаСервере
Процедура ТаблицаПодготовленныхДанныхОтобратьНаСервере()
	
	Результат = Новый ТаблицаЗначений;
	
	//Получение самой СКД из макета
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ТаблицаПодготовленныхДанныхАдресСКД);
	
	//Связь между таблицей значений и именами в СКД
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПодготовленныхДанных ", ПолучитьИзВременногоХранилища(ТаблицаПодготовленныхДанныхАдресИсходныйТЗ));
	
	//Макет компоновки
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;		
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
        ТаблицаПодготовленныхДанныхНастройки.ПолучитьНастройки(), , ,
    Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	//Компоновка данных
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

    ПроцессорВывода.УстановитьОбъект(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТаблицаПодготовленныхДанных.Загрузить(Результат);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЯЮЩИЕ ТАБЛИЦЫ НАСТРОЕК ЗАГРУЗКИ

&НаСервере
// Заполняет настройки колонок по умолчанию или по переданным настройкам
//
// Параметры:
//  ТабличнаяЧасть - Таблица настроек которую требуется заполнить
//	ЭтоРегистр - Определяет, что мы заполняем настройки для регистра, а не табличной части
//	ОбъектЗагрузки - Объект настройками загрузки которого заполняется таблица настроек	
//
Процедура ЗаполнитьНастройкиКолонок(ТабличнаяЧасть = Неопределено, ЭтоРегистр = Ложь, ОбъектЗагрузки = Неопределено)
	
	Если ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
		ТЗ = РеквизитФормыВЗначение(ТабличнаяЧасть);	
	Иначе
		ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");		
	КонецЕсли;
	
	ТЗ.Очистить();
		
	Если РежимЗагрузки = 0 Тогда
		ЗаполнитьНастройкиКолонокСправочника(ТЗ);
	ИначеЕсли РежимЗагрузки = 1 Тогда
		ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ);
	ИначеЕсли РежимЗагрузки = 2 Тогда
		ЗаполнитьНастройкиКолонокРегистраСведений(ТЗ);
	ИначеЕсли РежимЗагрузки = 3 ИЛИ ЭтоРегистр Тогда
		ЗаполнитьНастройкиКолонокРегистраДокумента(ТЗ, ОбъектЗагрузки, ЭтоРегистр);
	КонецЕсли;
	
	НомерКолонки = 1;	
			
	Если РежимЗагрузки = 5 И НЕ ЭтоРегистр Тогда
		ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ);			
	КонецЕсли;
		
   	УстновитьПредставлениеДопУсловийТЗ(ТЗ, НомерКолонки);
	Если ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
		ЗначениеВРеквизитФормы(ТЗ, ТабличнаяЧасть);	
	Иначе
		ЗначениеВРеквизитФормы(ТЗ, "ТаблицаЗагружаемыхРеквизитов");		
	КонецЕсли;
				
КонецПроцедуры // ()

&НаСервере
// Процедура восстанавливает таблицу настроек из структуры
//
// Параметры:
//	ТаблицаРеквизитов - таблица значений которую заполняемя
//  ВосстановленнаяТаблицаРеквизитов - таблица значений, по которой заполняем ТаблицуРеквизитов
//
Процедура ВосстановитьЗначенияНастроекИзТаблицыРеквизитов(ТаблицаРеквизитов, ВосстановленнаяТаблицаРеквизитов)
	
	НомерКолонкиОформления = 0;

	Для каждого Колонка Из ВосстановленнаяТаблицаРеквизитов Цикл

		ЗагружаемыйРеквизит = ТаблицаРеквизитов.Найти(Колонка.ИмяРеквизита,"ИмяРеквизита");
		Если Не ЗагружаемыйРеквизит = Неопределено Тогда
			Индекс = ТаблицаРеквизитов.Индекс(ЗагружаемыйРеквизит);
			Если Индекс >= НомерКолонкиОформления Тогда
				ЗаполнитьЗначенияСвойств(ЗагружаемыйРеквизит, Колонка);
				
				ТаблицаРеквизитов.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
				НомерКолонкиОформления = НомерКолонкиОформления + 1;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Заполняет настройки колонок по умолчанию для табличной части
//
Процедура ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ, ОбъектЗагрузки = Неопределено)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ОбъектЗагрузки);
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для каждого Реквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = "Ссылка" 
			ИЛИ Реквизит.Имя = "ПометкаУдаления" 
			ИЛИ Реквизит.Имя = "НомерСтроки"
			ИЛИ Реквизит.Имя = "Предопределенный"
			ИЛИ Реквизит.Имя = "ИмяПредопределенныхДанных"
			ИЛИ Реквизит.Имя = "Проведен" Тогда
				Продолжить;
		КонецЕсли;
		ЗагружаемыйРеквизит                        	= ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           	= Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита 	= Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов 			= МетаданныеИсточника.СтандартныеРеквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска 	= Истина;
		ЗагружаемыйРеквизит.ПолеПоиска 				= Истина;
		ЗагружаемыйРеквизит.НеУбиратьПометку 		= Истина;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        	= ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           	= Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита 	= Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов 			= МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска 	= Истина;
	КонецЦикла;
	
	ОбработатьТаблицуЗагружаемыхРеквизитов(ТЗ);
	
КонецПроцедуры // ()

&НаСервере
// Заполняет настройки колонок по умолчанию для справочника
//
Процедура ЗаполнитьНастройкиКолонокСправочника(ТЗ, ИмяОбъектаЗагрузки = Неопределено, ТекРежимЗагрузки = Неопределено)
	
	Если ТекРежимЗагрузки = Неопределено Тогда
		ТекРежимЗагрузки = РежимЗагрузки;	
	КонецЕсли;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ИмяОбъектаЗагрузки, , ТекРежимЗагрузки);
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Код";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Код";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		Иначе
			ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаНаименования > 0 Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаНаименования));
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Владельцы.Количество() > 0 Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Владелец";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Владелец";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		СтрокаОписанияТипов = "";
			
		Для каждого Владелец Из МетаданныеИсточника.Владельцы Цикл
			СтрокаОписанияТипов = ?(ПустаяСтрока(СтрокаОписанияТипов),"",СтрокаОписанияТипов + ", ") + Владелец.ПолноеИмя();
		КонецЦикла;
			
		СтрокаОписанияТипов = СтрЗаменить(СтрокаОписанияТипов,".","Ссылка.");
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов(СтрокаОписанияТипов);
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Иерархический Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Родитель";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Родитель";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
		
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ЗагружаемыйРеквизит                        = ТЗ.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЕсли;
	КонецЦикла;
	
	ОбработатьТаблицуЗагружаемыхРеквизитов(ТЗ);
	
КонецПроцедуры // ()

&НаСервере
// Заполняет настройки колонок по умолчанию для регистра сведений
//
Процедура ЗаполнитьНастройкиКолонокРегистраСведений(ТЗ)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МетаданныеИсточника.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Период";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Период";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ПолеПоиска           = Истина;
		
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Дата", , , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Измерения[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Ресурсы[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	ОбработатьТаблицуЗагружаемыхРеквизитов(ТЗ);
		
КонецПроцедуры // ()

&НаСервере
// Заполняет настройки колонок по умолчанию для регистра документа
//
Процедура ЗаполнитьНастройкиКолонокРегистраДокумента(ТаблицаЗагружаемыхРеквизитов, ОбъектЗагрузки = Неопределено, ЭтоРегистр = Ложь)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ОбъектЗагрузки, ЭтоРегистр);
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кол = 0;
	Попытка   
		Кол = МетаданныеИсточника.ПланСчетов.МаксКоличествоСубконто;
	Исключение КонецПопытки;
	Если Кол>0 Тогда
		Для нн = 4 по ДвиженияРегистра.Колонки.Количество()-1 Цикл
			Реквизит = ДвиженияРегистра.Колонки[нн];
			Если (Реквизит.Имя="МоментВремени") Тогда Продолжить КонецЕсли;
			
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Заголовок;
			ЗагружаемыйРеквизит.ОписаниеТипов 		   = Новый ОписаниеТипов(Реквизит.ТипЗначения, , "Null");
		КонецЦикла;
	Иначе
		
		Попытка
			Если МетаданныеИсточника.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
				ЗагружаемыйРеквизит.ИмяРеквизита           = "ВидДвижения";
				ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Вид движения";
				ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("ВидДвиженияНакопления");	
			КонецЕсли;
		Исключение

		КонецПопытки;

		Для каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ОписаниеТипов          = МетаданныеИсточника.Измерения[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Ресурсы[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЦикла;
		
	КонецЕсли;		
	
	ОбработатьТаблицуЗагружаемыхРеквизитов(ТаблицаЗагружаемыхРеквизитов);
	
КонецПроцедуры // ()

&НаСервере
// Процедура устанавливает связи реквизитов и первоначальные настройки загрузки
//
// Параметры:
//	ТаблицаЗагружаемыхРеквизитов - Таблица значений настройки загрузки
//
Процедура ОбработатьТаблицуЗагружаемыхРеквизитов(ТаблицаЗагружаемыхРеквизитов)
	
	СпискиВыбораРеквизитов.Очистить();
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит.ОписаниеТипов);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
				
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТаблицаЗагружаемыхРеквизитов);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СтрокаСпискаВладелец = СпискиВыбораРеквизитов.Добавить();
		СтрокаСпискаВладелец.ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;
		СтрокаСпискаВладелец.ТипСписка = "СвязьПоВладельцу";
		СтрокаСпискаВладелец.СписокВыбора = СписокВыбора;
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТаблицаЗагружаемыхРеквизитов);
		
		СтрокаСпискаТипы = СпискиВыбораРеквизитов.Добавить();
		СтрокаСпискаТипы.ИмяРеквизита =  ЗагружаемыйРеквизит.ИмяРеквизита;
		СтрокаСпискаТипы.ТипСписка = "СвязьПоТипу";
		СтрокаСпискаТипы.СписокВыбора =  СписокВыбора;
	
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0
		Иначе
			Если Лев(СтрокаСпискаТипы.ИмяРеквизита, 10) = "СубконтоДт" Тогда
				ЗагружаемыйРеквизит.СвязьПоТипу = "СчетДт"	
			ИначеЕсли Лев(СтрокаСпискаТипы.ИмяРеквизита, 10) = "СубконтоКт" Тогда
				ЗагружаемыйРеквизит.СвязьПоТипу = "СчетКт"
			Иначе
				ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение
			КонецЕсли;
			
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3
				
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1
				
			КонецЕсли
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		ЗагружаемыйРеквизит.ДоступныеТипы = ЗагружаемыйРеквизит.ОписаниеТипов;
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать"
		
	КонецЦикла
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает представление дополнительных условий таблицы настройки загрузки
//
// Параметры:
//	ТЗ - Таблица значений настройки загрузки
// 	НомерКолонки - Номер колоки с которой начнется нумерация
//
Процедура УстновитьПредставлениеДопУсловийТЗ(ТЗ, НомерКолонки = 1, ПометкаИспользованияНастройки = Истина)
	
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
			ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ЗагружаемыйРеквизит.Выражение
		Иначе
			ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ?(ПустаяСтрока(ЗагружаемыйРеквизит.ИскатьПо), "", "Искать по "+ЗагружаемыйРеквизит.ИскатьПо)
			+?(ПустаяСтрока(ЗагружаемыйРеквизит.СвязьПоВладельцу), "", " по владельцу "+ЗагружаемыйРеквизит.СвязьПоВладельцу);
		КонецЕсли;
		Если НЕ ЗагружаемыйРеквизит.ОписаниеТипов.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			ЗагружаемыйРеквизит.Пометка      = ПометкаИспользованияНастройки;
			ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
			НомерКолонки = НомерКолонки + 1
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
// Заполняет в таблицу значений движения регистра документа
//
Процедура ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента(ОбъектЗагрузки = Неопределено, НаименованиеСтраницы = Неопределено) Экспорт
	
	ПолучаемДанныеОсновногоРегистра = Ложь;
	
	Если ЗначениеЗаполнено(ОбъектЗагрузки) Тогда
		РегистрЗагрузки = ОбъектЗагрузки
	Иначе
		РегистрЗагрузки = РегистрДокумента;
		ПолучаемДанныеОсновногоРегистра = Истина
	КонецЕсли;
	
	Если СокрЛП(РегистрЗагрузки)<>"" Тогда
				
		ФлагОшибки=0;
		Попытка
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	* 
			|ИЗ
			|	РегистрБухгалтерии."+РегистрЗагрузки+".ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ЖурналПроводок";
			
			Если РежимЗагрузки = 3 Тогда
				Запрос.УстановитьПараметр("Регистратор", СсылкаДокумента.Ссылка)
			ИначеЕсли РежимЗагрузки = 5 Тогда
				Запрос.УстановитьПараметр("Регистратор", СсылкаИсточника.Ссылка)
			КонецЕсли;
			
			Результат = Запрос.Выполнить();
			
			ДвиженияРегистра = Результат.Выгрузить();
			
			ДвиженияРегистра.Колонки.Добавить("МоментВремени", Новый ОписаниеТипов("Дата"));
			
			Если ПолучаемДанныеОсновногоРегистра Тогда
				АдресХранилищаДвиженияРегистра = ПоместитьВоВременноеХранилище(ДвиженияРегистра, Новый УникальныйИдентификатор)
			КонецЕсли		
		Исключение
			ФлагОшибки = 1
		КонецПопытки;
		
		Если ФлагОшибки = 1 Тогда
			ФлагОшибки = 0;
			Попытка
				ТабПоле = РегистрыНакопления[РегистрЗагрузки].СоздатьНаборЗаписей()	
			Исключение
				ФлагОшибки = 1
			КонецПопытки;
			
			Если ФлагОшибки = 1 Тогда
				ФлагОшибки = 0;
				Попытка
					ТабПоле = РегистрыРасчета[РегистрЗагрузки].СоздатьНаборЗаписей()
				Исключение
					ФлагОшибки = 1
				КонецПопытки
			КонецЕсли;
			
			Если ФлагОшибки=1 Тогда
				ФлагОшибки=0;
				Попытка
					ТабПоле = РегистрыСведений[РегистрЗагрузки].СоздатьНаборЗаписей()
				Исключение
					ФлагОшибки = 1
				КонецПопытки
			КонецЕсли;
			
			Попытка
				Если (РежимЗагрузки = 3) ИЛИ ((РежимЗагрузки = 4) И (ЗначениеЗаполнено(СсылкаДокумента))) Тогда
					Отбор = новый структура;
					Отбор.Вставить("Регистратор",СсылкаДокумента);
					ТабПоле.Отбор.Регистратор.Значение = СсылкаДокумента.Ссылка;
					ТабПоле.Прочитать();
					ДвиженияРегистра = ТабПоле.Выгрузить();
					Если ПолучаемДанныеОсновногоРегистра Тогда
						АдресХранилищаДвиженияРегистра = ПоместитьВоВременноеХранилище(ДвиженияРегистра, Новый УникальныйИдентификатор)
					КонецЕсли	
				КонецЕсли
			Исключение
				
			КонецПопытки
		КонецЕсли
	КонецЕсли;	
	
	ЗаполнитьНастройкиКолонок(НаименованиеСтраницы, Истина, ОбъектЗагрузки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ И ОБНОВЛЕНИЯ ДАННЫХ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
// Процедура начинает обновление данных табличного документа
//
// Параметы:
// 	БезВопросов - Булево. Определяет надобность задания вопроса об очистке табличного документа
//
Процедура ОбновитьДанныеТабличногоДокумента(БезВопросов = Ложь)
	
	Если (РежимЗагрузки = 0 или РежимЗагрузки = 2) и Элементы.ТабДокумент.Высота > 1 И Не БезВопросов Тогда
		
		нПараметры = Новый Структура;
		
		ТекстВопроса = "Табличный документ содержит данные. Очистить?";
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросОбновлениеТабличногоДокумента"", ЭтотОбъект, нПараметры);
			|	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			|");
		Иначе
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			ВопросОбновлениеТабличногоДокумента(ОтветНаВопрос, нПараметры)
		КонецЕсли;
			
	Иначе
		ОбновитьДанныеТабличногоДокументаСервер()	
	КонецЕсли
		
КонецПроцедуры

&НаКлиенте
// Процедура выполняет после вопроса об очистке табличного документа
//
Процедура ВопросОбновлениеТабличногоДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
    	ОбновитьДанныеТабличногоДокументаСервер()
	КонецЕсли
	
КонецПроцедуры

&НаСервере
// Процедура обновляет табличный документ
//
Процедура ОбновитьДанныеТабличногоДокументаСервер()

	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруКолонок();
	СформироватьШапкуТабличногоДокумента(ТабличныйДокумент);
	
	Если НЕ ПредварительныйПросмотрТабличногоДокументаПослеОткрытия Тогда
		Возврат
	КонецЕсли;
	
	НомерСтроки = ПерваяСтрокаДанныхТабличногоДокумента;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если РежимЗагрузки = 0 или РежимЗагрузки = 2 или РежимЗагрузки = 3 или РежимЗагрузки = 4 или РежимЗагрузки = 5 или МетаданныеИсточника = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ТаблицыНастроек.Количество() > 1 Тогда
		Возврат
	КонецЕсли;
	
	Если РежимЗагрузки = 1 Тогда
		Источник = СсылкаИсточника[ТабличнаяЧастьИсточника]	
	КонецЕсли;
			
	Для каждого Строка Из Источник Цикл
		
		НомерКолонки = 0;
		
		Для каждого ЗагружаемыйРеквизит Из ЭтаФорма["ТаблицаЗагружаемыхРеквизитов"] Цикл
			
			Если ЗагружаемыйРеквизит.Пометка Тогда
				
				Если РучнаяНумерацияКолонокТабличногоДокумента Тогда
					НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
					Если НомерКолонки = 0 Тогда
						Продолжить
					КонецЕсли;
				Иначе
					НомерКолонки = НомерКолонки + 1
				КонецЕсли;
				
				Область = ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C"+НомерКолонки);
				Значение = Строка[ЗагружаемыйРеквизит.ИмяРеквизита];
				
				Попытка
					Представление = Значение[ЗагружаемыйРеквизит.ИскатьПо]
				Исключение
					Представление = Значение	
				КонецПопытки;
				
				Область.Текст = Представление;
				Область.Расшифровка = Значение
				
			КонецЕсли
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1
	КонецЦикла

КонецПроцедуры
			
// Функция считывает в табличный документ данные из файла в формате Excel
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате Excel, из которого необходимо прочитать данные
//  НомерЛистаExcel    - номер листа книги Excel, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
&НаКлиенте
Функция мПрочитатьТабличныйДокументИзExcel(ИмяФайла, НомерЛистаExcel = 1) Экспорт
	
	xlLastCell = 11;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		ExcelЛист = Excel.Sheets(НомерЛистаExcel);
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Возврат ложь;
		
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	ВсегоСтрок = ActiveCell.Row;
	ВсегоКолонок = ActiveCell.Column;

	Если ПерваяСтрокаДанныхТабличногоДокумента > ВсегоСтрок Тогда Возврат Ложь КонецЕсли;
	
	Область = ExcelЛист.Range(ExcelЛист.Cells(?(ПредварительныйПросмотрТабличногоДокументаПослеОткрытия, 1, ПерваяСтрокаДанныхТабличногоДокумента),1), ExcelЛист.Cells(ВсегоСтрок, ВсегоКолонок));
	МассивДанныхКолонок = Область.Value.Выгрузить();
	
	ЗаполнитьТабличныйДокументИзМассива(МассивДанныхКолонок, ?(ПредварительныйПросмотрТабличногоДокументаПослеОткрытия, ВсегоСтрок, ВсегоСтрок - ПерваяСтрокаДанныхТабличногоДокумента + 1), ВсегоКолонок);
	
	Excel.WorkBooks.Close();
	Excel = 0;
	
	Возврат Истина;
	
КонецФункции // ()

&НаСервере
Процедура ЗаполнитьТабличныйДокументИзМассива(МассивДанныхКолонок, ВсегоСтрок, ВсегоКолонок)
	
	ТЗ = Новый ТаблицаЗначений;
    Для Счетчик = 1 По ВсегоКолонок Цикл
        ТЗ.Колонки.Добавить("Колонка"+Счетчик, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	Для Счетчик = 1 По ВсегоСтрок Цикл НоваяСтрока = ТЗ.Добавить() КонецЦикла;

	Для Счетчик = 0 По ВсегоКолонок-1 Цикл ТЗ.ЗагрузитьКолонку(МассивДанныхКолонок[Счетчик], Счетчик) КонецЦикла;
	
	Если ПредварительныйПросмотрТабличногоДокументаПослеОткрытия Тогда
		Построитель = Новый ПостроительОтчета;
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
		Построитель.ЗаполнитьНастройки();
		Построитель.ВыводитьЗаголовокОтчета = Ложь;
		Построитель.ВыводитьОбщиеИтоги = Ложь;
		Построитель.ВыводитьПодвалОтчета = Ложь;
		Построитель.ВыводитьПодвалТаблицы = Ложь;
		Построитель.ВыводитьШапкуТаблицы = Ложь;
		Построитель.МакетОформления = Неопределено;
		Построитель.ОформитьМакет();
		ТабДокумент = Новый ТабличныйДокумент;
		Построитель.Вывести(ТабДокумент);
		Область = ТабДокумент.ПолучитьОбласть("R1C2:R" + Формат(ТабДокумент.ВысотаТаблицы, "ЧГ=0") + "C" + Формат(ТабДокумент.ШиринаСтраницы, "ЧГ=0"));	
		ТабличныйДокумент.Вывести(Область);
	Иначе
		ПрочитанныйТабличныйДокумент = ПоместитьВоВременноеХранилище(ТЗ, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Функция считывает в табличный документ данные из файла в формате TXT
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
&НаКлиенте
Функция мПрочитатьТабличныйДокументИзТекста(ИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Для ТекущаяСтрока = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ТекущаяКолонка = 0;
		Для каждого Значение Из мРазложитьСтрокуВМассивПодстрок(ТекстовыйДокумент.ПолучитьСтроку(ТекущаяСтрока),Символы.Таб) Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ПредварительныйПросмотрТабличногоДокументаПослеОткрытия Тогда
		ПрочитатьПостроителемТабличныйДокумент()
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция считывает в табличный документ данные из файла в формате dBase III (*.dbf)
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
&НаКлиенте
Функция мПрочитатьТабличныйДокументИзDBF(ИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	
	XBase  = Новый XBase;
	XBase.Кодировка = КодировкаXBase.OEM;
	Попытка
		XBase.ОткрытьФайл(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТекущаяСтрока = 1;
	
	
	ТекущаяКолонка = 0;
	Для каждого Поле Из XBase.поля Цикл
		ТекущаяКолонка = ТекущаяКолонка + 1;
		ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Поле.Имя;
	КонецЦикла;
	
	
	Рез = XBase.Первая();
	Пока Не XBase.ВКонце() Цикл
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		ТекущаяКолонка = 0;
		Для каждого Поле Из XBase.поля Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = XBase.ПолучитьЗначениеПоля(ТекущаяКолонка - 1);
		КонецЦикла;
		
		XBase.Следующая();
	КонецЦикла;
	
	Если НЕ ПредварительныйПросмотрТабличногоДокументаПослеОткрытия Тогда
		ПрочитатьПостроителемТабличныйДокумент()
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ()

&НаСервере
Процедура ПрочитатьТабличныйДокументСредствамиПлатформы(АдресХранилища, РасширениеФайла = "mxl")

	Данные = ПолучитьИзВременногоХранилища(АдресХранилища);	
	ИмяФайлаВременное = ПолучитьИмяВременногоФайла(РасширениеФайла);	
	Данные.Записать(ИмяФайлаВременное);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Прочитать(ИмяФайлаВременное);
	УдалитьФайлы(ИмяФайлаВременное);
	
	Если НЕ ПредварительныйПросмотрТабличногоДокументаПослеОткрытия Тогда
		ПрочитатьПостроителемТабличныйДокумент()
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьТабличныйДокументИзMXLНаСервере()

&НаКлиенте
Процедура мПрочитатьТабличныйДокументИзMXL(ИмяФайла)

	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	АдресФайла = "";
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
	
	ПрочитатьТабличныйДокументСредствамиПлатформы(АдресФайла);

КонецПроцедуры // ()

&НаКлиенте
Функция мПрочитатьТабличныйДокументИзCSV(ИмяФайла)
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(ИмяФайла);
		
	ТекПараметры = Новый Структура;
	ТекПараметры.Вставить("ЗагружаемыйФайл", ЗагружаемыйФайл);
	
	Если ВерсияПлатформы83 Тогда
		Выполнить("
			|Оповещение = Новый ОписаниеОповещения(""ПослеВводаСтроки"", ЭтотОбъект, ТекПараметры); 
    		|ПоказатьВводСтроки(Оповещение, "";"" , ""Введите разделитель файла"", 1, Ложь);");
	Иначе
		Текст = ";";
		Подсказка = "Введите разделитель файла";
		Если ВвестиСтроку(Текст, Подсказка, 0, Ложь) Тогда
			ПослеВводаСтроки(Текст, ТекПараметры);
		КонецЕсли;		
	КонецЕсли;
	
	Если НЕ ПредварительныйПросмотрТабличногоДокументаПослеОткрытия Тогда
		ПрочитатьПостроителемТабличныйДокумент()
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаСтроки(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ЗагружаемыйФайл = Параметры.ЗагружаемыйФайл;	
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТекущаяСтрока = 0;
				
		Разделитель = Результат;
		
		Для НомерСтроки=1 по ЗагружаемыйФайл.КоличествоСтрок() Цикл
			
		Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
		МассивКолонок = мРазложитьСтрокуВМассивПодстрок(Строка,Разделитель);
		
		ТекущаяСтрока = ТекущаяСтрока + 1;

		Для ТекущаяКолонка = 1 по МассивКолонок.Количество() Цикл 
			//заполняем строку значениями
			ТекущееЗначение = МассивКолонок[ТекущаяКолонка-1];
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = ТекущееЗначение;
		КонецЦикла;   		
		
	КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ВИДИМОСТЬЮ ЭЛЕМЕНТОВ И ОТОБРАЖЕНИЯ ДАННЫХ

&НаКлиенте
// Процедура управляет видимостью элементов управления
//
Процедура УправлениеВидимостью()
	
	Если Не Элементы.ГруппаПанельРежима.ТекущаяСтраница = Элементы.ГруппаПанельРежима.ПодчиненныеЭлементы[РежимЗагрузки] Тогда
		Элементы.ГруппаПанельРежима.ТекущаяСтраница = Элементы.ГруппаПанельРежима.ПодчиненныеЭлементы[РежимЗагрузки];
	КонецЕсли;
		
	УстановитьВидимостьКомандНаПанелях();
	
	Элементы.ГруппаОткрытиеТабличногоДокумента.Видимость = НЕ ПредварительныйПросмотрТабличногоДокументаПослеОткрытия;
	Элементы.ГруппаЗагрузка.Видимость = ПредварительныйПросмотрТабличногоДокументаПослеОткрытия;
	
КонецПроцедуры // УправлениеВидимостью()

&НаСервере
// Процедура управляет видимостью элементов управления на каждой из программно созданных панелях настроек
//
Процедура УстановитьВидимостьКомандНаПанелях()
	
	ДоступностьКнопкиСохранитьЗначения    = ЕстьВыбранныеМетаданные();

	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Элементы[КлючИЗначение.Значение + "НомерКолонки"].Видимость = РучнаяНумерацияКолонокТабличногоДокумента;
		
		Если КлючИЗначение.Значение = "ТаблицаЗагружаемыхРеквизитов" Тогда
			Элементы[КлючИЗначение.Значение + "ПеренумероватьКолонки"].Доступность = РучнаяНумерацияКолонокТабличногоДокумента;		
		КонецЕсли;
		
		Элементы[КлючИЗначение.Значение + "СохранитьНастройки"].Доступность = ДоступностьКнопкиСохранитьЗначения;
		Элементы[КлючИЗначение.Значение + "СохранитьЗначенияВФайл"].Доступность = ДоступностьКнопкиСохранитьЗначения;
		
		Элементы[КлючИЗначение.Значение + "ВосстановитьНастройки"].Доступность = (СписокСохраненныхНастроек.Количество() <> 0);		
		
		Если Не КлючИЗначение.ДопНастройки И НЕ КлючИЗначение.ЗагружаетсяДоОбъекта Тогда
			Элементы[КлючИЗначение.Значение + "ПолеПоиска"].Видимость = (РежимЗагрузки = 0) ИЛИ (РежимЗагрузки = 2) ИЛИ (РежимЗагрузки = 5);
		ИначеЕсли КлючИЗначение.ЗагружаетсяДоОбъекта Тогда
			Элементы[КлючИЗначение.Значение + "ПолеПоиска"].Видимость = Истина;	
		Иначе
			Элементы[КлючИЗначение.Значение + "ПолеПоиска"].Видимость = (РежимЗагрузки = 0);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
// Процедура выполняет установку реквизитов, связанных с источником данных
//
Процедура УстановитьИсточник()
	
	Источник        = Неопределено;
	ОбъектИсточника = Неопределено;
	ПрошлыйМетаданныеСсылкиИсточника = Неопределено;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	ОчиститьТаблицуПодготовленныхДанных();
	ПродолжитьНастройкуНаСервере();
	
// Qwinter ***********************************************************************************************	
	Если ((РежимЗагрузки = 1) ИЛИ (РежимЗагрузки = 5)) И Не СсылкаИсточника = Неопределено Тогда
		ПрошлыйМетаданныеСсылкиИсточника = СсылкаИсточника.Метаданные();
	ИначеЕсли (РежимЗагрузки = 3 ИЛИ РежимЗагрузки = 4) И Не СсылкаДокумента = Неопределено Тогда
	    ПрошлыйМетаданныеСсылкиИсточника = СсылкаДокумента.Метаданные();
		ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента();
	КонецЕсли;
// Qwinter ***********************************************************************************************

	Если МетаданныеИсточника = Неопределено Тогда
		ЭтаФорма["ТаблицаЗагружаемыхРеквизитов"].Очистить();
	Иначе
		Врем = мВосстановитьЗначение(МетаданныеИсточника.ПолноеИмя(), ИдентификаторОбработки);
		ЗаполнитьНастройкиКолонок();
	КонецЕсли;
		
	ОбновитьДанныеТабличногоДокументаСервер();
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
		
КонецПроцедуры

&НаСервере
// Процедура выполняет инициализацию служебных переменных и констант модуля
//
Процедура Инициализация()	
	
	ДополнительныеСвойства = Новый Структура;
	
	ДополнительныеСвойства.Вставить("ПримитивныеТипы", Новый Структура ("Число, Строка, Дата, Булево",
	Тип("Число"), Тип("Строка"), Тип("Дата"), Тип("Булево")));
	
	Если ПерваяСтрокаДанныхТабличногоДокумента < 2 Тогда
		ПерваяСтрокаДанныхТабличногоДокумента = 2;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Колонки", Новый Структура);

КонецПроцедуры // ()

&НаСервере
// Функция выполняет загрузку данных и возврат результат когда обработка подключена как обработка заполнения объекта
//
Функция ВыполнитьКомандуНапрямую(ИдентификаторКоманды, ПараметрыКоманды, Результат = Неопределено)
	Выполнить("Результат = ДополнительныеОтчетыИОбработки.ВыполнитьКомандуИзФормыВнешнегоОбъекта(ИдентификаторКоманды, ПараметрыКоманды, ЭтаФорма)"); 
	Возврат Результат;
КонецФункции

&НаСервере
// Процедура восстанавливает видимость таблиц настроек
//
Процедура ПродолжитьНастройкуНаСервере()
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Элементы[КлючИЗначение.Ключ].Видимость = Истина;	
	КонецЦикла;
	Элементы.ПродолжитьНастройку.Видимость = Ложь;
	Элементы.Загрузить.Видимость = Ложь;
	Элементы.КонтрольЗаполнения.КнопкаПоУмолчанию = Истина;
	
	ОчиститьТаблицуПодготовленныхДанных();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	СтруктураТекстВопроса = ПолучитьТекстВопросаИсточника();
	КоличествоЭлементов = ТаблицаПодготовленныхДанных.Количество();
	
	Если НЕ ПустаяСтрока(СтруктураТекстВопроса.Ошибка) Тогда
		
		ТекстПредупреждения = СтруктураТекстВопроса.Ошибка;
		
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ПоказатьПредупреждение(, ТекстПредупреждения);
		    |");
		Иначе
				Предупреждение(ТекстПредупреждения);
		КонецЕсли;
			
	Иначе
		
		нПараметры = Новый Структура;	
		ТекстВопроса = "Загрузить "+КоличествоЭлементов  + СтруктураТекстВопроса.ТекстВопроса;
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросНачатьЗагрузкуДанных"", ЭтотОбъект, нПараметры);
			|	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			|");
		Иначе
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			ВопросНачатьЗагрузкуДанных(ОтветНаВопрос, нПараметры);
		КонецЕсли;
			
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросНачатьЗагрузкуДанных(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ОчиститьСообщения();
		Элементы.Ошибки.Видимость = Ложь;
		СписокЛогЗагрузки.Очистить();
		
		КоличествоЭлементов = ТаблицаПодготовленныхДанных.Количество();	
		ДобавитьЗаписьВЛогЗагрузки("Выполняется загрузка данных");
		ДобавитьЗаписьВЛогЗагрузки("Всего: " + КоличествоЭлементов);
		ДобавитьЗаписьВЛогЗагрузки("---------------------------------------------");

		ВыполнитьЗагрузкуДанных();
		
		Если ВыполняетсяЗаполнениеТЧОбъекта Тогда
			ПараметрыКоманды = Новый Структура("ДополнительнаяОбработкаСсылка, ОбъектыНазначения, СопровождающийТекст");
			ПараметрыКоманды.ДополнительнаяОбработкаСсылка = ОбъектСсылка;
			ПараметрыКоманды.СопровождающийТекст = "";
			
			Состояние(ПараметрыКоманды.СопровождающийТекст);
			
			РезультатВыполнения = ВыполнитьКомандуНапрямую(ИдентификаторКоманды, ПараметрыКоманды);
			ЗагрузитьРезультат(РезультатВыполнения);	
		КонецЕсли;
		
		Для каждого Строка Из ТаблицыНастроек Цикл Если ЗначениеЗаполнено(Строка.ТипСтрокой) Тогда ОповеститьОбИзменении(Тип(Строка.ТипСтрокой)) КонецЕсли КонецЦикла;
		
		Элементы.ЛогЗагрузки.Видимость = Истина; 
		Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница = Элементы.ЛогЗагрузки
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультат(РезультатВыполнения)
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") И ЭтоФормаОбъекта Тогда
		ВладелецФормы.Прочитать();
	КонецЕсли;
	
	Выполнить("ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ВладелецФормы, РезультатВыполнения)");

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрыть(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
	Если ВерсияПлатформы836 Тогда	
		ДиалогВыбораФайла.Фильтр    = "Табличный документ|*.mxl; *.xls; *.xlsx; *.ods; *.txt; *.dbf; *.csv";
	Иначе
		ДиалогВыбораФайла.Фильтр    = "Лист Excel (*.xls)|*.xls|Табличный документ (*.mxl)|*.mxl|Текстовый документ (*.txt)|*.txt|dBase III (*.dbf)|*.dbf|Файл с разделителями (*.csv)|*.csv|";	
	КонецЕсли;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Элементы.НадписьТабличныйДокумент.Заголовок = ДиалогВыбораФайла.ПолноеИмяФайла;
		
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		
		Если ВерсияПлатформы836 И (нРег(ФайлНаДиске.Расширение) = ".xls" ИЛИ нРег(ФайлНаДиске.Расширение) = ".xlsx" ИЛИ нРег(ФайлНаДиске.Расширение) = ".ods") Тогда
			
			ДанныеФайла = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
			АдресФайла = "";
			АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
			ПрочитатьТабличныйДокументСредствамиПлатформы(АдресФайла, ФайлНаДиске.Расширение);
			
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			мПрочитатьТабличныйДокументИзMXL(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			мПрочитатьТабличныйДокументИзExcel(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			мПрочитатьТабличныйДокументИзТекста(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".dbf" Тогда
			мПрочитатьТабличныйДокументИзDBF(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".csv" Тогда
			мПрочитатьТабличныйДокументИзCSV(ДиалогВыбораФайла.ПолноеИмяФайла);	
		КонецЕсли;
	
		УправлениеВидимостью();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Заголовок = "Сохранить табличный документ в файл";
	ДиалогВыбораФайла.Фильтр    = "Табличный документ (*.mxl)|*.mxl|Лист Excel (*.xls)|*.xls|Текстовый документ (*.txt)|*.txt|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.MXL);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.XLS);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.TXT);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	ОбновитьДанныеТабличногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТаблицуДанных(Команда)
	
	Если НЕ ПредварительныйПросмотрТабличногоДокументаПослеОткрытия И НЕ ЗначениеЗаполнено(ПрочитанныйТабличныйДокумент) Тогда
		ПоказатьПредупреждение(, "Не выбран табличный документ для загрузки!");
		Возврат
	КонецЕсли;
	
	СписокОшибок.Очистить();
	ПолучитьТаблицуДанныхНаСервере();
	
	Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница = Элементы.ТаблицаДанных;
	Элементы.ГруппаПанельРежима.Видимость = Ложь;
	Элементы.ТаблицаПодготовленныхДанныхНастройкиНастройкиОтбор.Видимость = Истина;
	Элементы.КоманднаяПанельТаблицыДанных.Видимость = Истина;
	Элементы.ПродолжитьНастройку.Видимость = Истина;
	Элементы.Загрузить.Видимость = Истина;
	Элементы.Загрузить.КнопкаПоУмолчанию = Истина;	
	Элементы.РежимЗагрузки.ТолькоПросмотр = Истина;
	Элементы.СсылкаИсточника.ТолькоПросмотр = Истина;
	Элементы.СсылкаДокумента.ТолькоПросмотр = Истина;
	Элементы.ИмяВидаРегистра.ТолькоПросмотр = Истина;
	Элементы.ТабличнаяЧастьИсточника.ТолькоПросмотр = Истина;
	Элементы.ТипОбъекта.ТолькоПросмотр = Истина;
	Элементы.РегистрДокумента.ТолькоПросмотр = Истина;
	Элементы.ПЗ_СсылкаИсточника.ТолькоПросмотр = Истина;
	Элементы.ЛогЗагрузки.Видимость = Ложь;
	Если СписокОшибок.Количество() > 0 Тогда Элементы.Ошибки.Видимость = Истина КонецЕсли;
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл Элементы[КлючИЗначение.Ключ].Видимость = Ложь	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСледующееПримечание(Команда)
	
	//ТабличныйДокумент = Элементы.ТабДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево + 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка <= ТабличныйДокумент.ВысотаТаблицы Цикл
		
		Пока Не Нашли и Колонка <=  ТабличныйДокумент.ШиринаТаблицы Цикл
			
			Область = ТабличныйДокумент.Область("R" + Формат(Строка, "ЧГ=") + "C" + Формат(Колонка, "ЧГ="));
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка + 1;
		КонецЦикла;
		Строка = Строка + 1;
		Колонка = 1;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		ТекстПредупреждения = "Достигнут конец документа";
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ПоказатьПредупреждение(, ТекстПредупреждения);
		    |");
		Иначе
				Предупреждение(ТекстПредупреждения);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПредыдущееПримечание(Команда)
	
	//ТабличныйДокумент = Элементы.ТабДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево - 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка > 0 Цикл
		
		Пока Не Нашли и Колонка > 0 Цикл
			
			Область = ТабличныйДокумент.Область("R" + Формат(Строка, "ЧГ=") + "C" + Формат(Колонка, "ЧГ="));
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка - 1;
		КонецЦикла;
		Строка = Строка - 1;
		Колонка = ТабличныйДокумент.ШиринаТаблицы;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
        ТекстПредупреждения = "Достигнуто начало документа";
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ПоказатьПредупреждение(, ТекстПредупреждения);
		    |");
		Иначе
				Предупреждение(ТекстПредупреждения);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВосстановитьЗначенияИзФайла(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ЗаголовокДиалога = "Открыть статус выполнения из файла";
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "Настройка универсальной загрузки (*.qxlz)|*.qxlz";
	ДиалогОткрытияФайла.Заголовок = ЗаголовокДиалога;
	ДиалогОткрытияФайла.Фильтр = Фильтр;	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Файл = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
		файлТекстовый = Новый ДвоичныеДанные(Файл);	
		АдресХранилища = ПоместитьВоВременноеХранилище(файлТекстовый, Новый УникальныйИдентификатор);
		
		ВосстановитьТаблицу(АдресХранилища);
	КонецЕсли;
	
	ОбновитьДанныеТабличногоДокумента(Истина);
	УправлениеВидимостью();

КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьЗначенияВФайл(Команда)
	
	Таблицы = Новый СписокЗначений;
	
	Таблицы.Добавить("ТекущаяВерсия");
	Таблицы.Добавить("ЗамещатьСуществующиеЗаписи");
	Таблицы.Добавить("ИмяВидаРегистра");
	Таблицы.Добавить("НеСоздаватьНовыхЭлементов");
	Таблицы.Добавить("ПерваяСтрокаДанныхТабличногоДокумента");
	Таблицы.Добавить("ПередЗаписьюОбъекта");
	Таблицы.Добавить("ПослеДобавленияСтроки");
	Таблицы.Добавить("ПриЗаписиОбъекта");
	Таблицы.Добавить("ПослеЗаписиОбъекта");
	Таблицы.Добавить("РежимЗагрузки");
	Таблицы.Добавить("РучнаяНумерацияКолонокТабличногоДокумента");
	Таблицы.Добавить("СсылкаДокумента");
	Таблицы.Добавить("СсылкаИсточника");
	Таблицы.Добавить("ТабличнаяЧастьИсточника");
	Таблицы.Добавить("ТипОбъектаСправочника");
	Таблицы.Добавить("РегистрДокумента");
	Таблицы.Добавить("ТаблицыНастроек");
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Таблицы.Добавить(КлючИЗначение.Значение);	
	КонецЦикла;
	
	СохранитьТаблицуВФайл(Таблицы);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ФормаНастроек = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаСохраненияНастройки", ,ЭтаФорма);
	
	МассивСтрокНастроек = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("ИмяПредопределенногоМакета", ""));
	Если МассивСтрокНастроек.Количество() = 0 Тогда
		ТекущиеДанные = ФормаНастроек.СписокНастроек.Добавить();
		ТекущиеДанные.Представление = "Основная";	
	КонецЕсли;
	Для каждого строка Из СписокСохраненныхНастроек Цикл ЗаполнитьЗначенияСвойств(ФормаНастроек.СписокНастроек.Добавить(), Строка) КонецЦикла;	
	ФормаНастроек.ИдентификаторОбработки = ИдентификаторОбработки;
	
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)
	
	ФормаНастроек = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаВыбораНастройки", ,ЭтаФорма);
	
	Для каждого строка Из СписокСохраненныхНастроек Цикл
		ЗаполнитьЗначенияСвойств(ФормаНастроек.СписокНастроек.Добавить(), Строка);		
	КонецЦикла;
	
	ФормаНастроек.ИдентификаторОбработки = ИдентификаторОбработки;
	
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеречитать(Команда)
	ЗаполнитьНастройкиКолонок();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	
	СтрокаНастроек = ТаблицыНастроек.НайтиСтроки(Новый Структура("Ключ", Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница.Имя));	
	
	Если СтрокаНастроек.Количество() > 0 Тогда
		Для каждого ЗагружаемыйРеквизит Из ЭтаФорма[СтрокаНастроек[0].Значение] Цикл ЗагружаемыйРеквизит.Пометка = Истина КонецЦикла
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	
	СтрокаНастроек = ТаблицыНастроек.НайтиСтроки(Новый Структура("Ключ", Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница.Имя));	
	Если СтрокаНастроек.Количество() > 0 Тогда
		Для каждого ЗагружаемыйРеквизит Из ЭтаФорма[СтрокаНастроек[0].Значение] Цикл Если НЕ ЗагружаемыйРеквизит.НеУбиратьПометку Тогда ЗагружаемыйРеквизит.Пометка = Ложь КонецЕсли КонецЦикла
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРучнаяНумерацияКолонокТабличногоДокумента(Команда)
	
	//Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
	// Кнопка всегда на первой странице, и настройке с нулевым индексом
	КлючИЗначение = ТаблицыНастроек[0];
	Элементы[КлючИЗначение.Значение + "РучнаяНумерацияКолонокТабличногоДокумента"].Пометка = НЕ Элементы[КлючИЗначение.Значение + "РучнаяНумерацияКолонокТабличногоДокумента"].Пометка;
	РучнаяНумерацияКолонокТабличногоДокумента = Элементы[КлючИЗначение.Значение + "РучнаяНумерацияКолонокТабличногоДокумента"].Пометка;
	//КонецЦикла;
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренумероватьКолонки(Команда)
	
	НомерКолонки = 1;
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Для каждого Реквизит Из ЭтаФорма[КлючИЗначение.Значение] Цикл
			
			Если Реквизит.Пометка И Реквизит.РежимЗагрузки <> "Устанавливать" Тогда
				Если Не Реквизит.НомерКолонки = НомерКолонки Тогда
					Реквизит.НомерКолонки = НомерКолонки
				КонецЕсли;
				НомерКолонки = НомерКолонки + 1
			Иначе
				Реквизит.НомерКолонки = 0
			КонецЕсли;
			
			Если Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Искать" Тогда
				Реквизит.РежимЗагрузки = "Устанавливать"
			ИначеЕсли Не Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Устанавливать" Тогда
				Реквизит.РежимЗагрузки = "Искать"
			КонецЕсли
			
		КонецЦикла
	КонецЦикла
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаСобытия(Команда)
	
	ФормаРедактированиеСобытий = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаРедактированияСобытий", ,ЭтаФорма);
	
	ФормаРедактированиеСобытий.РежимЗагрузки = РежимЗагрузки;
	
	ФормаРедактированиеСобытий.ПередЗаписьюОбъекта		= ПередЗаписьюОбъекта;
	ФормаРедактированиеСобытий.ПриЗаписиОбъекта			= ПриЗаписиОбъекта;
	ФормаРедактированиеСобытий.ПослеДобавленияСтроки	= ПослеДобавленияСтроки;
	ФормаРедактированиеСобытий.ПослеЗаписиОбъекта		= ПослеЗаписиОбъекта;
	
	ФормаРедактированиеСобытий.Открыть();
		
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ФормаНастроек = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаНастроек", ,ЭтаФорма);
	Для каждого КлючИЗначение Из ФормаНастроек.Параметры.СтруктураВозвращаемыхДанных Цикл
		ФормаНастроек[КлючИЗначение.Ключ] = ЭтаФорма[КлючИЗначение.Ключ]	
	КонецЦикла;
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьОбновления(Команда)
	Элементы.ПроверятьОбновления.Пометка = НЕ Элементы.ПроверятьОбновления.Пометка;
	ПроверятьОбновления = Элементы.ПроверятьОбновления.Пометка;	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьНастройку(Команда)
	
	ТаблицаПодготовленныхДанных.Очистить();
	
	Элементы.ГруппаПанельРежима.Видимость = Истина;
	Элементы.РежимЗагрузки.ТолькоПросмотр = Ложь;
	Элементы.СсылкаИсточника.ТолькоПросмотр = Ложь;
	Элементы.СсылкаДокумента.ТолькоПросмотр = Ложь;
	Элементы.ИмяВидаРегистра.ТолькоПросмотр = Ложь;
	Элементы.ТабличнаяЧастьИсточника.ТолькоПросмотр = Ложь;
	Элементы.ТипОбъекта.ТолькоПросмотр = Ложь;
	Элементы.РегистрДокумента.ТолькоПросмотр = Ложь;
	Элементы.ПЗ_СсылкаИсточника.ТолькоПросмотр = Ложь;
	Элементы.Ошибки.Видимость = Ложь;
    Элементы.ЛогЗагрузки.Видимость = Ложь;
	Элементы.ТаблицаПодготовленныхДанныхНастройкиНастройкиОтбор.Видимость = Ложь;
	Элементы.КоманднаяПанельТаблицыДанных.Видимость = Ложь;
	
	ПродолжитьНастройкуНаСервере();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНастройку(Команда)
	
	Форма = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаДобавленияДополнительнойНастройки", ,ЭтаФорма);
	Форма.Элементы.ВидДобавляемойНастройки.СписокВыбора.Очистить();
	
	// Добавляем список выбора справочники
	Если Элементы.ТипОбъекта.СписокВыбора.Количество() Тогда
		Форма.Элементы.ВидДобавляемойНастройки.СписокВыбора.Добавить(0, "Справочник");
		Для каждого ЭлементСпискаВыбора Из Элементы.ТипОбъекта.СписокВыбора Цикл
			Форма.Элементы.Справочник.СписокВыбора.Добавить(ЭлементСпискаВыбора.Значение, ЭлементСпискаВыбора.Представление)	
		КонецЦикла;
	КонецЕсли;

	// Добавляем табличные части
	Если РежимЗагрузки = 1 ИЛИ РежимЗагрузки = 5 И СписокДобавляемыхСтраниц.Количество() Тогда
		Форма.Элементы.ВидДобавляемойНастройки.СписокВыбора.Добавить(1, "Табличная часть");
		Для каждого ЭлементСпискаВыбора Из СписокДобавляемыхСтраниц Цикл
			Форма.Элементы.ТабличнаяЧасть.СписокВыбора.Добавить(ЭлементСпискаВыбора.Значение, ЭлементСпискаВыбора.Представление)	
		КонецЦикла;	
	КонецЕсли;
	
	// Добавляем регистры
	Если РежимЗагрузки = 3 ИЛИ РежимЗагрузки = 5 И СписокДобавляемыхСтраницРегистры.Количество() Тогда
		Форма.Элементы.ВидДобавляемойНастройки.СписокВыбора.Добавить(2, "Регистр");
		Для каждого ЭлементСпискаВыбора Из СписокДобавляемыхСтраницРегистры Цикл Форма.Элементы.Регистр.СписокВыбора.Добавить(ЭлементСпискаВыбора.Значение, ЭлементСпискаВыбора.Представление) КонецЦикла;	
	КонецЕсли;
	
	// Открываем форму
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьОбновления(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТаблицуНастройки(Команда)
	
	МассивСтрок = ТаблицыНастроек.НайтиСтроки(Новый Структура("Ключ", Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница.Имя));
	
	Если МассивСтрок.Количество() Тогда
		УдалитьРеквизитыИЭлементыНастроекЗагрузкиДанных(МассивСтрок[0].Ключ, МассивСтрок[0].Значение);
		ТаблицыНастроек.Удалить(ТаблицыНастроек.Индекс(ТаблицыНастроек.НайтиПоИдентификатору(МассивСтрок[0].ПолучитьИдентификатор())))
	КонецЕсли;
	
	Если ТаблицыНастроек.Количество() = 1 Тогда
		КоличествоСозданныхПодчиненныхНастроек = 0
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодготовленныхДанныхОтобрать(Команда)
	ТаблицаПодготовленныхДанныхОтобратьНаСервере();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЁННЫЕ ОБРАБОТЧИКИ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ИдентификаторОбработки = ОбъектОбработка.Метаданные().ПолноеИмя();	
	ИмяФайлаОбработки = ОбъектОбработка.ИспользуемоеИмяФайла;
	
	РежимЗагрузки           = мВосстановитьЗначение("РежимЗагрузки", ИдентификаторОбработки);		
	ИмяВидаРегистра         = мВосстановитьЗначение("ИмяВидаРегистра", ИдентификаторОбработки);
	ТипОбъектаСправочника   = мВосстановитьЗначение("ТипОбъектаСправочника", ИдентификаторОбработки);
	СсылкаИсточника         = мВосстановитьЗначение("СсылкаИсточника", ИдентификаторОбработки);
	РегистрДокумента    	= мВосстановитьЗначение("РегистрДокумента", ИдентификаторОбработки);
	СсылкаДокумента   		= мВосстановитьЗначение("СсылкаДокумента", ИдентификаторОбработки);
	ТабличнаяЧастьИсточника = мВосстановитьЗначение("ТабличнаяЧастьИсточника", ИдентификаторОбработки);
	
	ПредварительныйПросмотрТабличногоДокументаПослеОткрытияВоссстановленный  = мВосстановитьЗначение("ПредварительныйПросмотрТабличногоДокументаПослеОткрытия", ИдентификаторОбработки);
	Если ПредварительныйПросмотрТабличногоДокументаПослеОткрытияВоссстановленный = Неопределено Тогда
		ПредварительныйПросмотрТабличногоДокументаПослеОткрытия = Ложь;
	Иначе
		ПредварительныйПросмотрТабличногоДокументаПослеОткрытия = ПредварительныйПросмотрТабличногоДокументаПослеОткрытияВоссстановленный;
	КонецЕсли;
	
	ПроводитьДокументыПриПоточнойЗагрузкеВоссстановленный  = мВосстановитьЗначение("ПроводитьДокументыПриПоточнойЗагрузке", ИдентификаторОбработки);
	Если ПроводитьДокументыПриПоточнойЗагрузкеВоссстановленный = Неопределено Тогда
		ПроводитьДокументыПриПоточнойЗагрузке = Ложь;
	Иначе
		ПроводитьДокументыПриПоточнойЗагрузке = ПроводитьДокументыПриПоточнойЗагрузкеВоссстановленный;
	КонецЕсли;
	
	ЦветФонаНайденныеОбъектыВоссстановленный	= мВосстановитьЗначение("ЦветФонаНайденныеОбъекты", ИдентификаторОбработки);
	Если ЦветФонаНайденныеОбъектыВоссстановленный = Неопределено Тогда
		ЦветФонаНайденныеОбъекты = WebЦвета.СветлоЖелтыйЗолотистый;
	Иначе
		ЦветФонаНайденныеОбъекты = ЦветФонаНайденныеОбъектыВоссстановленный;	
	КонецЕсли;
	ЦветФонаНеНайденныеОбъектыВоссстановленный  = мВосстановитьЗначение("ЦветФонаНеНайденныеОбъекты", ИдентификаторОбработки);
	Если ЦветФонаНеНайденныеОбъектыВоссстановленный = Неопределено Тогда
		ЦветФонаНеНайденныеОбъекты = WebЦвета.АнтикБелый;
	Иначе
		ЦветФонаНеНайденныеОбъекты = ЦветФонаНеНайденныеОбъектыВоссстановленный;
	КонецЕсли;

	ПроверятьОбновленияВосстановленный = мВосстановитьЗначение("ВыполнятьПроверкуОбновленияПриЗагрузке", ИдентификаторОбработки);
	Если ПроверятьОбновленияВосстановленный = Неопределено Тогда
		ПроверятьОбновления = Истина
	Иначе
		ПроверятьОбновления = ПроверятьОбновленияВосстановленный
	КонецЕсли;
	
	ОчиститьТаблицыНастроек();
	
	СписокДокументов = Элементы.ПЗ_СсылкаИсточника.СписокВыбора;	
	Для каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		СписокДокументов.Добавить(Документы[ОбъектМетаданных.Имя].ПустаяСсылка(), ОбъектМетаданных.Представление());
	КонецЦикла;
	
	Для каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		СписокДокументов.Добавить(Справочники[ОбъектМетаданных.Имя].ПустаяСсылка(), ОбъектМетаданных.Представление());
	КонецЦикла;
	СписокДокументов.СортироватьПоПредставлению();
	
	Для каждого МДСправочник Из Метаданные.Справочники Цикл
		Элементы.ТипОбъекта.СписокВыбора.Добавить(МДСправочник.Имя, МДСправочник.Синоним);
	КонецЦикла;
	                
	МДНезависимый = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый;
	Для каждого МДРегистрСведений Из Метаданные.РегистрыСведений Цикл
		Если МДРегистрСведений.РежимЗаписи = МДНезависимый Тогда
			Элементы.ИмяВидаРегистра.СписокВыбора.Добавить(МДРегистрСведений.Имя, МДРегистрСведений.Синоним);
		КонецЕсли; 
	КонецЦикла;
	
	Типы = Новый Массив;
	ВидыТипов = Новый Структура("Справочники,Документы");
	Для каждого КлючИЗначение Из ВидыТипов Цикл
		Для каждого ОбъектМетаданных Из Метаданные[КлючИЗначение.Ключ] Цикл
			Если ОбъектМетаданных.ТабличныеЧасти.Количество() Тогда
				Типы.Добавить(Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(),".","Ссылка.")));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Элементы.СсылкаИсточника.ОграничениеТипа = Новый ОписаниеТипов(Типы);
	
	Если Параметры.ОбъектыНазначения <> Неопределено Тогда
		
		СсылкаИсточника = Параметры.ОбъектыНазначения[0];
		ИдентификаторКоманды = Параметры.ИдентификаторКоманды;
		РежимЗагрузки = 1;
		
		ИмяФормыВладельца = Параметры.ИмяФормы;
		ИнформацияОВладельце = Неопределено;
		Выполнить("ИнформацияОВладельце = ДополнительныеОтчетыИОбработкиПовтИсп.ПараметрыФормыНазначаемогоОбъекта(ИмяФормыВладельца)");
		
		СсылкаРодителя  = ИнформацияОВладельце.СсылкаРодителя;
		ЭтоФормаОбъекта = ИнформацияОВладельце.ЭтоФормаОбъекта;
	    ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ВыполняетсяЗаполнениеТЧОбъекта = Истина;
		Элементы.Переместить(Элементы.КоманднаяПанельИфостарт, Элементы.ГруппаЗагрузкаВТабличнуюЧасть);
		Элементы.КоманднаяПанельИфостарт.РастягиватьПоГоризонтали = Ложь;
	
	КонецЕсли;

	УстановитьСписокТабличныхЧастей();
		
	Инициализация();
	
	УстановитьИсточник();
	
	КоличествоСозданныхПодчиненныхНастроек = 0;
	
	Если РежимЗагрузки = 0 Тогда	
		ПолучитьПодчиненныеСправочники();			
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если Лев(СисИнфо.ВерсияПриложения, 5) = "8.3.6" И Строка(Метаданные.РежимСовместимости) = "НеИспользовать" Тогда
		Выполнить("Элементы.СсылкаИсточника.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;");
		Выполнить("Элементы.СсылкаДокумента.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;");
		ВерсияПлатформы83 = Истина;
		ВерсияПлатформы836 = Истина;
	ИначеЕсли Лев(СисИнфо.ВерсияПриложения, 3) = "8.3" И (Строка(Метаданные.РежимСовместимости) = "НеИспользовать" ИЛИ Лев(Метаданные.РежимСовместимости, 9) = "Версия8_3") Тогда
		Выполнить("Элементы.СсылкаИсточника.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;");
		Выполнить("Элементы.СсылкаДокумента.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;");
		ВерсияПлатформы83 = Истина;
	КонецЕсли;

	Элементы.ТаблицаПодготовленныхДанныхНастройкиНастройкиОтбор.Видимость = Ложь;
	Элементы.КоманднаяПанельТаблицыДанных.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущаяВерсия = "3.0.1.3";
	Если ПроверятьОбновления Тогда
		НачатьПроверкуВерсий(Истина);
	КонецЕсли;
	
	Элементы.ПроверятьОбновления.Пометка = ПроверятьОбновления;
	
	Если ВыполняетсяЗаполнениеТЧОбъекта Тогда	
		Элементы.РежимЗагрузки.Видимость = Ложь;
		Элементы.СсылкаИсточника.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ДобавитьПредопределенныеМакетыНастроек();
	
	ВосстановитьНастройкиПриОткрытии();
	
	ОбновитьДанныеТабличногоДокументаСервер();
	УправлениеВидимостью();

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиПриОткрытии()
	
	Строка = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Пометка", Истина));	

	Если ЗначениеЗаполнено(Строка) Тогда
		СостояниеВыполнения = мВосстановитьЗначение("Настройки:"+ Строка[0].Представление, ИдентификаторОбработки);
		ВосстановитьНастройкиИзСостоянияВыполнения(СостояниеВыполнения);
		Элементы.ДекорацияВосстановленнаяНастройка.Заголовок = "Открыта настройка: " + Строка[0].Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УдаленаНастройка" Тогда
		Строки = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Представление", Параметр));
		Для каждого строка Из Строки Цикл
			СписокСохраненныхНастроек.Удалить(Строка);
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "УстановленаНастройкаПоУмолчанию" Тогда
		Строки = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Представление", Параметр.Представление));
		Если Строки.Количество() > 0 Тогда
			ТекущиеДанные = Строки[0];
			ТекущиеДанные.Пометка = Параметр.Пометка;	
			Если ТекущиеДанные.Пометка Тогда
				Для каждого ЭлементСписка Из СписокСохраненныхНастроек Цикл
					Если ЭлементСписка.Пометка и Не ЭлементСписка = ТекущиеДанные Тогда
						ЭлементСписка.Пометка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()

	мСохранитьЗначение("РежимЗагрузки",	РежимЗагрузки, ИдентификаторОбработки);
	мСохранитьЗначение("СсылкаИсточника", СсылкаИсточника, ИдентификаторОбработки);
	мСохранитьЗначение("ТабличнаяЧастьИсточника", ТабличнаяЧастьИсточника, ИдентификаторОбработки);
	мСохранитьЗначение("ИмяВидаРегистра", ИмяВидаРегистра, ИдентификаторОбработки);
	мСохранитьЗначение("ТипОбъектаСправочника", ТипОбъектаСправочника, ИдентификаторОбработки);	
	мСохранитьЗначение("РегистрДокумента", РегистрДокумента, ИдентификаторОбработки);
	мСохранитьЗначение("СсылкаДокумента", СсылкаДокумента, ИдентификаторОбработки);
	мСохранитьЗначение("ВыполнятьПроверкуОбновленияПриЗагрузке", ПроверятьОбновления, ИдентификаторОбработки);	
	мСохранитьЗначение("ЦветФонаНайденныеОбъекты", ЦветФонаНайденныеОбъекты, ИдентификаторОбработки);
	мСохранитьЗначение("ЦветФонаНеНайденныеОбъекты", ЦветФонаНеНайденныеОбъекты, ИдентификаторОбработки);	
	мСохранитьЗначение("ПроводитьДокументыПриПоточнойЗагрузке", ПроводитьДокументыПриПоточнойЗагрузке, ИдентификаторОбработки);
	мСохранитьЗначение("ПредварительныйПросмотрТабличногоДокументаПослеОткрытия", ПредварительныйПросмотрТабличногоДокументаПослеОткрытия, ИдентификаторОбработки);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	
		Если ВыбранноеЗначение.Источник = "ФормаРедактированияСобытий" И ВыбранноеЗначение.Результат = Истина Тогда
			
			ПередЗаписьюОбъекта		= ВыбранноеЗначение.ПередЗаписьюОбъекта;
			ПриЗаписиОбъекта		= ВыбранноеЗначение.ПриЗаписиОбъекта;
			ПослеДобавленияСтроки	= ВыбранноеЗначение.ПослеДобавленияСтроки;
			ПослеЗаписиОбъекта		= ВыбранноеЗначение.ПослеЗаписиОбъекта;
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаРедактированияВыражения" И ВыбранноеЗначение.Результат = Истина Тогда
			
			СтруктураДанныхСтроки = мПолучитьТекущиеДанныеСтраницыНастройки();
			ТекДанные = СтруктураДанныхСтроки.ТекущиеДанные;
			
			ТекДанные.Выражение = ВыбранноеЗначение.Выражение;
			ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаРедактированияСвязи" И ВыбранноеЗначение.Результат = Истина Тогда
			
			СтруктураДанныхСтроки = мПолучитьТекущиеДанныеСтраницыНастройки();
			ТекДанные = СтруктураДанныхСтроки.ТекущиеДанные;
			
			ТекДанные.ИскатьПо = ВыбранноеЗначение.ИскатьПо;
			ТекДанные.СвязьПоВладельцу = ВыбранноеЗначение.СвязьПоВладельцу;
			ТекДанные.СвязьПоТипу = ВыбранноеЗначение.СвязьПоТипу;
			ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
			+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаДобавленияДополнительнойНастройки" Тогда
			
			ДобавляемаяНастройка = ВыбранноеЗначение.ДобавляемаяНастройка;
			НаименованиеСтраницы = ДобавитьСтраницуНастроек(ДобавляемаяНастройка.Настройка, ДобавляемаяНастройка.Представление, НЕ ДобавляемаяНастройка.ЗагружаетсяДоОбъекта, ДобавляемаяНастройка.ЭтоРегистр, ДобавляемаяНастройка.ЗагружаетсяДоОбъекта, ДобавляемаяНастройка.РежимЗагрузки);
			ЗаполнитьНастройкамиСозданнуюСтраницу(НаименованиеСтраницы, ДобавляемаяНастройка.Настройка, ДобавляемаяНастройка.ЭтоРегистр, ДобавляемаяНастройка.ЗагружаетсяДоОбъекта);		
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаНастроек" Тогда
			
			Для каждого КлючИЗначение Из ВыбранноеЗначение.Настройки Цикл
				ЭтаФорма[КлючИЗначение.Ключ] = КлючИЗначение.Значение
			КонецЦикла;
			УправлениеВидимостью();
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаСохраненияНастроек" Тогда
			
			СохранитьНастройкуВбазе(ВыбранноеЗначение.СписокНастроек.Пометка, ВыбранноеЗначение.СписокНастроек.Представление);	
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаВосстановленияНастроек" Тогда
			
			ВосстановитьНастройкиВБазе(ВыбранноеЗначение.СписокНастроек.Представление);
			Элементы.ДекорацияВосстановленнаяНастройка.Заголовок = "Открыта настройка: " + ВыбранноеЗначение.СписокНастроек.Представление;
			ОбновитьДанныеТабличногоДокумента(Истина);
			УправлениеВидимостью();
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаВыбораЗначенияПоУмолчанию" Тогда
			
			СтруктураДанныхСтроки = мПолучитьТекущиеДанныеСтраницыНастройки();
			ТекДанные = СтруктураДанныхСтроки.ТекущиеДанные;
			
			ТекДанные.ЗначениеПоУмолчанию = ВыбранноеЗначение.ЗначениеПоУмолчанию;
			ТекДанные.НастройкаЗагрузки = ВыбранноеЗначение.НастройкаЗагрузки;
			
			ТекДанные.ПредставлениеЗначенияПоУмолчанию = ?(ПустаяСтрока(ТекДанные.НастройкаЗагрузки), "", "По настройке: "+ВыбранноеЗначение.ЗаголовокНастройкиЗагрузки)
				+?(ПустаяСтрока(ТекДанные.ЗначениеПоУмолчанию), "", ?(ПустаяСтрока(ТекДанные.НастройкаЗагрузки), "", ", ") + ТекДанные.ЗначениеПоУмолчанию);
		КонецЕсли;
	                                 
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
	
	ТипОбъектаСправочника	= Неопределено;
	СсылкаИсточника			= Неопределено;
	ИмяВидаРегистра			= Неопределено;
	ТабличнаяЧастьИсточника	= Неопределено;
	СсылкаДокумента 		= Неопределено;
	РегистрДокумента		= Неопределено;
	
	УстановитьСписокТабличныхЧастей();
	УстановитьИсточник();
	ОчиститьСозданныеСтраницы();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	
	ОчиститьСозданныеСтраницы();
	УстановитьИсточник();
	УправлениеВидимостью();	
	ПолучитьПодчиненныеСправочники();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(ТипОбъектаСправочника) Тогда
		Возврат
	КонецЕсли;
	
	Форма = ПолучитьФорму("Справочник."+ТипОбъектаСправочника+".ФормаСписка");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИсточникаПриИзменении(Элемент)
	
	ТабличнаяЧастьИсточника = "";
	УстановитьСписокТабличныхЧастей();
	Если РежимЗагрузки = 5 Тогда
		УстановитьСписокРегистров();	
	КонецЕсли;
	ОчиститьСозданныеСтраницы();		
	УстановитьИсточник();
	УправлениеВидимостью();
			
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьИсточникаПриИзменении(Элемент)
	
	ОчиститьСозданныеСтраницы();		
	УстановитьИсточник();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяВидаРегистраПриИзменении(Элемент)
	УстановитьИсточник();
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ИмяВидаРегистраОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(ИмяВидаРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("РегистрСведений."+ИмяВидаРегистра+".ФормаСписка");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СсылкаДокументаПриИзменении(Элемент)
	
	СсылкаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СсылкаДокументаПриИзмененииНаСервере()
	
	РегистрДокумента = "";	
	Если РежимЗагрузки = 3 Тогда
		Если ПрошлыйМетаданныеСсылкиИсточника = Неопределено или СсылкаДокумента = Неопределено или Не ПрошлыйМетаданныеСсылкиИсточника = СсылкаДокумента.Метаданные() Тогда
			
			УстановитьСписокРегистров();
			УстановитьИсточник();
			ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента();
			
		КонецЕсли;
	Иначе		
		Если ПрошлыйМетаданныеСсылкиИсточника = Неопределено или СсылкаИсточника = Неопределено или Не ПрошлыйМетаданныеСсылкиИсточника = СсылкаИсточника.Метаданные() Тогда
			
			УстановитьСписокТабличныхЧастей();
			УстановитьИсточник();
			
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрТабличногоДокументаПослеОткрытияПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыНастроекРежимЗагрузкиДляВыбораПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицыНастроек.ТекущиеДанные;
	Если ТекущиеДанные.РежимЗагрузкиДляВыбора = "Справочник/Документ" Тогда
		ТекущиеДанные.РежимЗагрузки = 0;
	ИначеЕсли ТекущиеДанные.РежимЗагрузкиДляВыбора = "Движение регистра/Табличная часть" Тогда
		ТекущиеДанные.РежимЗагрузки = 5;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПЗ_СсылкаИсточникаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если СсылкаИсточника = Неопределено Тогда
		Возврат	
	КонецЕсли;
	
	ОткрытьФорму(ПолучитьИмяФормыСсылкиИсточника(СсылкаИсточника));	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыСсылкиИсточника(СсылкаИсточника)
	
	Если мЭтоДокумент(СсылкаИсточника) Тогда
		Возврат "Документ." + СсылкаИсточника.Метаданные().Имя + ".ФормаСписка"
	Иначе
		Возврат "Справочник." + СсылкаИсточника.Метаданные().Имя + ".ФормаСписка"	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаПодготовленныхДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТаблицаПодготовленныхДанныхПриОкончанииРедактированияНаСервере(Элементы.ТаблицаПодготовленныхДанных.ТекущиеДанные.ПолучитьИдентификатор(), НоваяСтрока)
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодготовленныхДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;	
	нПараметры = Новый Структура();
	
	ТекстВопроса = "Данная строка будет удалена безвозвратно. Продолжить?";
	Если ВерсияПлатформы83 Тогда
		Выполнить("
		|	ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросУдалениеСтрокиТаблицыПодготовленныхДанных"", ЭтотОбъект, нПараметры);
		|	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		|");
	Иначе
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ВопросУдалениеСтрокиТаблицыПодготовленныхДанных(ОтветНаВопрос, нПараметры)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодготовленныхДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ТаблицаПодготовленныхДанныхПриОкончанииРедактированияНаСервере(ИдентификаторСтроки, НоваяСтрока)
	
	ТекущиеДанные = ТаблицаПодготовленныхДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
	Таблица = ПолучитьИзВременногоХранилища(ТаблицаПодготовленныхДанныхАдресИсходныйТЗ);
	Если НоваяСтрока Тогда
		ТекущиеДанные.Идентификатор = Новый УникальныйИдентификатор;
		Строка = Таблица.Добавить();
	Иначе
		Строка = Таблица.Найти(ТекущиеДанные.Идентификатор, "Идентификатор");			
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Строка, ТекущиеДанные);
	ТаблицаПодготовленныхДанныхАдресИсходныйТЗ = ПоместитьВоВременноеХранилище(Таблица, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУдалениеСтрокиТаблицыПодготовленныхДанных(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
    	ТаблицаПодготовленныхДанныхУдалениеСтроки(Элементы.ТаблицаПодготовленныхДанных.ТекущиеДанные.ПолучитьИдентификатор())	
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПодготовленныхДанныхУдалениеСтроки(ИдентификаторСтроки)
	
	ТекущиеДанные = ТаблицаПодготовленныхДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
	Таблица = ПолучитьИзВременногоХранилища(ТаблицаПодготовленныхДанныхАдресИсходныйТЗ);
	Если ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Тогда
		Строка = Таблица.Найти(ТекущиеДанные.Идентификатор, "Идентификатор");	
	Иначе
		Возврат		
	КонецЕсли;
	
	Таблица.Удалить(Строка);
	ТаблицаПодготовленныхДанныхАдресИсходныйТЗ = ПоместитьВоВременноеХранилище(Таблица, ЭтаФорма.УникальныйИдентификатор);
	ТаблицаПодготовленныхДанных.Удалить(ТаблицаПодготовленныхДанных.Индекс(ТекущиеДанные));
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодготовленныхДанныхОбъектЗагрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Элементы.ТаблицаПодготовленныхДанных.ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ТаблицаПодготовленныхДанных", "") + "Найден"] = Истина
		
	Иначе
		
		СтандартнаяОбработка = Ложь
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодготовленныхДанныхОбъектЗагрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодготовленныхДанныхОбъектЗагрузкиПриИзменении(Элемент)
	
	ИмяПоля = СтрЗаменить(Элемент.Имя, "ТаблицаПодготовленныхДанных", "");
	ТекущиеДанные = Элементы.ТаблицаПодготовленныхДанных.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Элементы.ТаблицаПодготовленныхДанных.ТекущиеДанные[ИмяПоля]) Тогда
		ТаблицаПодготовленныхДанныхОбъектЗагрузкиПриИзмененииНаСервере(ИмяПоля, ТекущиеДанные.ПолучитьИдентификатор())	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПодготовленныхДанныхОбъектЗагрузкиПриИзмененииНаСервере(НаименованиеПоля, ИдентификаторСтроки)
	
	ТекущиеДанные = ТаблицаПодготовленныхДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИмяОбъекта = ТекущиеДанные[НаименованиеПоля].Метаданные().Имя;
	ТекущиеДанные[НаименованиеПоля] = Справочники[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор);
	ТекущиеДанные[НаименованиеПоля + "Найден"] = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЦЫ ЗНАЧЕНИЙ ЗАГРУЖАЕМЫХ РЕКВИЗИТОВ

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураДанныхСтроки = мПолучитьТекущиеДанныеСтраницыНастройки(СтандартнаяОбработка);
	ТекДанные = СтруктураДанныхСтроки.ТекущиеДанные;
			
	Элемент.ДоступныеТипы = ТекДанные.ДоступныеТипы;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураДанныхСтроки = мПолучитьТекущиеДанныеСтраницыНастройки(СтандартнаяОбработка);
	ТекДанные = СтруктураДанныхСтроки.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбораЗначенияПоУмолчанию = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаВыбораЗначенияПоУмолчанию", ,ЭтаФорма);
	
	ФормаВыбораЗначенияПоУмолчанию.ЗначениеПоУмолчанию = ТекДанные.ЗначениеПоУмолчанию;
	ФормаВыбораЗначенияПоУмолчанию.НастройкаЗагрузки = ТекДанные.НастройкаЗагрузки;
	
	ФормаВыбораЗначенияПоУмолчанию.Элементы.ЗначениеПоУмолчанию.ОграничениеТипа = ТекДанные.ОписаниеТипов;	
			
	СписокВыбора = ФормаВыбораЗначенияПоУмолчанию.Элементы.НастройкаЗагрузки.СписокВыбора;	
 	
	Для каждого Строка Из ТаблицыНастроек Цикл
		Если Строка = СтруктураДанныхСтроки.СтрокаНастроек ИЛИ (Строка.РежимЗагрузки = 5 И Строка.ДопНастройки) Тогда 
			Продолжить
		КонецЕсли;
		Если ТаблицыНастроек.Индекс(Строка) = 0 Тогда
			Если (РежимЗагрузки = 0 И ТекДанные.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка."+ТипОбъектаСправочника)))
			 ИЛИ (РежимЗагрузки = 5 И ТекДанные.ОписаниеТипов.СодержитТип(ТипЗнч(СсылкаИсточника))) Тогда
				СписокВыбора.Добавить("ТаблицаЗагружаемыхРеквизитов", "Загружаемый объект")
			КонецЕсли;
				
		Иначе
			Если ТекДанные.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка."+Строка.ИмяОбъектаЗагрузки)) Тогда
				СписокВыбора.Добавить(Строка.Значение, Строка.Заголовок)
			КонецЕсли
		КонецЕсли;	
	КонецЦикла;
		
	Если СписокВыбора.Количество() <> 0 Тогда
		ФормаВыбораЗначенияПоУмолчанию.Элементы.НастройкаЗагрузки.Видимость = Истина
	Иначе
		ФормаВыбораЗначенияПоУмолчанию.Элементы.НастройкаЗагрузки.Видимость = Ложь	
	КонецЕсли;

	ФормаВыбораЗначенияПоУмолчанию.Открыть()
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураДанныхСтроки = мПолучитьТекущиеДанныеСтраницыНастройки(СтандартнаяОбработка);
	ТекДанные = СтруктураДанныхСтроки.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
		ФормаРедактированияВыражения = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаРедактированияВыражения", ,ЭтаФорма);
		
		ПолеТекстовогоДокумента = ФормаРедактированияВыражения.ПолеТекстовогоДокумента;
		ПолеТекстовогоДокумента.УстановитьТекст(ТекДанные.Выражение);
		
		ФормаРедактированияВыражения.Открыть();
	Иначе
		ДоступныеТипы	= ТекДанные.ОписаниеТипов;
		
		СписокВыбораВладельца	= ПолучитьСписокВыбора(ТекДанные.ИмяРеквизита, "СвязьПоВладельцу");
		СписокВыбораСвязейПоТипу = ПолучитьСписокВыбора(ТекДанные.ИмяРеквизита, "СвязьПоТипу");
		
		СписокВыбораИскатьПо = ПолучитьСписокИменПредставлений(ТекДанные.ОписаниеТипов);
		
		ФормаРедактированияСвязи = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаРедактированияСвязи", ,ЭтаФорма);
		ФормаРедактированияСвязи.ИспользуемыеТипы = ДоступныеТипы;
		ФормаРедактированияСвязи.ИскатьПо = ТекДанные.ИскатьПо;
		ФормаРедактированияСвязи.ИспользоватьВладельца = (СписокВыбораВладельца.Количество() > 0);
		ФормаРедактированияСвязи.ИспользоватьТипы = (СписокВыбораСвязейПоТипу.Количество() > 0);
		ФормаРедактированияСвязи.СвязьПоВладельцу = ТекДанные.СвязьПоВладельцу;
		ФормаРедактированияСвязи.СвязьПоТипу = ТекДанные.СвязьПоТипу;
			
		Сп = ФормаРедактированияСвязи.Элементы.ИскатьПо.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораИскатьПо Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;
		
		Сп = ФормаРедактированияСвязи.Элементы.СвязьПоВладельцу.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораВладельца Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;
		
		Сп = ФормаРедактированияСвязи.Элементы.СвязьПоТипу.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораСвязейПоТипу Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;

		ФормаРедактированияСвязи.Открыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийОчистка(Элемент, СтандартнаяОбработка)
	
	СтруктураДанныхСтроки = мПолучитьТекущиеДанныеСтраницыНастройки(СтандартнаяОбработка);
	ТекДанные = СтруктураДанныхСтроки.ТекущиеДанные;
	
	ТекДанные.ПредставлениеДопУсловий = "";
	ТекДанные.ИскатьПо = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиПриИзменении(Элемент)
	
	СтруктураДанныхСтроки = мПолучитьТекущиеДанныеСтраницыНастройки();
	ТекДанные = СтруктураДанныхСтроки.ТекущиеДанные;
	
	Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
		ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение
	ИначеЕсли ТекДанные.РежимЗагрузки = "Устанавливать" Тогда
		ТекДанные.ПредставлениеДопУсловий = ""
	Иначе
		ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
				+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
	КонецЕсли;
			
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ИНФОСТАРТ И РЕГИСТРАЦИИ ОБРАБОТКИ

&НаКлиенте                                            
Процедура ОткрытьСтраничкуАвтора(Команда)
	
	ЗапуститьПриложение("http://it-titan.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраничкуРазработки(Команда)
	
	ЗапуститьПриложение("http://infostart.ru/public/284674/");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВерсию(Команда)
	
	НачатьПроверкуВерсий();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуВерсий(ЭтоПроверкаПриОткрытии = Ложь)

	ВерсияНаСейте = ПолучитьВерисюОбработки();
	
	ТребуетсяОбновление = ВыполнитьСравнениеВерсий(ВерсияНаСейте, ТекущаяВерсия);
	
	Если ТребуетсяОбновление Тогда
		
		ТекстВопроса = "Требуется обновление!.
						|Текущая версия: "+ ТекущаяВерсия + " 
						|Версия на сайте: "+ ВерсияНаСейте + "
						|
						|Перейти на страницу обработки для загрузки обновления?";
		
		нПараметры = Новый Структура;	
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросНачатьСкачиваниеОбновления"", ЭтотОбъект, нПараметры);
			|	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			|");
		Иначе
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			ВопросНачатьСкачиваниеОбновления(ОтветНаВопрос, нПараметры);
		КонецЕсли;

	ИначеЕсли НЕ ЭтоПроверкаПриОткрытии Тогда
		
		ТекстСообщения = "Обновление не требуется.
						|Текущая версия: "+ ТекущаяВерсия + " 
						|Версия на сайте: "+ ВерсияНаСейте;
						
		Сообщить(ТекстСообщения);										
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВопросНачатьСкачиваниеОбновления(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ЗапуститьПриложение("http://it-titan.ru/index.php?id=4");	
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВерисюОбработки()
	
	ВерсияНаСейте = "";
	
  	АдресСайта = "it-titan.ru";
    ПутьНаСайте = "ver/feedexcel2015";
	
    //Грузим сам ХТМЛ
    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");

    HTTPСервис = Новый HTTPСоединение(АдресСайта,,,,,Ложь);
    ПравильностьВыполнения = Истина;

    Попытка
        HTTPСервис.Получить(ПутьНаСайте, ИмяВременногоФайла);
    Исключение
		Сообщить("Не удалось получить версию!");
		Сообщить("Проверка новых версий отключена");
		ОтключитьПроверкуНовыхВерсий = Истина;
        Возврат ВерсияНаСейте;
	КонецПопытки;	
	
	ЧтениеХТМЛ = Новый ЧтениеТекста;
    ЧтениеХТМЛ.Открыть(ИмяВременногоФайла, КодировкаТекста.UTF8);
    ВерсияНаСейте = ЧтениеХТМЛ.Прочитать();
	
	Если СтрЧислоСтрок(ВерсияНаСейте) > 1 Тогда
		Возврат ""	
	КонецЕсли; 
	
	Возврат ВерсияНаСейте;
	
КонецФункции // ПолучитьВерисюОбработки()

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьСравнениеВерсий(ПроверяемаяВерсия, ТекущаяВерсия)

	ПроверяемаяВерсия = ?(ПустаяСтрока(ПроверяемаяВерсия), "0.0.0.0", ПроверяемаяВерсия);
	ТекущаяВерсия = ?(ПустаяСтрока(ТекущаяВерсия), "0.0.0.0", ТекущаяВерсия);

	МассивТекущий = мРазложитьСтрокуВМассивПодстрок(ТекущаяВерсия, ".");
	МассивНаСайте = мРазложитьСтрокуВМассивПодстрок(ПроверяемаяВерсия, ".");
		
	КоличествоРазрядовТекущее = МассивТекущий.Количество()-1;
	КоличествоРазрядовНаСайте = МассивНаСайте.Количество()-1;
	
	Обновляем = Ложь;
	
	Для х = 0 ПО КоличествоРазрядовТекущее Цикл
		
		Если х > КоличествоРазрядовНаСайте Тогда
			
			Прервать;
			
		КонецЕсли;
		
		Если МассивТекущий[х] > МассивНаСайте[х] Тогда		
			
			Прервать;
			
		КонецЕсли;
		
		Если МассивТекущий[х] < МассивНаСайте[х] Тогда
			
			Обновляем = Истина;
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Обновляем
	
КонецФункции // ПроверитьНеобходимостьОбновления()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ РЕГИСТРАЦИИ ОБРАБОТКИ В ДОПОЛНИТЕЛЬНЫХ ОТЧЕТАХ И ОБРАБОТКАХ

&НаКлиенте
//Процедура-обработчик команды "ЗарегистрироватьВИБ"
//
Процедура ЗарегистрироватьВИБ(Команда)
	
	Если ВерсияПлатформы83 Тогда
		Выполнить("
		|	ОписаниеОповещения = Новый ОписаниеОповещения(""ЗарегистрироватьвИБПослеПомещенияВХранилище"", ЭтотОбъект);
		|	НачатьПомещениеФайла(ОписаниеОповещения, АдресВоВременномХранилище,ИмяФайлаОбработки, Ложь, ЭтаФорма.УникальныйИдентификатор);
		|");
	Иначе	
			ПоместитьФайл(АдресВоВременномХранилище, ИмяФайлаОбработки, ИмяФайлаОбработки, Ложь, ЭтаФорма.УникальныйИдентификатор);
			ЗарегистрироватьвИБПослеПомещенияВХранилище(Истина, АдресВоВременномХранилище, ИмяФайлаОбработки, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
//Универсальная функция для регистрации обработки в информационной базе
//
Функция ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере(РежимИспользования = "", СсылкаНаЭлемент = Неопределено, АдресДвоичныхДанных = Неопределено, ВторойВариантРегистрации = Ложь, ИмяФайлаОбработки)

	Перем ВидОбработки;
	
	//Регистрируем обработку в информационной базе
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	РегистрационныеДанные = ПолучитьСведенияОВнешнейОбработке(ВторойВариантРегистрации);
	ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
	
	Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеОтчетыИОбработки.Версия,
			|	ДополнительныеОтчетыИОбработки.Ссылка
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
			|ГДЕ
			|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование
			|	И ДополнительныеОтчетыИОбработки.Вид = &Вид
			|";

		Запрос.УстановитьПараметр("Наименование", РегистрационныеДанные.Наименование);
		Запрос.УстановитьПараметр("Вид", ВидОбработки);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();

		Если Выборка.Следующий() Тогда
			СсылкаНаЭлемент = Выборка.Ссылка; 
		Иначе
			СсылкаНаЭлемент = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка(); 
		КонецЕсли;
	КонецЕсли; 
	
	Если РежимИспользования = "Поиск" Тогда
		Если СсылкаНаЭлемент = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда 
			РежимИспользования = "Обновить"; 
		Иначе
			//Если СсылкаНаЭлемент.Версия <> РегистрационныеДанные.Версия Тогда
			Возврат РегистрационныеДанные.Наименование; 
		//Иначе
		//	Возврат Ложь; 
		КонецЕсли;
	КонецЕсли;
	
	Если РежимИспользования = "Обновить" Тогда
		Если СсылкаНаЭлемент = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
			ЭлементОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		Иначе
			ЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект(); 
		КонецЕсли; 
	КонецЕсли;
	
	ПолноеИмяИмяФайла = ИмяФайлаОбработки;
	МассивПодстрок = мРазложитьСтрокуВМассивПодстрок(ПолноеИмяИмяФайла, "\");
	ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
	
	Если ЭлементОбъект.ИмяФайла = ИмяФайла
		И ЭлементОбъект.Вид = ВидОбработки Тогда
		// если это перерегистрация этой же обработи - не очищаем назначение
	Иначе
		ЭлементОбъект.Назначение.Очистить();
	КонецЕсли;
	
	// Инициализация сведений об обработке
	Если Не ЗначениеЗаполнено(ЭлементОбъект.Публикация) Тогда
		ЭлементОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	КонецЕсли; 
	ЭлементОбъект.Вид = ВидОбработки;
	ЭлементОбъект.Наименование		= РегистрационныеДанные.Наименование;
	ЭлементОбъект.Версия			= РегистрационныеДанные.Версия;
	ЭлементОбъект.БезопасныйРежим	= РегистрационныеДанные.БезопасныйРежим;
	ЭлементОбъект.Информация		= РегистрационныеДанные.Информация;
	Если ЭлементОбъект.Метаданные().Реквизиты.Найти("ИмяОбъекта") <> Неопределено Тогда
		ЭлементОбъект.ИмяОбъекта		= РегистрационныеДанные.Наименование;
	КонецЕсли; 
	
	// Устанавливаем имя файла обработки
	ЭлементОбъект.ИмяФайла = РегистрационныеДанные.Наименование;
	
	Если ЭтоАдресВременногоХранилища(АдресДвоичныхДанных) Тогда
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресДвоичныхДанных);
	Иначе
		ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ПолноеИмяИмяФайла);
	КонецЕсли; 
	ЭлементОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки, Новый СжатиеДанных(9));
	
	// Если новая обработка или не заполнено назначение - устанавливаем назначение из обработки
	Если (ЭлементОбъект.Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка()
		 ИЛИ ЭлементОбъект.Назначение.Количество() = 0)
		И (ЭлементОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта
			ИЛИ ЭлементОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма
			ИЛИ ЭлементОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов)
		 ТОГДА
		
		ЭлементОбъект.ИспользоватьДляФормыОбъекта = Истина;
		ЭлементОбъект.ИспользоватьДляФормыСписка = Истина;
		
		Если РегистрационныеДанные.Свойство("Назначение") Тогда
			
			ВерсияБСП = "0";
			Выполнить("ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();");
			
			Если ВыполнитьСравнениеВерсий(ВерсияБСП, "2.1.3") Тогда
				
				НазначаемыеОбъектыМетаданных = Вычислить("ДополнительныеОтчетыИОбработки.НазначаемыеОбъектыМетаданныхПоВидуВнешнегоОбъекта(ВидОбработки)");
				Для Каждого ПолноеИмяОбъектаМетаданных Из РегистрационныеДанные.Назначение Цикл
					ПозицияТочки = Найти(ПолноеИмяОбъектаМетаданных, ".");
					Если Сред(ПолноеИмяОбъектаМетаданных, ПозицияТочки + 1) = "*" Тогда
						Поиск = Новый Структура("ВидОбъектаМетаданных", Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1));
					Иначе
						Поиск = Новый Структура("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
					КонецЕсли;
					
					Найденные = НазначаемыеОбъектыМетаданных.НайтиСтроки(Поиск);
					Для Каждого СтрокаТаблицы Из Найденные Цикл
						СтрокаНазначение = ЭлементОбъект.Назначение.Добавить();
						СтрокаНазначение.ОбъектНазначения = СтрокаТаблицы.ОбъектНазначения;
					КонецЦикла;
				КонецЦикла;
				ЭлементОбъект.Назначение.Свернуть("ОбъектНазначения", "");
				
			Иначе
				
				НазначаемыеОбъектыМетаданных = Вычислить("ДополнительныеОтчетыИОбработки.ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(ВидОбработки)");
				Для Каждого ПолноеИмяОбъектаМетаданных Из РегистрационныеДанные.Назначение Цикл
					ПозицияТочки = Найти(ПолноеИмяОбъектаМетаданных, ".");
					Если Сред(ПолноеИмяОбъектаМетаданных, ПозицияТочки + 1) = "*" Тогда
						Поиск = Новый Структура("Класс", Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1));
					Иначе
						Поиск = Новый Структура("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
					КонецЕсли;
					
					Найденные = НазначаемыеОбъектыМетаданных.НайтиСтроки(Поиск);
					Для Каждого СтрокаТаблицы Из Найденные Цикл
						СтрокаНазначение = ЭлементОбъект.Назначение.Добавить();
						СтрокаНазначение.ПолноеИмяОбъектаМетаданных = СтрокаТаблицы.ПолноеИмяОбъектаМетаданных;
					КонецЦикла;
				КонецЦикла;
				ЭлементОбъект.Назначение.Свернуть("ПолноеИмяОбъектаМетаданных", "");	
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КомандыСохраненные = ЭлементОбъект.Команды.Выгрузить();
	
	ЭлементОбъект.Команды.Очистить();
	
	// Инициализация команд
	
	Для Каждого ЭлементОписаниеКоманды Из РегистрационныеДанные.Команды Цикл
		
		НоваяСтрока = ЭлементОбъект.Команды.Добавить();
		НоваяСтрока.Идентификатор	= ЭлементОписаниеКоманды.Идентификатор;
		НоваяСтрока.Представление	= ЭлементОписаниеКоманды.Представление;
		НоваяСтрока.Модификатор		= ЭлементОписаниеКоманды.Модификатор;
		НоваяСтрока.ПоказыватьОповещение = ЭлементОписаниеКоманды.ПоказыватьОповещение;
		
		Если ЭлементОписаниеКоманды.Использование = "ОткрытиеФормы" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
		ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовКлиентскогоМетода" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода;
		ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовСерверногоМетода" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода;
		Иначе
			ТекстСообщения = НСтр("ru = 'Для команды %1 не определен способ запуска.'");			
			Выполнить("ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементОписаниеКоманды.Представление);");			
			ВызватьИсключение ТекстСообщения;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ЭлементОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
		ЭлементОбъект.Записать();
		СсылкаНаЭлемент = ЭлементОбъект.Ссылка;
	Исключение
		НСтрока = НСтр("ru = 'Произошла ошибка при записи обработки.
							|Подробное описание ошибки: %1'");
		Выполнить("	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока,
					|	КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));");
		ВызватьИсключение ТекстСообщения;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСведенияОВнешнейОбработке(ВторойВариантРегистрации = Ложь, ПараметрыРегистрации = Неопределено) Экспорт
	
	Выполнить("ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.1.3.1"")");	
	
	ПараметрыРегистрации.Версия = "2.5";
	ПараметрыРегистрации.БезопасныйРежим = Истина;
	ПараметрыРегистрации.Информация = "";
	
	Если ВторойВариантРегистрации Тогда	
		Выполнить("ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка()");
		ПараметрыРегистрации.Наименование = "Загрузка данных из табличного документа";
		
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = "Загрузка данных из табличного документа";
		НоваяКоманда.Идентификатор = "ЗаполнитьДанныхИзТабличногоДокумента";
		Выполнить("НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы()");
		НоваяКоманда.ПоказыватьОповещение = Истина;	
	Иначе	
		Выполнить("ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта()");
		ПараметрыРегистрации.Наименование = "Заполнение табличной части из табличного документа";
				
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = "Заполнение табличной части из табличного документа";
		НоваяКоманда.Идентификатор = "ЗаполнитьДокументИзТабличногоДокумента";
		Выполнить("НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы()");
		НоваяКоманда.ПоказыватьОповещение = Истина;
	КонецЕсли;

	Возврат ПараметрыРегистрации;
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьвИБПослеПомещенияВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт 
	
	ДополнительнаяОбработкаСсылка = Неопределено;
	Результат = ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере("Поиск", ДополнительнаяОбработкаСсылка, Адрес, Ложь, ВыбранноеИмяФайла);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ТекстВопроса = НСтр("ru = 'В информационной базе зарегистрирована обработка под именем - ""%1"".
					|Обновить существующую?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Результат);
		
		нПараметры = Новый СписокЗначений;
		нПараметры.Добавить(ДополнительнаяОбработкаСсылка);
		нПараметры.Добавить(Ложь);
		
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросРегистрацииОбработкиВ_ИБ"", ЭтотОбъект, нПараметры);
			|	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			|");
		Иначе
				ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				ВопросРегистрацииОбработкиВ_ИБ(ОтветНаВопрос, нПараметры);
		КонецЕсли;
	КонецЕсли; 
	
	// Добавить второй вариант
	
	ДополнительнаяОбработкаСсылка = Неопределено;
	Результат = ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере("Поиск", ДополнительнаяОбработкаСсылка, Адрес, Истина, ВыбранноеИмяФайла);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ТекстВопроса = НСтр("ru = 'В информационной базе зарегистрирована обработка под именем - ""%1"".
					|Обновить существующую?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Результат);
		
		нПараметры = Новый СписокЗначений;
		нПараметры.Добавить(ДополнительнаяОбработкаСсылка);
		нПараметры.Добавить(Истина);
		
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросРегистрацииОбработкиВ_ИБ"", ЭтотОбъект, нПараметры);
			|	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			|");
		Иначе
				ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				ВопросРегистрацииОбработкиВ_ИБ(ОтветНаВопрос, нПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРегистрацииОбработкиВ_ИБ(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	
	ДополнительнаяОбработкаСсылка = ДополнительныеПараметры[0].Значение;
	ВторойВариантРегистрированияОбработки = ДополнительныеПараметры[1].Значение;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ОчиститьСообщения();
		Результат = ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере("Обновить", ДополнительнаяОбработкаСсылка, АдресВоВременномХранилище, ВторойВариантРегистрированияОбработки, ИмяФайлаОбработки);
	КонецЕсли;
	
	ОчиститьСообщения();
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Обработка """ + Строка(Результат) + """ успешно зарегистрирована в справочнике ""Дополнительные отчеты и обработки"".
		|При необходимости укажите объекты назначения для обработки.'");
		
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ПоказатьПредупреждение(, ТекстПредупреждения);
		    |");
		Иначе
				Предупреждение(ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОБАВЛЕНИЯ ТАБЛИЦ НАСТРОЕК

&НаСервере
// Процедура добавляет реквизиты и элементы формы, для загрузки подчиенных справочников
//
//	ЗагружаемыйОбъект - Объект метаданных для которго создается страница настройки (Строка)
//	Представление - Представление объекта метаданных для которого создается страница настройки (Строка)
// 	ЭтоДопСтраница - Определяет это основная страница настройки или дополнительно создаваемая (булево)
//	ЭтоРегистр - Определяет, что добавляемая страница, является настройкой для загрузки в один из регистров (булево)
//
Функция ДобавитьСтраницуНастроек(ЗагружаемыйОбъект, Представление, ЭтоДопСтраница = Ложь, ЭтоРегистр = Ложь, ЗагружаетсяДоОбъекта = Ложь, ТекРежимЗагрузки = Неопределено)
	
	Если ТекРежимЗагрузки = Неопределено Тогда
		ТекРежимЗагрузки = РежимЗагрузки
	КонецЕсли;
	
	Если ЭтоДопСтраница ИЛИ ЗагружаетсяДоОбъекта Тогда
		МетаданныеОбъекта = ПолучитьМетаданныеИсточника(ЗагружаемыйОбъект, ЭтоРегистр, ТекРежимЗагрузки);
		НаименованиеСтраницы = "ПодчиненныйСправочник_" + (КоличествоСозданныхПодчиненныхНастроек);
		ПредставлениеСтраницы = "" + (КоличествоСозданныхПодчиненныхНастроек + 1) + ": "+Представление;
	Иначе
		МетаданныеОбъекта = ПолучитьМетаданныеИсточника();
		НаименованиеСтраницы = ЗагружаемыйОбъект;
		ПредставлениеСтраницы = Представление;
	КонецЕсли;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		Тип = "";	
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Тип = "СправочникСсылка." + МетаданныеОбъекта.Имя
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Тип = "ДокументСсылка." + МетаданныеОбъекта.Имя	
	КонецЕсли;
		
	КоличествоСозданныхПодчиненныхНастроек = КоличествоСозданныхПодчиненныхНастроек + 1;
	
	нСтрокаНастроек = ТаблицыНастроек.Добавить();
	нСтрокаНастроек.Ключ = "Страница" + НаименованиеСтраницы; 
	нСтрокаНастроек.Значение = НаименованиеСтраницы;
	нСтрокаНастроек.ИмяОбъектаЗагрузки = ЗагружаемыйОбъект;
	нСтрокаНастроек.Заголовок = ПредставлениеСтраницы;
	нСтрокаНастроек.ДопНастройки = ЭтоДопСтраница;
	нСтрокаНастроек.Представление = Представление;
	нСтрокаНастроек.ЭтоРегистр = ЭтоРегистр;
	нСтрокаНастроек.ЗагружаетсяДоОбъекта = ЗагружаетсяДоОбъекта;
	нСтрокаНастроек.РежимЗагрузки = ТекРежимЗагрузки;
	нСтрокаНастроек.ТипСтрокой = Тип;
	
	СтраницаГруппыРеквизитов = Элементы.Добавить("Страница" + НаименованиеСтраницы, Тип("ГруппаФормы"), Элементы.ГруппаЗагрузкаНастройка);
   	СтраницаГруппыРеквизитов.Вид = ВидГруппыФормы.Страница;
	СтраницаГруппыРеквизитов.Заголовок = ПредставлениеСтраницы;
	СтраницаГруппыРеквизитов.Картинка = БиблиотекаКартинок.ПараметрыВыводаКомпоновкиДанных;
	
	МассивДобавляемыхРеквизитов = Новый Массив;	
	нРеквизит = Новый РеквизитФормы(НаименованиеСтраницы, Новый ОписаниеТипов("ТаблицаЗначений"),,НаименованиеСтраницы);
	МассивДобавляемыхРеквизитов.Добавить(нРеквизит);	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Добавляем командную панель и ее кнопки
	нКоманднаяПанель = Элементы.Добавить(НаименованиеСтраницы + "КоманднаяПанель", Тип("ГруппаФормы"), СтраницаГруппыРеквизитов);
	нКоманднаяПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	УстановитьФлажки = Элементы.Добавить(НаименованиеСтраницы + "УстановитьФлажки", Тип("КнопкаФормы"), нКоманднаяПанель);
	УстановитьФлажки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	УстановитьФлажки.ИмяКоманды = "УстановитьФлажки";	
	СнятьФлажки = Элементы.Добавить(НаименованиеСтраницы + "СнятьФлажки", Тип("КнопкаФормы"), нКоманднаяПанель);
	СнятьФлажки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	СнятьФлажки.ИмяКоманды = "СнятьФлажки";

	ВосстановитьЗначенияИзФайла = Элементы.Добавить(НаименованиеСтраницы + "ВосстановитьЗначенияИзФайла", Тип("КнопкаФормы"), нКоманднаяПанель);
	ВосстановитьЗначенияИзФайла.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ВосстановитьЗначенияИзФайла.ИмяКоманды = "ВосстановитьЗначенияИзФайла";
	СохранитьЗначенияВФайл = Элементы.Добавить(НаименованиеСтраницы + "СохранитьЗначенияВФайл", Тип("КнопкаФормы"), нКоманднаяПанель);
	СохранитьЗначенияВФайл.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	СохранитьЗначенияВФайл.ИмяКоманды = "СохранитьЗначенияВФайл";	
	
	ВосстановитьНастройки = Элементы.Добавить(НаименованиеСтраницы + "ВосстановитьНастройки", Тип("КнопкаФормы"), нКоманднаяПанель);
	ВосстановитьНастройки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ВосстановитьНастройки.ИмяКоманды = "ВосстановитьНастройки";
	СохранитьНастройки = Элементы.Добавить(НаименованиеСтраницы + "СохранитьНастройки", Тип("КнопкаФормы"), нКоманднаяПанель);
	СохранитьНастройки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	СохранитьНастройки.ИмяКоманды = "СохранитьНастройки";	
				
	Если ЭтоДопСтраница ИЛИ ЗагружаетсяДоОбъекта Тогда
		
		УдалитьНастройку = Элементы.Добавить(НаименованиеСтраницы + "УдалитьТаблицуНастройки", Тип("КнопкаФормы"), нКоманднаяПанель);
		УдалитьНастройку.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		УдалитьНастройку.ИмяКоманды = "УдалитьТаблицуНастройки";
		
	ИначеЕсли НЕ ЭтоДопСтраница И НЕ ЗагружаетсяДоОбъекта Тогда
		
		ГруппаПеренумерования = Элементы.Добавить(НаименованиеСтраницы + "НумерацияКолонок", Тип("ГруппаФормы"), нКоманднаяПанель);
		ГруппаПеренумерования.Вид = ВидГруппыФормы.Подменю;
		ГруппаПеренумерования.Заголовок = "Нумерация колонок";
		
		ПеренумероватьКолонки = Элементы.Добавить(НаименованиеСтраницы + "РучнаяНумерацияКолонокТабличногоДокумента", Тип("КнопкаФормы"), ГруппаПеренумерования);
		ПеренумероватьКолонки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;	
		ПеренумероватьКолонки.ИмяКоманды = "РучнаяНумерацияКолонокТабличногоДокумента";
		ПеренумероватьКолонки.Пометка = РучнаяНумерацияКолонокТабличногоДокумента;
		
		ПеренумероватьКолонки = Элементы.Добавить(НаименованиеСтраницы + "ПеренумероватьКолонки", Тип("КнопкаФормы"), ГруппаПеренумерования);
		ПеренумероватьКолонки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;	
		ПеренумероватьКолонки.ИмяКоманды = "ПеренумероватьКолонки";
		
		УстановитьФлажки = Элементы.Добавить(НаименованиеСтраницы + "События", Тип("КнопкаФормы"), нКоманднаяПанель);
		УстановитьФлажки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		УстановитьФлажки.ИмяКоманды = "События";
		
	КонецЕсли;
	
	// Добавляем таблицу значений на форму
	ЭлементТаблицаФормы = Элементы.Добавить(НаименованиеСтраницы, Тип("ТаблицаФормы"), СтраницаГруппыРеквизитов);
    ЭлементТаблицаФормы.ПутьКДанным = НаименованиеСтраницы;
	ЭлементТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	                                                                                 
	ТЗ_Основа = ДанныеФормыВЗначение(ПодготовленнаяТаблицаРеквизитов, Тип("ТаблицаЗначений"));
	Для каждого Колонка Из ТЗ_Основа.Колонки Цикл
		нРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, НаименованиеСтраницы, Колонка.Заголовок);
		МассивДобавляемыхРеквизитов.Добавить(нРеквизит);	
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);		
			
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "Пометка", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "Пометка";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "ПредставлениеРеквизита", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "ПредставлениеРеквизита";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	НовыйЭлемент.Заголовок = "Представление реквизита";
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "ПолеПоиска", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "ПолеПоиска";
	НовыйЭлемент.Заголовок = "Поле поиска";
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "ОписаниеТипов", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "ОписаниеТипов";
	НовыйЭлемент.УстановитьДействие("НачалоВыбора","ТаблицаЗагружаемыхРеквизитовОписаниеТиповНачалоВыбора");
    НовыйЭлемент.Заголовок = "Описание типов";
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "РежимЗагрузки", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "РежимЗагрузки";
    НовыйЭлемент.РежимВыбораИзСписка = Истина;
	НовыйЭлемент.СписокВыбора.Добавить("Искать");
	НовыйЭлемент.СписокВыбора.Добавить("Устанавливать");
	НовыйЭлемент.СписокВыбора.Добавить("Вычислять");	
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиПриИзменении");
	НовыйЭлемент.Заголовок = "Режим загрузки";
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "НомерКолонки", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "НомерКолонки";
	НовыйЭлемент.Заголовок = "Номер колонки";
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "ПредставлениеЗначенияПоУмолчанию", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "ПредставлениеЗначенияПоУмолчанию";
    НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюНачалоВыбора");
	НовыйЭлемент.СвязьПоТипу = Новый СвязьПоТипу("Элементы."+НаименованиеСтраницы + ".ТекущиеДанные.ОписаниеТипов");
	НовыйЭлемент.Заголовок = "Значение по умолчанию";
	НовыйЭлемент.ВыбиратьТип = Ложь;
	НовыйЭлемент.КнопкаВыбора = Истина;
	НовыйЭлемент.РедактированиеТекста = Ложь;
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "ПредставлениеДопУсловий", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "ПредставлениеДопУсловий";
	НовыйЭлемент.ВыбиратьТип = Ложь;
	НовыйЭлемент.КнопкаВыбора = Истина;
    НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийНачалоВыбора");
	НовыйЭлемент.УстановитьДействие("Очистка", "ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийОчистка");
	НовыйЭлемент.Заголовок = "Представление доп. условий";
	НовыйЭлемент.РедактированиеТекста = Ложь;
	
	ДобавитьУсловноеОформлениеТаблицыНастроек(НаименованиеСтраницы);
	
	УстановитьВидимостьКомандНаПанелях();
	
	Возврат НаименованиеСтраницы;
	
КонецФункции

&НаСервере
// Процедура получает список справочников где, основной справочник является владельцем
//
Процедура ПолучитьПодчиненныеСправочники()
	
	СписокДобавляемыхСтраниц.Очистить();
	
	Если ЗначениеЗаполнено(ТипОбъектаСправочника) Тогда
		МетСпр = Метаданные.Справочники;
		
		Для каждого Спр Из МетСпр Цикл
			Для каждого Владелец Из Спр.Владельцы Цикл
				Если Владелец = Метаданные.Справочники[ТипОбъектаСправочника] Тогда
					СписокДобавляемыхСтраниц.Добавить(Спр.Имя, Спр.Синоним);	
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет настройками дополнительно созданную страницу настройки
//
// 	НаименованиеСтраницы - Наименование страницы настройки которую требуется заполнить (строка)
//	ОбъектЗагрузки - объект метаданных настройками загрузки которого заполняется страница (строка)
//	ЭтоРегистр - Определяет, что добавляемая страница, является настройкой для загрузки в один из регистров (булево) 
//
Процедура ЗаполнитьНастройкамиСозданнуюСтраницу(НаименованиеСтраницы, ОбъектЗагрузки, ЭтоРегистр = Ложь, ЗагружаетсяДоОбъекта = Ложь, ПометкаИспользованияНастройки = Истина)
	
	Если ЗагружаетсяДоОбъекта Тогда
		ТекРежимЗагрузки = 0;
	Иначе
		ТекРежимЗагрузки = РежимЗагрузки;
	КонецЕсли;
	
	Если ЭтоРегистр = "Да" Тогда ЭтоРегистр = Истина ИначеЕсли ЭтоРегистр = "Нет" Тогда ЭтоРегистр = Ложь КонецЕсли;
	
	ТЗ = РеквизитФормыВЗначение(НаименованиеСтраницы);	
	Если ТекРежимЗагрузки = 0 Тогда
		ЗаполнитьНастройкиКолонокСправочника(ТЗ, ОбъектЗагрузки, ТекРежимЗагрузки);	
	ИначеЕсли ТекРежимЗагрузки = 1 ИЛИ ТекРежимЗагрузки = 5 Тогда
		Если ЭтоРегистр Тогда
			ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента(ОбъектЗагрузки, НаименованиеСтраницы);
			ЗаполнитьНастройкиКолонокРегистраДокумента(ТЗ, ОбъектЗагрузки, ЭтоРегистр);
		Иначе
			ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ, ОбъектЗагрузки);
		КонецЕсли;
	ИначеЕсли ТекРежимЗагрузки = 3 Тогда
		ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента(ОбъектЗагрузки, НаименованиеСтраницы);
		ЗаполнитьНастройкиКолонокРегистраДокумента(ТЗ, ОбъектЗагрузки);	
	КонецЕсли;
	УстновитьПредставлениеДопУсловийТЗ(ТЗ, , ПометкаИспользованияНастройки);	
	ЗначениеВРеквизитФормы(ТЗ, НаименованиеСтраницы);

КонецПроцедуры

&НаСервере
// Процедура удаляет программно созданные реквизиты и элементы формы
//
//	РежимВосстановления - Показывает, что происходит восстановление настроек и не требуется очищать таблицы настроек (булево)
//
Процедура ОчиститьСозданныеСтраницы(РежимВосстановления = Ложь)
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		УдалитьРеквизитыИЭлементыНастроекЗагрузкиДанных(КлючИЗначение.Ключ, КлючИЗначение.Значение)
	КонецЦикла;
	
	КоличествоСозданныхПодчиненныхНастроек = 0;
	
	Если НЕ РежимВосстановления Тогда
		ОчиститьТаблицыНастроек()
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРеквизитыИЭлементыНастроекЗагрузкиДанных(КлючЭлемента, Реквизит)
	
	Элементы.Удалить(Элементы[КлючЭлемента]);
	
	МассивРеквизитовУдалить = Новый Массив;
	МассивРеквизитовУдалить.Добавить(Реквизит);	
	ИзменитьРеквизиты(, МассивРеквизитовУдалить);
	
КонецПроцедуры

&НаСервере
// Процедура очищает таблицы настроек и добавляет на форму пустую основную таблицу настройки
//
Процедура ОчиститьТаблицыНастроек()
	
	ТаблицыНастроек.Очистить();
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	Оформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицыНастроек.Значение");
	Отбор.ПравоеЗначение = "ТаблицаЗагружаемыхРеквизитов";	
	ЗначениеУО = Оформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЗначениеУО.Значение = Истина;
	ЗначениеУО.Использование = Истина;	
	ПолеУО = Оформление.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных("ТаблицыНастроекРежимЗагрузкиДляВыбора");
	ПолеУО.Использование = Истина;
	
	ДобавитьСтраницуНастроек("ТаблицаЗагружаемыхРеквизитов", "Настройка");
	
КонецПроцедуры

&НаСервере
// Процедура добавляет условное оформление к добавленной странице настройки
//
//	НаименованиеЭлемента - Наименование таблицы настройки условное оформление которой нужно добавить
//
Процедура ДобавитьУсловноеОформлениеТаблицыНастроек(НаименованиеЭлемента)
	
	Оформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".МожетБытьПолемПоиска");
	Отбор.ПравоеЗначение = Ложь;	
	ЗначениеУО = Оформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЗначениеУО.Значение = Истина;
	ЗначениеУО.Использование = Истина;	
	ПолеУО = Оформление.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + "ПолеПоиска");
	ПолеУО.Использование = Истина;
	
	Оформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".РежимЗагрузки");
	Отбор.ПравоеЗначение = "Вычислять";	
	ЗначениеУО = Оформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЗначениеУО.Значение = Ложь;
	ЗначениеУО.Использование = Истина;	
	ПолеУО = Оформление.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + "ПредставлениеДопУсловий");
	ПолеУО.Использование = Истина;
		
	//Оформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
	//ОтборГруппаИЛИ = Оформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ОтборГруппаИЛИ.Использование = Истина;
	//ОтборГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;	
	//Отбор = ОтборГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//Отбор.Использование = Истина;
	//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".РежимЗагрузки");
	//Отбор.ПравоеЗначение = "Устанавливать";		
	//ОтборГруппаИ = ОтборГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ОтборГруппаИ.Использование = Истина;
	//ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	//Отбор = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//Отбор.Использование = Истина;
	//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".РежимЗагрузки");
	//Отбор.ПравоеЗначение = "Искать";
	//Отбор = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//Отбор.Использование = Истина;
	//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".ИскатьПо");
	//Отбор.ПравоеЗначение = "";	
	//Отбор = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//Отбор.Использование = Истина;
	//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".СвязьПоВладельцу");
	//Отбор.ПравоеЗначение = "";	
	//Отбор = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//Отбор.Использование = Истина;
	//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".СвязьПоТипу");
	//Отбор.ПравоеЗначение = "";
	//ЗначениеУО = Оформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	//ЗначениеУО.Значение = Истина;
	//ЗначениеУО.Использование = Истина;	
	//ПолеУО = Оформление.Поля.Элементы.Добавить();
	//ПолеУО.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + "ПредставлениеДопУсловий");
	//ПолеУО.Использование = Истина;
	//
	Оформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".НеУбиратьПометку");
	Отбор.ПравоеЗначение = Истина;
	ЗначениеУО = Оформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЗначениеУО.Значение = Истина;
	ЗначениеУО.Использование = Истина;	
	ПолеУО = Оформление.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + "Пометка");
	ПолеУО.Использование = Истина;
	
КонецПроцедуры                 

////////////////////////////////////////////////////////////////////////////////
