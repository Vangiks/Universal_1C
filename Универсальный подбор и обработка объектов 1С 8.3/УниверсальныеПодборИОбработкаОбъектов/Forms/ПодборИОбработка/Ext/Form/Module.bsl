&НаКлиенте
Перем ОбработкаПеретаскивание;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаПеретаскивание = Ложь;
	
	СписокВыбора = Элементы.ПолеОбъектПоиска.СписокВыбора;
	Элементы.ПолеОбъектПоиска.ВысотаСпискаВыбора = 15;

	Для Каждого Справочник Из Метаданные.Справочники Цикл
		Если ПравоДоступа("Просмотр", Справочник) Тогда
			ИмяСправочника = Справочник.Синоним;
			Если ИмяСправочника = "" Тогда
				ИмяСправочника = Справочник.Имя;
			КонецЕсли;
			
			Структура = Новый Структура;
			Структура.Вставить("Тип", "Справочник");
			Структура.Вставить("Имя", Справочник.Имя);
			Структура.Вставить("Представление", ИмяСправочника);

			СписокВыбора.Добавить(Структура, ИмяСправочника, , БиблиотекаКартинок.Справочник);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Документ Из Метаданные.Документы Цикл
		Если ПравоДоступа("Просмотр", Документ) Тогда
			ИмяДокумента = Документ.Синоним;
			Если ИмяДокумента = "" Тогда
				ИмяДокумента = Документ.Имя;
			КонецЕсли;
			
			Структура = Новый Структура;
			Структура.Вставить("Тип", "Документ");
			Структура.Вставить("Имя", Документ.Имя);
			Структура.Вставить("Представление", ИмяДокумента);
			
			СписокВыбора.Добавить(Структура, ИмяДокумента, , БиблиотекаКартинок.Документ);
		КонецЕсли;
	КонецЦикла;

	РеквизитФормыВЗначение("Объект").ЗагрузитьОбработки(ЭтаФорма, ДоступныеОбработки, ВыбранныеОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоискаПриИзменении(Элемент)
	ПриИзмененииОбъектаПоиска();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОбъектаПоиска()
	
	Если ОбъектПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	ТекстЗапроса = ПолучитьТекстЗапроса();
	ТекстПроизвольногоЗапроса = ТекстЗапроса;
	ОтборДанных = Неопределено;
	ПараметрыЗапроса.Очистить();
КонецПроцедуры

&НаСервере
Функция СформироватьУсловиеПоискаПоСтроке()
	УсловиеПоискаПоСтроке = "";
	
	Если СтрокаПоиска <> "" Тогда
		ИскомыйОбъект = ОбъектПоиска;
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИскомыйОбъект.Тип + "." + ИскомыйОбъект.Имя);
		
		УсловиеПоискаПоСтроке = "";

		СтрокаДляПоиска = СтрЗаменить(СтрокаПоиска, """", """""");

		Если ИскомыйОбъект.Тип = "Справочник" Тогда
			Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Наименование ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;

			Если ОбъектМетаданных.ДлинаКода <> 0 И ОбъектМетаданных.ТипКода = 
				Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Код ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;
		ИначеЕсли ИскомыйОбъект.Тип = "Документ" Тогда
			Если ОбъектМетаданных.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Номер ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;
		КонецЕсли;

		Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(Тип("Строка")) Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + Реквизит.Имя + " ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат УсловиеПоискаПоСтроке;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапроса()
    	
	ИскомыйОбъект = ОбъектПоиска;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИскомыйОбъект.Тип + "." + ИскомыйОбъект.Имя);
	Условие = "";

	ТекстЗапроса = "ВЫБРАТЬ 
	|	Ссылка КАК Объект, 
	|	Представление";
	
	Если ИскомыйОбъект.Тип = "Справочник" Тогда
		Если ОбъектМетаданных.ОсновноеПредставление <> Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеНаименования Тогда
			Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ", 
				|	Наименование";
			КонецЕсли;
			Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
				Условие = "Код";
			КонецЕсли;
		КонецЕсли;
		Если ОбъектМетаданных.ОсновноеПредставление <> Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда
			Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|	Код";
			КонецЕсли;
			Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				Условие = "Наименование";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИскомыйОбъект.Тип = "Документ" Тогда
		Условие = "Дата, Номер";
	КонецЕсли;

	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	" + Реквизит.Имя;
	КонецЦикла; 

	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ" + Символы.ПС;
	ТекстЗапроса = ТекстЗапроса + "	" + ИскомыйОбъект.Тип + "." + ОбъектМетаданных.Имя + " КАК _Таблица" + Символы.ПС;

	Для каждого ТЧ Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Для каждого ТЧР Из ТЧ.Реквизиты Цикл
			Если Условие <> "" Тогда
				Условие = Условие + ",";
			КонецЕсли;
			Условие = Условие + ТЧ.Имя + "." + ТЧР.Имя + ".* КАК " + ТЧ.Имя + ТЧР.Имя;
		КонецЦикла; 
	КонецЦикла;

	//Если Условие <> "" Тогда
	//	ТекстЗапроса = ТекстЗапроса + "{ГДЕ " + Условие + "}" + Символы.ПС;
	//КонецЕсли;

	//Если УсловиеПоискаПоСтроке <> "" Тогда
	//	ТекстЗапроса = ТекстЗапроса + "ГДЕ " + УсловиеПоискаПоСтроке + Символы.ПС;
	//КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции

&НаКлиенте
Процедура ОбъектПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ОбъектПоискаПредставление = ВыбранноеЗначение.Представление;
		ОбъектПоиска = ВыбранноеЗначение;
	Иначе
		ОбъектПоискаПредставление = "";
		ОбъектПоиска = Неопределено;
	КонецЕсли;
	
	ПриИзмененииОбъектаПоиска();
КонецПроцедуры

&НаКлиенте
Процедура НайтиСсылки(Команда)
	Состояние("Поиск ссылок...");
	НайтиСсылкиПоОтбору();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНаденныеОбъекты;
КонецПроцедуры

&НаСервере
Процедура НайтиСсылкиПоОтбору()
	
	_ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	Запрос = Новый Запрос;
		
	Если РежимПоиска = 1 Тогда
		Запрос.Текст = ТекстПроизвольногоЗапроса;
		Для Каждого СтрокаПараметров Из ПараметрыЗапроса Цикл
			Если СтрокаПараметров.ЭтоВыражение Тогда
				Запрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Вычислить(СтрокаПараметров.ЗначениеПараметра));
			Иначе
				Запрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Запрос.Текст = ТекстЗапроса;
		УсловиеПоискаПоСтроке = СформироватьУсловиеПоискаПоСтроке();
		СписокУсловий = УсловиеПоискаПоСтроке;
	
		Если ОтборДанных <> Неопределено Тогда
			Для Каждого ЭлементОтбора Из ОтборДанных.Отбор.Элементы Цикл
				Если НЕ ЭлементОтбора.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				Индекс = ОтборДанных.Отбор.Элементы.Индекс(ЭлементОтбора);
				ИмяПараметра = СтрЗаменить(Строка(ЭлементОтбора.ЛевоеЗначение) + Индекс, ".", "");
				
				СписокУсловий = СписокУсловий + ?(СписокУсловий = "", "", "
				|	И ") + _ЭтотОбъект.ПолучитьВидСравнения(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ВидСравнения, ИмяПараметра);
				
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
					Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбора.ПравоеЗначение.Дата);
				Иначе
					Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбора.ПравоеЗначение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СписокУсловий <> "" Тогда
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ 
			|	" + СписокУсловий;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ТЗ = Запрос.Выполнить().Выгрузить();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("Объект");
	МассивРеквизитов.Добавить("Картинка");
	МассивРеквизитов.Добавить("Выбрать");
	
	СоздатьКолонки(ТЗ, МассивРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	ВыбратьЭлементы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборВсех(Команда)
	ВыбратьЭлементы(Ложь);
КонецПроцедуры

&НаСервере
Процедура ВыбратьЭлементы(Выбор)
	Для Каждого Стр Из НайденныеОбъекты Цикл
		Стр.Выбрать = Выбор;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	Для каждого Строка из ВыбранныеОбработки Цикл
		ОбработкаПрерыванияПользователя();
		
		Если НЕ Строка.Выбрать Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = ДоступныеОбработки.НайтиПоИдентификатору(Строка.СтрокаДоступнойОбработки);
		Родитель = Стр.ПолучитьРодителя();
		
		СтруктураПараметров = СформироватьСтруктуруПараметров();
		СтруктураПараметров.Настройка = Стр.Настройка[0].Значение;
		
		Если Родитель = Неопределено Тогда
			ИмяФормыОбработки = Стр.ИмяФормы;
			
			СтруктураПараметров.Настройки = СформироватьНастройки(Стр);
			СтруктураПараметров.Вставить("Родитель", Стр.ПолучитьИдентификатор());
			СтруктураПараметров.Вставить("ТекущаяСтрока", Неопределено);
		Иначе
			ИмяФормыОбработки = Родитель.ИмяФормы;
			
			СтруктураПараметров.Настройки = СформироватьНастройки(Родитель);
			СтруктураПараметров.Вставить("Родитель", Родитель.ПолучитьИдентификатор());
			СтруктураПараметров.Вставить("ТекущаяСтрока", Строка.СтрокаДоступнойОбработки);
		КонецЕсли;
		
		Если НЕ ОбработкаДоступна(ОбъектПоиска.Тип, ИмяФормыОбработки) Тогда
			Сообщить("Обработка " + ИмяФормы + " недоступна для типа <" + ОбъектПоиска.Тип + ">");
			Продолжить;
		КонецЕсли;
		
		Обработка = ПолучитьФорму(ПолучитьПолноеИмяФормы(ИмяФормыОбработки), СтруктураПараметров, ЭтаФорма);
		Обработка.ЗагрузитьНастройку();
		Обработка.ВыполнитьОбработку();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СоздатьКолонки(ТЗ, МассивРеквизитовПоУмолчанию = Неопределено) Экспорт
	ТаблицаЭлемент = Элементы.НайденныеОбъекты;
	
	//очистка
	Для Каждого ДобавленныйЭлемент Из ДобавленныеЭлементы Цикл
		Элементы.Удалить(Элементы[ДобавленныйЭлемент.Значение]);
	КонецЦикла;
	ДобавленныеЭлементы.Очистить();
	
	//добавляем реквизиты
	МассивРеквизитов = Новый Массив;
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Если МассивРеквизитовПоУмолчанию <> Неопределено 
			И МассивРеквизитовПоУмолчанию.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипКолонки = Строка(Колонка.ТипЗначения);
		Если Колонка.Имя = "Представление" ИЛИ Найти(ТипКолонки, "Хранилище значения") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ТаблицаЭлемент.Имя);
		МассивРеквизитов.Добавить(РеквизитФормы);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов, ДобавленныеРеквизиты.ВыгрузитьЗначения());
	ДобавленныеРеквизиты.Очистить();
	
	//добавляем элементы управления
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		ДобавленныеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
		
		Элемент = Элементы.Добавить(ТаблицаЭлемент.Имя + Реквизит.Имя, Тип("ПолеФормы"), ТаблицаЭлемент);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ТаблицаЭлемент.Имя + "." + Реквизит.Имя;
		Элемент.ТолькоПросмотр = Истина;
		
		ДобавленныеЭлементы.Добавить(Элемент.Имя);
	КонецЦикла;
	
	//заполнение данными
	РедТЗ = РеквизитФормыВЗначение(ТаблицаЭлемент.Имя);
	РедТЗ.Очистить();
	Для Каждого Стр ИЗ ТЗ Цикл
		НовСтр = РедТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		
		НовСтр.Выбрать = Истина;
		
		Если ОбъектПоиска = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектПоиска.Тип = "Справочник" Тогда
			Если Стр.Объект.ЭтоГруппа Тогда
				Если Стр.Объект.ПометкаУдаления Тогда
					НовСтр.Картинка = 3;
				Иначе
					НовСтр.Картинка = 0;
				КонецЕсли;
			Иначе
				Если Стр.Объект.ПометкаУдаления Тогда
					НовСтр.Картинка = 4;
				Иначе
					НовСтр.Картинка = 1;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Стр.Объект.Проведен Тогда
				НовСтр.Картинка = 7;
			ИначеЕсли Стр.Объект.ПометкаУдаления Тогда
				НовСтр.Картинка = 8;
			Иначе
				НовСтр.Картинка = 6;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(РедТЗ, ТаблицаЭлемент.Имя);
КонецПроцедуры

&НаСервере
Функция ПолучитьПолноеИмяФормы(ИмяНужнойФормы)
	_ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	МассивСтрок = _ЭтотОбъект.РазложитьСтрокуВМассивПодстрок(ЭтаФорма.ИмяФормы, ".");
	МассивСтрок[МассивСтрок.Количество() - 1] = ИмяНужнойФормы;
	
	Возврат _ЭтотОбъект.ПолучитьСтрокуИзМассиваПодстрок(МассивСтрок, ".");
КонецФункции

&НаКлиенте
Процедура Отбор(Команда)
	Если ОбъектПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекстЗапроса", ТекстЗапроса);
	СтруктураПараметров.Вставить("ТекстПроизвольногоЗапроса", ТекстПроизвольногоЗапроса);
	СтруктураПараметров.Вставить("СтрокаПоиска", СтрокаПоиска);
	СтруктураПараметров.Вставить("Настройки", ОтборДанных);
	СтруктураПараметров.Вставить("ОбъектПоиска", ОбъектПоиска);
	СтруктураПараметров.Вставить("РежимПоиска", РежимПоиска);
	СтруктураПараметров.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ФормаОтбора = ПолучитьФорму(ПолучитьПолноеИмяФормы("ФормаОтбора"), СтруктураПараметров, ЭтаФорма);
	РезультатОтбора = ОткрытьФормуМодально(ФормаОтбора);
	Если РезультатОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатОтбора(РезультатОтбора);
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатОтбора(РезультатОтбора)
	ОтборДанных = РезультатОтбора.Настройки;
	СтрокаПоиска = РезультатОтбора.СтрокаПоиска;
	ПараметрыЗапроса.Загрузить(РезультатОтбора.ПараметрыЗапроса.Выгрузить());
	
	ТекстЗапроса = РезультатОтбора.ТекстЗапроса;
	ТекстПроизвольногоЗапроса = РезультатОтбора.ТекстПроизвольногоЗапроса;
	РежимПоиска = РезультатОтбора.РежимПоиска;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	Если ОбъектПоиска = Неопределено Тогда
		Элементы.НайтиСсылки.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.НайтиСсылки.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступность();
	УстановитьКартинкиОбработок();
	//ПриИзмененииОбъектаПоиска();
		
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОбработкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИндексСтроки = Элементы.ДоступныеОбработки.ТекущаяСтрока;
	ТекущаяСтрока = ДоступныеОбработки.НайтиПоИдентификатору(ИндексСтроки);
	
	СтруктураПараметров = СформироватьСтруктуруПараметров();
	СтруктураПараметров.Настройка = ТекущаяСтрока.Настройка[0].Значение;
	
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Если НЕ ОбработкаДоступна(ОбъектПоиска.Тип, ТекущаяСтрока.ИмяФормы) Тогда
			Предупреждение("Данная обработка недоступна для типа <" + ОбъектПоиска.Тип + ">");
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров.Настройки = СформироватьНастройки(Элемент.ТекущиеДанные);
		СтруктураПараметров.Вставить("Родитель", ТекущаяСтрока.ПолучитьИдентификатор());
		СтруктураПараметров.Вставить("ТекущаяСтрока", Неопределено);
		
		Обработка = ПолучитьФорму(ПолучитьПолноеИмяФормы(ТекущаяСтрока.ИмяФормы), СтруктураПараметров, ЭтаФорма);
	Иначе
		Если НЕ ОбработкаДоступна(ОбъектПоиска.Тип, Родитель.ИмяФормы) Тогда
			Предупреждение("Данная обработка недоступна для типа <" + ОбъектПоиска.Тип + ">");
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров.Настройки = СформироватьНастройки(Родитель);
		СтруктураПараметров.Вставить("Родитель", Родитель.ПолучитьИдентификатор());
		СтруктураПараметров.Вставить("ТекущаяСтрока", ИндексСтроки);
		
		Обработка = ПолучитьФорму(ПолучитьПолноеИмяФормы(Родитель.ИмяФормы), СтруктураПараметров, ЭтаФорма);
	КонецЕсли;

	ОткрытьФормуМодально(Обработка);
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПараметров()
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Настройка",  Неопределено);
	СтруктураПараметров.Вставить("Настройки",  Новый Массив);
	СтруктураПараметров.Вставить("ОбъектПоиска",  ОбъектПоиска);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выбрать", Истина);
	СтруктураПараметров.Вставить("НайденныеОбъекты",  НайденныеОбъекты.Выгрузить(СтруктураОтбора, "Объект").ВыгрузитьКолонку("Объект"));
	
	Возврат СтруктураПараметров;
КонецФункции

&НаКлиенте
Процедура ДоступныеОбработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;

	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если Копирование Тогда
			Отказ = Истина;
		Иначе
			Если НЕ ОбработкаДоступна(ОбъектПоиска.Тип, Элемент.ТекущиеДанные.ИмяФормы) Тогда
				Предупреждение("Данная обработка недоступна для типа <" + ОбъектПоиска.Тип + ">");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Отказ = НЕ ПолучитьФорму(ПолучитьПолноеИмяФормы(Элемент.ТекущиеДанные.ИмяФормы)).мИспользоватьНастройки;
			Если НЕ Отказ Тогда
				//свое добавление
				Отказ = Истина;
				ДобавитьСтроку(Элемент.ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ОбработкаДоступна(ОбъектПоиска.Тип, Элемент.ТекущиеДанные.ПолучитьРодителя().ИмяФормы) Тогда
			Предупреждение("Данная обработка недоступна для типа <" + ОбъектПоиска.Тип + ">");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Отказ = Истина;
		Если НЕ Копирование Тогда
			Если ПолучитьФорму(ПолучитьПолноеИмяФормы(Элемент.ТекущиеДанные.ПолучитьРодителя().ИмяФормы)).мИспользоватьНастройки Тогда
				ДобавитьСтроку(Элемент.ТекущиеДанные.ПолучитьРодителя());
			КонецЕсли;
		Иначе
			ТекСтрока = Элемент.ТекущиеДанные;
			Родитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			НоваяСтрока = ДобавитьСтроку(Родитель);
			
			Если НЕ ТекСтрока.Настройка[0].Значение = Неопределено Тогда
				НоваяНастройка = Новый Структура();
				Для Каждого РеквизитНастройки Из ТекСтрока.Настройка[0].Значение Цикл
					Значение = РеквизитНастройки.Значение;
					Выполнить("НоваяНастройка.Вставить(Строка(РеквизитНастройки.Ключ), Значение);");
				КонецЦикла;

				НоваяСтрока.Настройка[0].Значение = НоваяНастройка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьСтроку(ТекСтрока)
		
	НоваяСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
	
	Настройка = Новый Структура;
	Настройка.Вставить("Обработка", ТекСтрока.Обработка);
	Настройка.Вставить("Прочее", Неопределено);
	
	НоваяСтрока.Настройка.Добавить(Настройка);
	
	Элементы.ДоступныеОбработки.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ДоступныеОбработки.ИзменитьСтроку();
	
	Возврат НоваяСтрока;
КонецФункции

&НаКлиенте
Функция СформироватьНастройки(ТекСтрока)
	
	МассивНастроек = Новый Массив;
	Для Каждого Стр Из ТекСтрока.ПолучитьЭлементы() Цикл
		Если Стр.Настройка[0].Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивНастроек.Добавить(Стр.Настройка[0].Значение);
	КонецЦикла;
	
	Возврат МассивНастроек;
КонецФункции

&НаКлиенте
Процедура ДоступныеОбработкиПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОбработкиПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Вопрос("Удалить настройку?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК) = КодВозвратаДиалога.ОК Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СтрокаДоступнойОбработки", Элемент.ТекущаяСтрока);
		
		МассивДляУдаления = ВыбранныеОбработки.НайтиСтроки(ПараметрыОтбора);
		Для Индекс = 0 по МассивДляУдаления.Количество() - 1 Цикл
			ВыбранныеОбработки.Удалить(МассивДляУдаления[Индекс]);
		КонецЦикла;
	Иначе
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОбработкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если НЕ ПроверитьДоступностьОбработки() Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Данная обработка недоступна для типа <" + ОбъектПоиска.Тип + ">");
		Возврат;
	КонецЕсли;
	
	ОбработкаПеретаскивание = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДоступностьОбработки()
	ИндексСтроки = Элементы.ДоступныеОбработки.ТекущаяСтрока;
	ТекущаяСтрока = ДоступныеОбработки.НайтиПоИдентификатору(ИндексСтроки);
	
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат ОбработкаДоступна(ОбъектПоиска.Тип, ТекущаяСтрока.ИмяФормы);
	КонецЕсли;
	
	Возврат ОбработкаДоступна(ОбъектПоиска.Тип, Родитель.ИмяФормы);
КонецФункции

&НаКлиенте
Процедура ВыбранныеОбработкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если НЕ ОбработкаПеретаскивание Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрВыбранных Из ПараметрыПеретаскивания.Значение Цикл
		СтрДоступных = ДоступныеОбработки.НайтиПоИдентификатору(СтрВыбранных);
		
		НовСтр = ВыбранныеОбработки.Добавить();
		НовСтр.ОбработкаНастройка = СтрДоступных.Обработка;
		НовСтр.СтрокаДоступнойОбработки = СтрВыбранных;
		НовСтр.Выбрать = Истина;
		НовСтр.Настройка = СтрДоступных.Настройка;
	КонецЦикла;
	
	ОбработкаПеретаскивание = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеОбработки(Команда)
	ВыбратьОбработки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборВсехОбработок(Команда)
	ВыбратьОбработки(Ложь);
КонецПроцедуры

&НаСервере
Процедура ВыбратьОбработки(Выбор)
	Для Каждого Стр Из ВыбранныеОбработки Цикл
		Стр.Выбрать = Выбор;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОбработкаДоступна(ПроверяемыйТипОбъекта = "", ИмяОбработки)

	Если ПустаяСтрока(ПроверяемыйТипОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли;

	Попытка
		ТипыОбрабатываемыхОбъектов = ПолучитьФорму(ПолучитьПолноеИмяФормы(ИмяОбработки)).мТипыОбрабатываемыхОбъектов;
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	Если ТипыОбрабатываемыхОбъектов = Неопределено Тогда
    	Возврат Истина;
	Иначе
		Если Найти(ТипыОбрабатываемыхОбъектов, ПроверяемыйТипОбъекта) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ДоступныеОбработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройка = Элемент.ТекущиеДанные.Настройка[0].Значение;
	Настройка.Обработка = Элемент.ТекущиеДанные.Обработка;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкиОбработок()
	Для Каждого Стр Из ДоступныеОбработки.ПолучитьЭлементы() Цикл
		Стр.Картинка = БиблиотекаКартинок.Обработка;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	//Вставить содержимое обработчика
	ОбъектПоиска = Настройки["ОбъектПоиска"];
	ОтборДанных = Настройки["ОтборДанных"];
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	//Вставить содержимое обработчика
	
	аа = 11;
КонецПроцедуры

&НаКлиенте
Процедура ПолеОбъектПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры
